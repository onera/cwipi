        // Tetraedre case
        // local faces : 1, 3, 2,
        //               1, 2, 4
        //               1, 4, 3
        //               2, 3, 4     
        nFace = 4;
        faceConnectivityIndex[1] = 3; 
        faceConnectivityIndex[2] = 6; 
        faceConnectivityIndex[3] = 9; 
        faceConnectivityIndex[4] = 12;
        faceConnectivity[0]      = _eltConnectivity[index];
        faceConnectivity[1]      = _eltConnectivity[index+2];
        faceConnectivity[2]      = _eltConnectivity[index+1];
        faceConnectivity[3]      = _eltConnectivity[index];
        faceConnectivity[4]      = _eltConnectivity[index+1];
        faceConnectivity[5]      = _eltConnectivity[index+3];
        faceConnectivity[6]      = _eltConnectivity[index];
        faceConnectivity[7]      = _eltConnectivity[index+3];
        faceConnectivity[8]      = _eltConnectivity[index+2];
        faceConnectivity[9]      = _eltConnectivity[index+1];
        faceConnectivity[10]     = _eltConnectivity[index+2];
        faceConnectivity[11]     = _eltConnectivity[index+3];

        // Pyramid case
        // local faces : 1, 2, 5,
        //               1, 5, 4
        //               2, 3, 5
        //               3, 4, 5
        //               1, 4, 3, 2
//         nFace = 5;
//         faceConnectivityIndex[1] = 3; 
//         faceConnectivityIndex[2] = 6; 
//         faceConnectivityIndex[3] = 9; 
//         faceConnectivityIndex[4] = 12; 
//         faceConnectivityIndex[5] = 16; 
//         faceConnectivity[0] = _eltConnectivity[index];
//         faceConnectivity[1] = _eltConnectivity[index+1];
//         faceConnectivity[2] = _eltConnectivity[index+4];
//         faceConnectivity[3] = _eltConnectivity[index];
//         faceConnectivity[4] = _eltConnectivity[index+4];
//         faceConnectivity[5] = _eltConnectivity[index+3];
//         faceConnectivity[6] = _eltConnectivity[index+1];
//         faceConnectivity[7] = _eltConnectivity[index+2];
//         faceConnectivity[8] = _eltConnectivity[index+4];
//         faceConnectivity[9] = _eltConnectivity[index+2];
//         faceConnectivity[10] = _eltConnectivity[index+3];
//         faceConnectivity[11] = _eltConnectivity[index+4];
//         faceConnectivity[12] = _eltConnectivity[index];
//         faceConnectivity[13] = _eltConnectivity[index+3];
//         faceConnectivity[14] = _eltConnectivity[index+2];
//         faceConnectivity[15] = _eltConnectivity[index+1];

        // Prism case
        // local faces : 1, 3, 2,
        //               4, 5, 6
        //               1, 2, 5, 4
        //               1, 4, 6, 3
        //               2, 3, 6, 5
//         nFace = 5;
//         faceConnectivityIndex[1] = 3; 
//         faceConnectivityIndex[2] = 6; 
//         faceConnectivityIndex[3] = 10; 
//         faceConnectivityIndex[4] = 14; 
//         faceConnectivityIndex[5] = 18; 
//         faceConnectivity[0] = _eltConnectivity[index];
//         faceConnectivity[1] = _eltConnectivity[index+2];
//         faceConnectivity[2] = _eltConnectivity[index+1];
//         faceConnectivity[3] = _eltConnectivity[index+3];
//         faceConnectivity[4] = _eltConnectivity[index+4];
//         faceConnectivity[5] = _eltConnectivity[index+5];
//         faceConnectivity[6] = _eltConnectivity[index];
//         faceConnectivity[7] = _eltConnectivity[index+1];
//         faceConnectivity[8] = _eltConnectivity[index+4];
//         faceConnectivity[9] = _eltConnectivity[index+3];
//         faceConnectivity[10] = _eltConnectivity[index];
//         faceConnectivity[11] = _eltConnectivity[index+3];
//         faceConnectivity[12] = _eltConnectivity[index+5];
//         faceConnectivity[13] = _eltConnectivity[index+2];
//         faceConnectivity[14] = _eltConnectivity[index+1];
//         faceConnectivity[15] = _eltConnectivity[index+2];
//         faceConnectivity[16] = _eltConnectivity[index+5];
//         faceConnectivity[17] = _eltConnectivity[index+4];


        // Hexa case
        // local faces : 1, 4, 3, 2,
        //               1, 2. 6, 5
        //               1, 5, 8, 4
        //               2, 3, 7, 6
        //               3, 4, 8, 7
        //               5, 6, 7, 8
//         nFace = 6;
//         faceConnectivityIndex[1] = 4; 
//         faceConnectivityIndex[2] = 8; 
//         faceConnectivityIndex[3] = 12; 
//         faceConnectivityIndex[4] = 16; 
//         faceConnectivityIndex[5] = 20; 
//         faceConnectivityIndex[6] = 24; 
//         faceConnectivity[0] = _eltConnectivity[index];
//         faceConnectivity[1] = _eltConnectivity[index+3];
//         faceConnectivity[2] = _eltConnectivity[index+2];
//         faceConnectivity[3] = _eltConnectivity[index+1];
//         faceConnectivity[4] = _eltConnectivity[index];
//         faceConnectivity[5] = _eltConnectivity[index+1];
//         faceConnectivity[6] = _eltConnectivity[index+5];
//         faceConnectivity[7] = _eltConnectivity[index+4];
//         faceConnectivity[8] = _eltConnectivity[index];
//         faceConnectivity[9] = _eltConnectivity[index+4];
//         faceConnectivity[10] = _eltConnectivity[index+7];
//         faceConnectivity[11] = _eltConnectivity[index+3];
//         faceConnectivity[12] = _eltConnectivity[index+1];
//         faceConnectivity[13] = _eltConnectivity[index+2];
//         faceConnectivity[14] = _eltConnectivity[index+6];
//         faceConnectivity[15] = _eltConnectivity[index+5];
//         faceConnectivity[16] = _eltConnectivity[index+2];
//         faceConnectivity[17] = _eltConnectivity[index+3];
//         faceConnectivity[18] = _eltConnectivity[index+7];
//         faceConnectivity[19] = _eltConnectivity[index+6];
//         faceConnectivity[20] = _eltConnectivity[index+4];
//         faceConnectivity[21] = _eltConnectivity[index+5];
//         faceConnectivity[22] = _eltConnectivity[index+6];
//         faceConnectivity[23] = _eltConnectivity[index+7];



      int maxFacePolyhedra = 0;
      int maxVertexFace = 0;
      
      for (int i = 0; i < _nPolyhedra; i++) {
        int nFacePolyhedra = _polyhedraFaceIndex[i+1] - _polyhedraFaceIndex[i];
        if (maxFacePolyhedra < nFacePolyhedra) 
          maxFacePolyhedra = nFacePolyhedra;
        int faceIndex = _polyhedraCellToFaceConnectivity[i];
        int nVertexFace = 0;
        for (int j = 0; j < nFacePolyhedra; j++) {
          int iface = _polyhedraCellToFaceConnectivity[faceIndex+j] - 1;
          nVertexFace += (_polyhedraFaceConnectivityIndex[iface+1] - _polyhedraFaceConnectivityIndex[iface]);
        }
        if (maxVertexFace < nVertexFace)
          maxVertexFace = nVertexFace;
      }
      
      if (maxFacePolyhedra > 6) {
        faceSurface.resize(maxFacePolyhedra,0.);
        faceCenter.resize(3*maxFacePolyhedra,0.);
        faceNormal.resize(3*maxFacePolyhedra,0.);
        faceConnectivityIndex.resize(maxFacePolyhedra+1);
      }
    
      if  (maxVertexFace > 24)
        faceConnectivity.resize(maxVertexFace);
      
      for (int i = 0; i < _nPolyhedra; i++) {
        int nFacePolyhedra = _polyhedraFaceIndex[i+1] - _polyhedraFaceIndex[i];
        int faceIndex = _polyhedraCellToFaceConnectivity[i];
        int nVertexFace = 0;
        faceConnectivityIndex[0] = 0;
        for (int j = 0; j < nFacePolyhedra; j++) {
          int iface = _polyhedraCellToFaceConnectivity[faceIndex+j] - 1;
          bool reorient = false;
          if (iface < 0) {
            iface = -iface;
            reorient = true;
          }
            
          nVertexFace += _polyhedraFaceConnectivityIndex[iface+1] - _polyhedraFaceConnectivityIndex[iface];
          int vertexIndex = _polyhedraFaceConnectivityIndex[iface];
          faceConnectivityIndex[j+1] = faceConnectivityIndex[j] + nVertexFace;
          for (int k = 0; k < nVertexFace; k++) {
            if (reorient)
              faceConnectivity[faceConnectivityIndex[j+1]-1-k] = _polyhedraFaceConnectivity[vertexIndex+k];
            else
              faceConnectivity[faceConnectivityIndex[j]+k] = _polyhedraFaceConnectivity[vertexIndex+k];
          }
        }
        _computeMeshProperties2D(nFacePolyhedra,
                                 &faceConnectivityIndex[0],
                                 &faceConnectivity[0],
                                 &faceNormal,
                                 &faceSurface,
                                 &faceCenter);
      
        double cellSurface = 0.;
      
        refCellCenterCoords[3*(nStandardElement+i)]   = 0.;
        refCellCenterCoords[3*(nStandardElement+i)+1] = 0.;
        refCellCenterCoords[3*(nStandardElement+i)+2] = 0.;
        refCellVolume[nStandardElement+i] = 0.;
      
        for (int j = 0; j < nFace; j++) {
          cellSurface += faceNormal[i];
          refCellCenterCoords[3*(nStandardElement+i)]   += faceNormal[i] * faceCenter[3*i];
          refCellCenterCoords[3*(nStandardElement+i)+1] += faceNormal[i+1] * faceCenter[3*i+1];
          refCellCenterCoords[3*(nStandardElement+i)+2] += faceNormal[i+2] * faceCenter[3*i+2];
          refCellVolume[(nStandardElement+i)] += faceNormal[i] * faceCenter[3*i] + 
                                               faceNormal[i+1] * faceCenter[3*i+1] +
                                               faceNormal[i+2] * faceCenter[3*i+2];
        }
        refCellVolume[nStandardElement+i] *= 1./3.;
        refCellCenterCoords[3*(nStandardElement+i)]   /= cellSurface;
        refCellCenterCoords[3*(nStandardElement+i)+1] /= cellSurface;
        refCellCenterCoords[3*(nStandardElement+i)+2] /= cellSurface;
      }
    }