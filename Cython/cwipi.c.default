/* Generated by Cython 0.24 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__Cython__cwipi
#define __PYX_HAVE_API__Cython__cwipi
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "mpi.h"
#include "fileobject.h"
#include "cwipi.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* None.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "Cython/cwipi.pyx",
  "__init__.pxd",
  "type.pxd",
  "MPI.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct PyMPIStatusObject;
struct PyMPIDatatypeObject;
struct PyMPIRequestObject;
struct PyMPIPrequestObject;
struct PyMPIGrequestObject;
struct PyMPIMessageObject;
struct PyMPIOpObject;
struct PyMPIGroupObject;
struct PyMPIInfoObject;
struct PyMPIErrhandlerObject;
struct PyMPICommObject;
struct PyMPIIntracommObject;
struct PyMPITopocommObject;
struct PyMPICartcommObject;
struct PyMPIGraphcommObject;
struct PyMPIDistgraphcommObject;
struct PyMPIIntercommObject;
struct PyMPIWinObject;
struct PyMPIFileObject;
struct __pyx_obj_6Cython_5cwipi_Coupling;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "mpi4py/MPI.pxd":28
 *     ctypedef MPI_Count  Count  "MPI_Count"
 * 
 * ctypedef public api class Status [             # <<<<<<<<<<<<<<
 *     type   PyMPIStatus_Type,
 *     object PyMPIStatusObject,
 */
struct PyMPIStatusObject {
  PyObject_HEAD
  MPI_Status ob_mpi;
  unsigned int flags;
};
typedef struct PyMPIStatusObject PyMPIStatusObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIStatus_Type;

/* "mpi4py/MPI.pxd":35
 *     cdef unsigned   flags
 * 
 * ctypedef public api class Datatype [             # <<<<<<<<<<<<<<
 *     type   PyMPIDatatype_Type,
 *     object PyMPIDatatypeObject,
 */
struct PyMPIDatatypeObject {
  PyObject_HEAD
  MPI_Datatype ob_mpi;
  unsigned int flags;
};
typedef struct PyMPIDatatypeObject PyMPIDatatypeObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIDatatype_Type;

/* "mpi4py/MPI.pxd":42
 *     cdef unsigned     flags
 * 
 * ctypedef public api class Request [             # <<<<<<<<<<<<<<
 *     type   PyMPIRequest_Type,
 *     object PyMPIRequestObject,
 */
struct PyMPIRequestObject {
  PyObject_HEAD
  MPI_Request ob_mpi;
  unsigned int flags;
  PyObject *ob_buf;
};
typedef struct PyMPIRequestObject PyMPIRequestObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIRequest_Type;

/* "mpi4py/MPI.pxd":50
 *     cdef object      ob_buf
 * 
 * ctypedef public api class Prequest(Request) [             # <<<<<<<<<<<<<<
 *     type   PyMPIPrequest_Type,
 *     object PyMPIPrequestObject,
 */
struct PyMPIPrequestObject {
  struct PyMPIRequestObject __pyx_base;
};
typedef struct PyMPIPrequestObject PyMPIPrequestObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIPrequest_Type;

/* "mpi4py/MPI.pxd":56
 *     pass
 * 
 * ctypedef public api class Grequest(Request) [             # <<<<<<<<<<<<<<
 *     type   PyMPIGrequest_Type,
 *     object PyMPIGrequestObject,
 */
struct PyMPIGrequestObject {
  struct PyMPIRequestObject __pyx_base;
  MPI_Request ob_grequest;
};
typedef struct PyMPIGrequestObject PyMPIGrequestObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIGrequest_Type;

/* "mpi4py/MPI.pxd":62
 *     cdef MPI_Request ob_grequest
 * 
 * ctypedef public api class Message [             # <<<<<<<<<<<<<<
 *     type   PyMPIMessage_Type,
 *     object PyMPIMessageObject,
 */
struct PyMPIMessageObject {
  PyObject_HEAD
  MPI_Message ob_mpi;
  unsigned int flags;
  PyObject *ob_buf;
};
typedef struct PyMPIMessageObject PyMPIMessageObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIMessage_Type;

/* "mpi4py/MPI.pxd":70
 *     cdef object      ob_buf
 * 
 * ctypedef public api class Op [             # <<<<<<<<<<<<<<
 *     type   PyMPIOp_Type,
 *     object PyMPIOpObject,
 */
struct PyMPIOpObject {
  PyObject_HEAD
  MPI_Op ob_mpi;
  int flags;
  PyObject *(*ob_func)(PyObject *, PyObject *);
  int ob_usrid;
};
typedef struct PyMPIOpObject PyMPIOpObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIOp_Type;

/* "mpi4py/MPI.pxd":79
 *     cdef int    ob_usrid
 * 
 * ctypedef public api class Group [             # <<<<<<<<<<<<<<
 *     type   PyMPIGroup_Type,
 *     object PyMPIGroupObject,
 */
struct PyMPIGroupObject {
  PyObject_HEAD
  MPI_Group ob_mpi;
  unsigned int flags;
};
typedef struct PyMPIGroupObject PyMPIGroupObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIGroup_Type;

/* "mpi4py/MPI.pxd":86
 *     cdef unsigned  flags
 * 
 * ctypedef public api class Info [             # <<<<<<<<<<<<<<
 *     type   PyMPIInfo_Type,
 *     object PyMPIInfoObject,
 */
struct PyMPIInfoObject {
  PyObject_HEAD
  MPI_Info ob_mpi;
  unsigned int flags;
};
typedef struct PyMPIInfoObject PyMPIInfoObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIInfo_Type;

/* "mpi4py/MPI.pxd":93
 *     cdef unsigned flags
 * 
 * ctypedef public api class Errhandler [             # <<<<<<<<<<<<<<
 *     type   PyMPIErrhandler_Type,
 *     object PyMPIErrhandlerObject,
 */
struct PyMPIErrhandlerObject {
  PyObject_HEAD
  MPI_Errhandler ob_mpi;
  unsigned int flags;
};
typedef struct PyMPIErrhandlerObject PyMPIErrhandlerObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIErrhandler_Type;

/* "mpi4py/MPI.pxd":100
 *     cdef unsigned       flags
 * 
 * ctypedef public api class Comm [             # <<<<<<<<<<<<<<
 *     type   PyMPIComm_Type,
 *     object PyMPICommObject,
 */
struct PyMPICommObject {
  PyObject_HEAD
  MPI_Comm ob_mpi;
  unsigned int flags;
};
typedef struct PyMPICommObject PyMPICommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIComm_Type;

/* "mpi4py/MPI.pxd":107
 *     cdef unsigned flags
 * 
 * ctypedef public api class Intracomm(Comm) [             # <<<<<<<<<<<<<<
 *     type   PyMPIIntracomm_Type,
 *     object PyMPIIntracommObject,
 */
struct PyMPIIntracommObject {
  struct PyMPICommObject __pyx_base;
};
typedef struct PyMPIIntracommObject PyMPIIntracommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIIntracomm_Type;

/* "mpi4py/MPI.pxd":113
 *     pass
 * 
 * ctypedef public api class Topocomm(Intracomm) [             # <<<<<<<<<<<<<<
 *     type   PyMPITopocomm_Type,
 *     object PyMPITopocommObject,
 */
struct PyMPITopocommObject {
  struct PyMPIIntracommObject __pyx_base;
};
typedef struct PyMPITopocommObject PyMPITopocommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPITopocomm_Type;

/* "mpi4py/MPI.pxd":119
 *     pass
 * 
 * ctypedef public api class Cartcomm(Topocomm) [             # <<<<<<<<<<<<<<
 *     type   PyMPICartcomm_Type,
 *     object PyMPICartcommObject,
 */
struct PyMPICartcommObject {
  struct PyMPITopocommObject __pyx_base;
};
typedef struct PyMPICartcommObject PyMPICartcommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPICartcomm_Type;

/* "mpi4py/MPI.pxd":125
 *     pass
 * 
 * ctypedef public api class Graphcomm(Topocomm) [             # <<<<<<<<<<<<<<
 *     type   PyMPIGraphcomm_Type,
 *     object PyMPIGraphcommObject,
 */
struct PyMPIGraphcommObject {
  struct PyMPITopocommObject __pyx_base;
};
typedef struct PyMPIGraphcommObject PyMPIGraphcommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIGraphcomm_Type;

/* "mpi4py/MPI.pxd":131
 *     pass
 * 
 * ctypedef public api class Distgraphcomm(Topocomm) [             # <<<<<<<<<<<<<<
 *     type   PyMPIDistgraphcomm_Type,
 *     object PyMPIDistgraphcommObject,
 */
struct PyMPIDistgraphcommObject {
  struct PyMPITopocommObject __pyx_base;
};
typedef struct PyMPIDistgraphcommObject PyMPIDistgraphcommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIDistgraphcomm_Type;

/* "mpi4py/MPI.pxd":137
 *     pass
 * 
 * ctypedef public api class Intercomm(Comm) [             # <<<<<<<<<<<<<<
 *     type   PyMPIIntercomm_Type,
 *     object PyMPIIntercommObject,
 */
struct PyMPIIntercommObject {
  struct PyMPICommObject __pyx_base;
};
typedef struct PyMPIIntercommObject PyMPIIntercommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIIntercomm_Type;

/* "mpi4py/MPI.pxd":143
 *     pass
 * 
 * ctypedef public api class Win [             # <<<<<<<<<<<<<<
 *     type   PyMPIWin_Type,
 *     object PyMPIWinObject,
 */
struct PyMPIWinObject {
  PyObject_HEAD
  MPI_Win ob_mpi;
  unsigned int flags;
  PyObject *ob_mem;
};
typedef struct PyMPIWinObject PyMPIWinObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIWin_Type;

/* "mpi4py/MPI.pxd":151
 *     cdef object   ob_mem
 * 
 * ctypedef public api class File [             # <<<<<<<<<<<<<<
 *     type   PyMPIFile_Type,
 *     object PyMPIFileObject,
 */
struct PyMPIFileObject {
  PyObject_HEAD
  MPI_File ob_mpi;
  unsigned int flags;
};
typedef struct PyMPIFileObject PyMPIFileObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIFile_Type;

/* "Cython/cwipi.pyx":532
 * # --------------
 * 
 * cdef class Coupling (object):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_6Cython_5cwipi_Coupling {
  PyObject_HEAD
  char *name;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* BufferFormatCheck.proto */
static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type); // PROTO

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* None.proto */
static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_coupling_type_t(cwipi_coupling_type_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_mesh_type_t(cwipi_mesh_type_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_solver_type_t(cwipi_solver_type_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_located_point_info_t(cwipi_located_point_info_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_exchange_status_t(cwipi_exchange_status_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX         && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE cwipi_coupling_type_t __Pyx_PyInt_As_cwipi_coupling_type_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE cwipi_mesh_type_t __Pyx_PyInt_As_cwipi_mesh_type_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE cwipi_solver_type_t __Pyx_PyInt_As_cwipi_solver_type_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'mpi4py.libmpi' */

/* Module declarations from 'mpi4py.MPI' */
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Status = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Datatype = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Request = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Prequest = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Grequest = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Message = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Op = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Group = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Info = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Errhandler = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Comm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Intracomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Topocomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Cartcomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Graphcomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Distgraphcomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Intercomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Win = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_File = 0;

/* Module declarations from 'Cython.cwipi' */
static PyTypeObject *__pyx_ptype_6Cython_5cwipi_file = 0;
static PyTypeObject *__pyx_ptype_6Cython_5cwipi_Coupling = 0;
static void __pyx_f_6Cython_5cwipi_callback(int, int, int, int, int, double *, int *, int *, int *, int *, int *, int *, double *, int *, float *, int *, double *, int, cwipi_solver_type_t, void *, void *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
#define __Pyx_MODULE_NAME "Cython.cwipi"
int __pyx_module_is_main_Cython__cwipi = 0;

/* Implementation of 'Cython.cwipi' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static const char __pyx_k_[] = "";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_c_file[] = "c_file";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_n_face[] = "n_face";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_stride[] = "stride";
static const char __pyx_k_request[] = "request";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_finalize[] = "finalize";
static const char __pyx_k_interp_f[] = "interp_f";
static const char __pyx_k_n_points[] = "n_points";
static const char __pyx_k_n_vertex[] = "n_vertex";
static const char __pyx_k_mesh_type[] = "mesh_type";
static const char __pyx_k_n_element[] = "n_element";
static const char __pyx_k_time_step[] = "time_step";
static const char __pyx_k_tolerance[] = "tolerance";
static const char __pyx_k_BASIC_INFO[] = "BASIC_INFO";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_face_index[] = "face_index";
static const char __pyx_k_time_value[] = "time_value";
static const char __pyx_k_CYCLIC_MESH[] = "CYCLIC_MESH";
static const char __pyx_k_EXCHANGE_OK[] = "EXCHANGE_OK";
static const char __pyx_k_MOBILE_MESH[] = "MOBILE_MESH";
static const char __pyx_k_STATIC_MESH[] = "STATIC_MESH";
static const char __pyx_k_common_comm[] = "common_comm";
static const char __pyx_k_coordinates[] = "coordinates";
static const char __pyx_k_current_cpl[] = "current_cpl";
static const char __pyx_k_entitiesDim[] = "entitiesDim";
static const char __pyx_k_solver_type[] = "solver_type";
static const char __pyx_k_Cython_cwipi[] = "Cython.cwipi";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_c_parameters[] = "c_parameters";
static const char __pyx_k_connectivity[] = "connectivity";
static const char __pyx_k_d_parameters[] = "d_parameters";
static const char __pyx_k_i_parameters[] = "i_parameters";
static const char __pyx_k_n_parameters[] = "n_parameters";
static const char __pyx_k_nb_locations[] = "nb_locations";
static const char __pyx_k_s_parameters[] = "s_parameters";
static const char __pyx_k_c_common_comm[] = "c_common_comm";
static const char __pyx_k_coupling_name[] = "coupling_name";
static const char __pyx_k_coupling_type[] = "coupling_type";
static const char __pyx_k_exchange_name[] = "exchange_name";
static const char __pyx_k_initial_value[] = "initial_value";
static const char __pyx_k_output_format[] = "output_format";
static const char __pyx_k_sending_field[] = "sending_field";
static const char __pyx_k_output_listing[] = "output_listing";
static const char __pyx_k_receiving_field[] = "receiving_field";
static const char __pyx_k_application_comm[] = "application_comm";
static const char __pyx_k_application_name[] = "application_name";
static const char __pyx_k_output_frequency[] = "output_frequency";
static const char __pyx_k_DISTANT_MESH_INFO[] = "DISTANT_MESH_INFO";
static const char __pyx_k_face_connectivity[] = "face_connectivity";
static const char __pyx_k_has_int_parameter[] = "has_int_parameter";
static const char __pyx_k_SOLVER_CELL_CENTER[] = "SOLVER_CELL_CENTER";
static const char __pyx_k_SOLVER_CELL_VERTEX[] = "SOLVER_CELL_VERTEX";
static const char __pyx_k_connectivity_index[] = "connectivity_index";
static const char __pyx_k_sending_field_name[] = "sending_field_name";
static const char __pyx_k_set_output_listing[] = "set_output_listing";
static const char __pyx_k_COUPLING_SEQUENTIAL[] = "COUPLING_SEQUENTIAL";
static const char __pyx_k_coupled_application[] = "coupled_application";
static const char __pyx_k_has_double_parameter[] = "has_double_parameter";
static const char __pyx_k_has_string_parameter[] = "has_string_parameter";
static const char __pyx_k_n_not_located_points[] = "n_not_located_points";
static const char __pyx_k_output_format_option[] = "output_format_option";
static const char __pyx_k_receiving_field_name[] = "receiving_field_name";
static const char __pyx_k_EXCHANGE_BAD_RECEIVING[] = "EXCHANGE_BAD_RECEIVING";
static const char __pyx_k_get_list_int_parameter[] = "get_list_int_parameter";
static const char __pyx_k_face_connectivity_index[] = "face_connectivity_index";
static const char __pyx_k_cell_to_face_connectivity[] = "cell_to_face_connectivity";
static const char __pyx_k_get_list_double_parameter[] = "get_list_double_parameter";
static const char __pyx_k_get_list_string_parameter[] = "get_list_string_parameter";
static const char __pyx_k_dump_application_properties[] = "dump_application_properties";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_synchronize_control_parameter[] = "synchronize_control_parameter";
static const char __pyx_k_add_local_int_control_parameter[] = "add_local_int_control_parameter";
static const char __pyx_k_get_local_int_control_parameter[] = "get_local_int_control_parameter";
static const char __pyx_k_set_local_int_control_parameter[] = "set_local_int_control_parameter";
static const char __pyx_k_stck3_stck3_2_equemera_workspac[] = "/stck3/stck3.2/equemera/workspace/cwipi/cwipi/Cython/cwipi.pyx";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_COUPLING_PARALLEL_WITHOUT_PARTIT[] = "COUPLING_PARALLEL_WITHOUT_PARTITIONING";
static const char __pyx_k_COUPLING_PARALLEL_WITH_PARTITION[] = "COUPLING_PARALLEL_WITH_PARTITIONING";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_add_local_double_control_paramet[] = "add_local_double_control_parameter";
static const char __pyx_k_add_local_string_control_paramet[] = "add_local_string_control_parameter";
static const char __pyx_k_delete_local_double_control_para[] = "delete_local_double_control_parameter";
static const char __pyx_k_delete_local_int_control_paramet[] = "delete_local_int_control_parameter";
static const char __pyx_k_delete_local_string_control_para[] = "delete_local_string_control_parameter";
static const char __pyx_k_get_distant_double_control_param[] = "get_distant_double_control_parameter";
static const char __pyx_k_get_distant_int_control_paramete[] = "get_distant_int_control_parameter";
static const char __pyx_k_get_distant_string_control_param[] = "get_distant_string_control_parameter";
static const char __pyx_k_get_local_double_control_paramet[] = "get_local_double_control_parameter";
static const char __pyx_k_get_local_string_control_paramet[] = "get_local_string_control_parameter";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_set_local_double_control_paramet[] = "set_local_double_control_parameter";
static const char __pyx_k_set_local_string_control_paramet[] = "set_local_string_control_parameter";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_BASIC_INFO;
static PyObject *__pyx_n_s_COUPLING_PARALLEL_WITHOUT_PARTIT;
static PyObject *__pyx_n_s_COUPLING_PARALLEL_WITH_PARTITION;
static PyObject *__pyx_n_s_COUPLING_SEQUENTIAL;
static PyObject *__pyx_n_s_CYCLIC_MESH;
static PyObject *__pyx_n_s_Cython_cwipi;
static PyObject *__pyx_n_s_DISTANT_MESH_INFO;
static PyObject *__pyx_n_s_EXCHANGE_BAD_RECEIVING;
static PyObject *__pyx_n_s_EXCHANGE_OK;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_MOBILE_MESH;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SOLVER_CELL_CENTER;
static PyObject *__pyx_n_s_SOLVER_CELL_VERTEX;
static PyObject *__pyx_n_s_STATIC_MESH;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_add_local_double_control_paramet;
static PyObject *__pyx_n_s_add_local_int_control_parameter;
static PyObject *__pyx_n_s_add_local_string_control_paramet;
static PyObject *__pyx_n_s_application_comm;
static PyObject *__pyx_n_s_application_name;
static PyObject *__pyx_n_s_c_common_comm;
static PyObject *__pyx_n_s_c_file;
static PyObject *__pyx_n_s_c_parameters;
static PyObject *__pyx_n_s_cell_to_face_connectivity;
static PyObject *__pyx_n_s_common_comm;
static PyObject *__pyx_n_s_connectivity;
static PyObject *__pyx_n_s_connectivity_index;
static PyObject *__pyx_n_s_coordinates;
static PyObject *__pyx_n_s_coupled_application;
static PyObject *__pyx_n_s_coupling_name;
static PyObject *__pyx_n_s_coupling_type;
static PyObject *__pyx_n_s_current_cpl;
static PyObject *__pyx_n_s_d_parameters;
static PyObject *__pyx_n_s_delete_local_double_control_para;
static PyObject *__pyx_n_s_delete_local_int_control_paramet;
static PyObject *__pyx_n_s_delete_local_string_control_para;
static PyObject *__pyx_n_s_dump_application_properties;
static PyObject *__pyx_n_s_entitiesDim;
static PyObject *__pyx_n_s_exchange_name;
static PyObject *__pyx_n_s_face_connectivity;
static PyObject *__pyx_n_s_face_connectivity_index;
static PyObject *__pyx_n_s_face_index;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_finalize;
static PyObject *__pyx_n_s_get_distant_double_control_param;
static PyObject *__pyx_n_s_get_distant_int_control_paramete;
static PyObject *__pyx_n_s_get_distant_string_control_param;
static PyObject *__pyx_n_s_get_list_double_parameter;
static PyObject *__pyx_n_s_get_list_int_parameter;
static PyObject *__pyx_n_s_get_list_string_parameter;
static PyObject *__pyx_n_s_get_local_double_control_paramet;
static PyObject *__pyx_n_s_get_local_int_control_parameter;
static PyObject *__pyx_n_s_get_local_string_control_paramet;
static PyObject *__pyx_n_s_has_double_parameter;
static PyObject *__pyx_n_s_has_int_parameter;
static PyObject *__pyx_n_s_has_string_parameter;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_i_parameters;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_initial_value;
static PyObject *__pyx_n_s_interp_f;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mesh_type;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_n_element;
static PyObject *__pyx_n_s_n_face;
static PyObject *__pyx_n_s_n_not_located_points;
static PyObject *__pyx_n_s_n_parameters;
static PyObject *__pyx_n_s_n_points;
static PyObject *__pyx_n_s_n_vertex;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nb_locations;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_output_format;
static PyObject *__pyx_n_s_output_format_option;
static PyObject *__pyx_n_s_output_frequency;
static PyObject *__pyx_n_s_output_listing;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_receiving_field;
static PyObject *__pyx_n_s_receiving_field_name;
static PyObject *__pyx_n_s_request;
static PyObject *__pyx_n_s_s_parameters;
static PyObject *__pyx_n_s_sending_field;
static PyObject *__pyx_n_s_sending_field_name;
static PyObject *__pyx_n_s_set_local_double_control_paramet;
static PyObject *__pyx_n_s_set_local_int_control_parameter;
static PyObject *__pyx_n_s_set_local_string_control_paramet;
static PyObject *__pyx_n_s_set_output_listing;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_solver_type;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_kp_s_stck3_stck3_2_equemera_workspac;
static PyObject *__pyx_n_s_stride;
static PyObject *__pyx_n_s_synchronize_control_parameter;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time_step;
static PyObject *__pyx_n_s_time_value;
static PyObject *__pyx_n_s_tolerance;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_pf_6Cython_5cwipi_init(CYTHON_UNUSED PyObject *__pyx_self, struct PyMPICommObject *__pyx_v_common_comm, char *__pyx_v_application_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_2set_output_listing(CYTHON_UNUSED PyObject *__pyx_self, PyFileObject *__pyx_v_output_listing); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_4dump_application_properties(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_6finalize(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8add_local_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, int __pyx_v_initial_value); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_10add_local_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, double __pyx_v_initial_value); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_12add_local_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, char *__pyx_v_initial_value); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_14set_local_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_16set_local_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_18set_local_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_20get_local_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_22get_local_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_24get_local_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_26delete_local_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_28delete_local_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_30delete_local_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_32get_distant_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_34get_distant_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_36get_distant_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_38has_int_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_40has_double_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_42has_string_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_44get_list_int_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_46get_list_double_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_48get_list_string_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_50synchronize_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name); /* proto */
static int __pyx_pf_6Cython_5cwipi_8Coupling___init__(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_coupling_name, cwipi_coupling_type_t __pyx_v_coupling_type, char *__pyx_v_coupled_application, int __pyx_v_entitiesDim, double __pyx_v_tolerance, cwipi_mesh_type_t __pyx_v_mesh_type, cwipi_solver_type_t __pyx_v_solver_type, int __pyx_v_output_frequency, char *__pyx_v_output_format, char *__pyx_v_output_format_option, PyObject *__pyx_v_nb_locations); /* proto */
static void __pyx_pf_6Cython_5cwipi_8Coupling_2__dealloc__(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_4define_mesh(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_n_vertex, int __pyx_v_n_element, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_connectivity_index, PyArrayObject *__pyx_v_connectivity); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_6set_points_to_locate(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_n_points, PyArrayObject *__pyx_v_coordinates); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_8add_polyhedra(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_n_element, PyArrayObject *__pyx_v_face_index, PyArrayObject *__pyx_v_cell_to_face_connectivity, int __pyx_v_n_face, PyArrayObject *__pyx_v_face_connectivity_index, PyArrayObject *__pyx_v_face_connectivity); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_10locate(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_12set_location_index(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_14load_location(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_16save_location(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_18open_location_file(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_filename, char *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_20close_location_file(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_22update_location(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_24exchange(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_exchange_name, int __pyx_v_stride, int __pyx_v_time_step, double __pyx_v_time_value, char *__pyx_v_sending_field_name, PyArrayObject *__pyx_v_sending_field, char *__pyx_v_receiving_field_name, PyArrayObject *__pyx_v_receiving_field); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_26issend(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_exchange_name, int __pyx_v_tag, int __pyx_v_stride, int __pyx_v_time_step, double __pyx_v_time_value, char *__pyx_v_sending_field_name, PyArrayObject *__pyx_v_sending_field); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_28irecv(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_exchange_name, int __pyx_v_tag, int __pyx_v_stride, int __pyx_v_time_step, double __pyx_v_time_value, char *__pyx_v_receiving_field_name, PyArrayObject *__pyx_v_receiving_field); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_30wait_issend(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_request); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_32wait_irecv(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_request); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_34get_n_located_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_36get_n_not_located_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_38get_not_located_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_40get_located_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_42get_distant_location(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_44get_distant_distance(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_46get_distant_coordinates(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_48get_distant_barycentric_coordinates_index(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_50get_distant_barycentric_coordinates(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_52get_n_distant_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_54get_n_distant_ranks(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_56get_distant_distribution(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_58get_located_points_distribution(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_60set_interpolation_function(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, PyObject *__pyx_v_f); /* proto */
static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_62getName(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_6Cython_5cwipi_Coupling(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;

/* "Cython/cwipi.pyx":203
 * # ---------------
 * 
 * def  init(MPI.Comm common_comm, char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *      Initialize the cwipi library and create
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_1init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_init[] = "\n     Initialize the cwipi library and create \n     the current communicator application from 'common_comm'.\n\n     parameters:\n       common_comm       <-- Common MPI communicator\n       application_name  <-- Current application name\n       application_comm  --> Internal MPI communicator for the current\n                             application\n     It is a synchronization point between all applications\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_1init = {"init", (PyCFunction)__pyx_pw_6Cython_5cwipi_1init, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_init};
static PyObject *__pyx_pw_6Cython_5cwipi_1init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyMPICommObject *__pyx_v_common_comm = 0;
  char *__pyx_v_application_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_common_comm,&__pyx_n_s_application_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_common_comm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_application_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init", 1, 2, 2, 1); __PYX_ERR(0, 203, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init") < 0)) __PYX_ERR(0, 203, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_common_comm = ((struct PyMPICommObject *)values[0]);
    __pyx_v_application_name = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 203, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 203, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_common_comm), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "common_comm", 0))) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_r = __pyx_pf_6Cython_5cwipi_init(__pyx_self, __pyx_v_common_comm, __pyx_v_application_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_init(CYTHON_UNUSED PyObject *__pyx_self, struct PyMPICommObject *__pyx_v_common_comm, char *__pyx_v_application_name) {
  MPI_Comm __pyx_v_c_common_comm;
  struct PyMPICommObject *__pyx_v_application_comm = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  MPI_Comm __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("init", 0);

  /* "Cython/cwipi.pyx":215
 *      It is a synchronization point between all applications
 *     """
 *     cdef MPI_Comm c_common_comm = common_comm.ob_mpi             # <<<<<<<<<<<<<<
 * 
 *     cdef MPI.Comm application_comm = MPI.Comm()
 */
  __pyx_t_1 = __pyx_v_common_comm->ob_mpi;
  __pyx_v_c_common_comm = __pyx_t_1;

  /* "Cython/cwipi.pyx":217
 *     cdef MPI_Comm c_common_comm = common_comm.ob_mpi
 * 
 *     cdef MPI.Comm application_comm = MPI.Comm()             # <<<<<<<<<<<<<<
 * 
 *     cwipi_init(c_common_comm, application_name, &(application_comm.ob_mpi))
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6mpi4py_3MPI_Comm), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_application_comm = ((struct PyMPICommObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "Cython/cwipi.pyx":219
 *     cdef MPI.Comm application_comm = MPI.Comm()
 * 
 *     cwipi_init(c_common_comm, application_name, &(application_comm.ob_mpi))             # <<<<<<<<<<<<<<
 * 
 *     return  application_comm
 */
  cwipi_init(__pyx_v_c_common_comm, __pyx_v_application_name, (&__pyx_v_application_comm->ob_mpi));

  /* "Cython/cwipi.pyx":221
 *     cwipi_init(c_common_comm, application_name, &(application_comm.ob_mpi))
 * 
 *     return  application_comm             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_application_comm));
  __pyx_r = ((PyObject *)__pyx_v_application_comm);
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":203
 * # ---------------
 * 
 * def  init(MPI.Comm common_comm, char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *      Initialize the cwipi library and create
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_application_comm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":224
 * 
 * 
 * def set_output_listing(file output_listing):             # <<<<<<<<<<<<<<
 *     """
 *     Set up the file used for the output listing
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_3set_output_listing(PyObject *__pyx_self, PyObject *__pyx_v_output_listing); /*proto*/
static char __pyx_doc_6Cython_5cwipi_2set_output_listing[] = "\n    Set up the file used for the output listing\n\n    parameters:\n      output_listing      <-- Output listing file (C function)\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_3set_output_listing = {"set_output_listing", (PyCFunction)__pyx_pw_6Cython_5cwipi_3set_output_listing, METH_O, __pyx_doc_6Cython_5cwipi_2set_output_listing};
static PyObject *__pyx_pw_6Cython_5cwipi_3set_output_listing(PyObject *__pyx_self, PyObject *__pyx_v_output_listing) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_output_listing (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output_listing), __pyx_ptype_6Cython_5cwipi_file, 1, "output_listing", 0))) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_r = __pyx_pf_6Cython_5cwipi_2set_output_listing(__pyx_self, ((PyFileObject *)__pyx_v_output_listing));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_2set_output_listing(CYTHON_UNUSED PyObject *__pyx_self, PyFileObject *__pyx_v_output_listing) {
  FILE *__pyx_v_c_file;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_output_listing", 0);

  /* "Cython/cwipi.pyx":231
 *       output_listing      <-- Output listing file (C function)
 *     """
 *     cdef FILE* c_file = PyFile_AsFile(output_listing)             # <<<<<<<<<<<<<<
 *     cwipi_set_output_listing(c_file)
 * 
 */
  __pyx_v_c_file = PyFile_AsFile(((PyObject *)__pyx_v_output_listing));

  /* "Cython/cwipi.pyx":232
 *     """
 *     cdef FILE* c_file = PyFile_AsFile(output_listing)
 *     cwipi_set_output_listing(c_file)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_set_output_listing(__pyx_v_c_file);

  /* "Cython/cwipi.pyx":224
 * 
 * 
 * def set_output_listing(file output_listing):             # <<<<<<<<<<<<<<
 *     """
 *     Set up the file used for the output listing
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":235
 * 
 * 
 * def dump_application_properties():             # <<<<<<<<<<<<<<
 *     """
 *     Dump application properties
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_5dump_application_properties(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_4dump_application_properties[] = "\n    Dump application properties\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_5dump_application_properties = {"dump_application_properties", (PyCFunction)__pyx_pw_6Cython_5cwipi_5dump_application_properties, METH_NOARGS, __pyx_doc_6Cython_5cwipi_4dump_application_properties};
static PyObject *__pyx_pw_6Cython_5cwipi_5dump_application_properties(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump_application_properties (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_4dump_application_properties(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_4dump_application_properties(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump_application_properties", 0);

  /* "Cython/cwipi.pyx":239
 *     Dump application properties
 *     """
 *     cwipi_dump_application_properties()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_dump_application_properties();

  /* "Cython/cwipi.pyx":235
 * 
 * 
 * def dump_application_properties():             # <<<<<<<<<<<<<<
 *     """
 *     Dump application properties
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":242
 * 
 * 
 * def finalize():             # <<<<<<<<<<<<<<
 *     """
 *     Finalize
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_7finalize(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_6finalize[] = "\n    Finalize\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_7finalize = {"finalize", (PyCFunction)__pyx_pw_6Cython_5cwipi_7finalize, METH_NOARGS, __pyx_doc_6Cython_5cwipi_6finalize};
static PyObject *__pyx_pw_6Cython_5cwipi_7finalize(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_6finalize(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_6finalize(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize", 0);

  /* "Cython/cwipi.pyx":246
 *     Finalize
 *     """
 *     cwipi_finalize()             # <<<<<<<<<<<<<<
 * 
 * #
 */
  cwipi_finalize();

  /* "Cython/cwipi.pyx":242
 * 
 * 
 * def finalize():             # <<<<<<<<<<<<<<
 *     """
 *     Finalize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":252
 * # ------------------
 * 
 * def add_local_int_control_parameter(char* name, int initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a integer control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_9add_local_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8add_local_int_control_parameter[] = "\n    Add a integer control parameter\n\n    parameters\n      name           <-- parameter name\n      initial_value  <-- initial value\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_9add_local_int_control_parameter = {"add_local_int_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_9add_local_int_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_8add_local_int_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_9add_local_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  int __pyx_v_initial_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_local_int_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_initial_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_initial_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_local_int_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_local_int_control_parameter") < 0)) __PYX_ERR(0, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L3_error)
    __pyx_v_initial_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_initial_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_local_int_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.add_local_int_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_8add_local_int_control_parameter(__pyx_self, __pyx_v_name, __pyx_v_initial_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8add_local_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, int __pyx_v_initial_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_local_int_control_parameter", 0);

  /* "Cython/cwipi.pyx":260
 *       initial_value  <-- initial value
 *     """
 *     cwipi_add_local_int_control_parameter(name, initial_value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_add_local_int_control_parameter(__pyx_v_name, __pyx_v_initial_value);

  /* "Cython/cwipi.pyx":252
 * # ------------------
 * 
 * def add_local_int_control_parameter(char* name, int initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a integer control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":263
 * 
 * 
 * def add_local_double_control_parameter(char* name, double initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a double control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_11add_local_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_10add_local_double_control_parameter[] = "\n    Add a double control parameter\n\n    parameters\n      name           <-- parameter name\n      initial_value  <-- initial value\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_11add_local_double_control_parameter = {"add_local_double_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_11add_local_double_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_10add_local_double_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_11add_local_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  double __pyx_v_initial_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_local_double_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_initial_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_initial_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_local_double_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 263, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_local_double_control_parameter") < 0)) __PYX_ERR(0, 263, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
    __pyx_v_initial_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_initial_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_local_double_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.add_local_double_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_10add_local_double_control_parameter(__pyx_self, __pyx_v_name, __pyx_v_initial_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_10add_local_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, double __pyx_v_initial_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_local_double_control_parameter", 0);

  /* "Cython/cwipi.pyx":271
 *       initial_value  <-- initial value
 *     """
 *     cwipi_add_local_double_control_parameter(name, initial_value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_add_local_double_control_parameter(__pyx_v_name, __pyx_v_initial_value);

  /* "Cython/cwipi.pyx":263
 * 
 * 
 * def add_local_double_control_parameter(char* name, double initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a double control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":274
 * 
 * 
 * def add_local_string_control_parameter(char* name, char* initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a string control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_13add_local_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_12add_local_string_control_parameter[] = "\n    Add a string control parameter\n\n    parameters\n      name           <-- parameter name\n      initial_value  <-- initial value\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_13add_local_string_control_parameter = {"add_local_string_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_13add_local_string_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_12add_local_string_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_13add_local_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  char *__pyx_v_initial_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_local_string_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_initial_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_initial_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_local_string_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 274, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_local_string_control_parameter") < 0)) __PYX_ERR(0, 274, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L3_error)
    __pyx_v_initial_value = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_initial_value) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_local_string_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 274, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.add_local_string_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_12add_local_string_control_parameter(__pyx_self, __pyx_v_name, __pyx_v_initial_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_12add_local_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, char *__pyx_v_initial_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_local_string_control_parameter", 0);

  /* "Cython/cwipi.pyx":282
 *       initial_value  <-- initial value
 *     """
 *     cwipi_add_local_string_control_parameter(name, initial_value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_add_local_string_control_parameter(__pyx_v_name, __pyx_v_initial_value);

  /* "Cython/cwipi.pyx":274
 * 
 * 
 * def add_local_string_control_parameter(char* name, char* initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a string control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":285
 * 
 * 
 * def set_local_int_control_parameter(char* name, int value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a integer control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_15set_local_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_14set_local_int_control_parameter[] = "\n    Set a integer control parameter\n\n    parameters\n      name   <-- parameter name\n      value  <-- value\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_15set_local_int_control_parameter = {"set_local_int_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_15set_local_int_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_14set_local_int_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_15set_local_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  int __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_local_int_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_local_int_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 285, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_local_int_control_parameter") < 0)) __PYX_ERR(0, 285, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_local_int_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 285, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.set_local_int_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_14set_local_int_control_parameter(__pyx_self, __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_14set_local_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_local_int_control_parameter", 0);

  /* "Cython/cwipi.pyx":293
 *       value  <-- value
 *     """
 *     cwipi_set_local_int_control_parameter(name, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_set_local_int_control_parameter(__pyx_v_name, __pyx_v_value);

  /* "Cython/cwipi.pyx":285
 * 
 * 
 * def set_local_int_control_parameter(char* name, int value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a integer control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":296
 * 
 * 
 * def set_local_double_control_parameter(char* name, double value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a double control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_17set_local_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_16set_local_double_control_parameter[] = "\n    Set a double control parameter\n\n    parameters\n      name   <-- parameter name\n      value  <-- value\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_17set_local_double_control_parameter = {"set_local_double_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_17set_local_double_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_16set_local_double_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_17set_local_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  double __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_local_double_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_local_double_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 296, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_local_double_control_parameter") < 0)) __PYX_ERR(0, 296, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_local_double_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 296, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.set_local_double_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_16set_local_double_control_parameter(__pyx_self, __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_16set_local_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_local_double_control_parameter", 0);

  /* "Cython/cwipi.pyx":304
 *       value  <-- value
 *     """
 *     cwipi_set_local_double_control_parameter(name, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_set_local_double_control_parameter(__pyx_v_name, __pyx_v_value);

  /* "Cython/cwipi.pyx":296
 * 
 * 
 * def set_local_double_control_parameter(char* name, double value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a double control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":307
 * 
 * 
 * def set_local_string_control_parameter(char* name, char* value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a string control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_19set_local_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_18set_local_string_control_parameter[] = "\n    Set a string control parameter\n\n    parameters\n      name     <-- parameter name\n      value    <-- value\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_19set_local_string_control_parameter = {"set_local_string_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_19set_local_string_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_18set_local_string_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_19set_local_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  char *__pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_local_string_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_local_string_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 307, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_local_string_control_parameter") < 0)) __PYX_ERR(0, 307, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_local_string_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.set_local_string_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_18set_local_string_control_parameter(__pyx_self, __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_18set_local_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name, char *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_local_string_control_parameter", 0);

  /* "Cython/cwipi.pyx":315
 *       value    <-- value
 *     """
 *     cwipi_set_local_string_control_parameter(name, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_set_local_string_control_parameter(__pyx_v_name, __pyx_v_value);

  /* "Cython/cwipi.pyx":307
 * 
 * 
 * def set_local_string_control_parameter(char* name, char* value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a string control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":318
 * 
 * 
 * def get_local_int_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local integer control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_21get_local_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_20get_local_int_control_parameter[] = "\n    Get a local integer control parameter\n\n    parameters\n      name           <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_21get_local_int_control_parameter = {"get_local_int_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_21get_local_int_control_parameter, METH_O, __pyx_doc_6Cython_5cwipi_20get_local_int_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_21get_local_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_local_int_control_parameter (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_local_int_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_20get_local_int_control_parameter(__pyx_self, ((char *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_20get_local_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_local_int_control_parameter", 0);

  /* "Cython/cwipi.pyx":325
 *       name           <-- parameter name
 *     """
 *     return cwipi_get_local_int_control_parameter(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(cwipi_get_local_int_control_parameter(__pyx_v_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":318
 * 
 * 
 * def get_local_int_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local integer control parameter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.get_local_int_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":328
 * 
 * 
 * def get_local_double_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local double control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_23get_local_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_22get_local_double_control_parameter[] = "\n    Get a local double control parameter\n\n    parameters\n      name           <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_23get_local_double_control_parameter = {"get_local_double_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_23get_local_double_control_parameter, METH_O, __pyx_doc_6Cython_5cwipi_22get_local_double_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_23get_local_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_local_double_control_parameter (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_local_double_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_22get_local_double_control_parameter(__pyx_self, ((char *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_22get_local_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_local_double_control_parameter", 0);

  /* "Cython/cwipi.pyx":335
 *       name           <-- parameter name
 *     """
 *     return cwipi_get_local_double_control_parameter(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(cwipi_get_local_double_control_parameter(__pyx_v_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":328
 * 
 * 
 * def get_local_double_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local double control parameter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.get_local_double_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":338
 * 
 * 
 * def get_local_string_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local string control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_25get_local_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_24get_local_string_control_parameter[] = "\n    Get a local string control parameter\n\n    parameters\n      name           <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_25get_local_string_control_parameter = {"get_local_string_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_25get_local_string_control_parameter, METH_O, __pyx_doc_6Cython_5cwipi_24get_local_string_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_25get_local_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_local_string_control_parameter (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_local_string_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_24get_local_string_control_parameter(__pyx_self, ((char *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_24get_local_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_local_string_control_parameter", 0);

  /* "Cython/cwipi.pyx":345
 *       name           <-- parameter name
 *     """
 *     return cwipi_get_local_string_control_parameter(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(cwipi_get_local_string_control_parameter(__pyx_v_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":338
 * 
 * 
 * def get_local_string_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local string control parameter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.get_local_string_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":348
 * 
 * 
 * def delete_local_int_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local integer control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_27delete_local_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_26delete_local_int_control_parameter[] = "\n    Delete a local integer control parameter\n\n    parameters\n      name           <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_27delete_local_int_control_parameter = {"delete_local_int_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_27delete_local_int_control_parameter, METH_O, __pyx_doc_6Cython_5cwipi_26delete_local_int_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_27delete_local_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_local_int_control_parameter (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.delete_local_int_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_26delete_local_int_control_parameter(__pyx_self, ((char *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_26delete_local_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_local_int_control_parameter", 0);

  /* "Cython/cwipi.pyx":355
 *       name           <-- parameter name
 *     """
 *     cwipi_delete_local_int_control_parameter(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_delete_local_int_control_parameter(__pyx_v_name);

  /* "Cython/cwipi.pyx":348
 * 
 * 
 * def delete_local_int_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local integer control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":358
 * 
 * 
 * def delete_local_double_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local double control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_29delete_local_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_28delete_local_double_control_parameter[] = "\n    Delete a local double control parameter\n\n    parameters\n      name           <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_29delete_local_double_control_parameter = {"delete_local_double_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_29delete_local_double_control_parameter, METH_O, __pyx_doc_6Cython_5cwipi_28delete_local_double_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_29delete_local_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_local_double_control_parameter (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.delete_local_double_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_28delete_local_double_control_parameter(__pyx_self, ((char *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_28delete_local_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_local_double_control_parameter", 0);

  /* "Cython/cwipi.pyx":365
 *       name           <-- parameter name
 *     """
 *     cwipi_delete_local_double_control_parameter(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_delete_local_double_control_parameter(__pyx_v_name);

  /* "Cython/cwipi.pyx":358
 * 
 * 
 * def delete_local_double_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local double control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":368
 * 
 * 
 * def delete_local_string_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local string control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_31delete_local_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_30delete_local_string_control_parameter[] = "\n    Delete a local string control parameter\n\n    parameters\n      name           <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_31delete_local_string_control_parameter = {"delete_local_string_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_31delete_local_string_control_parameter, METH_O, __pyx_doc_6Cython_5cwipi_30delete_local_string_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_31delete_local_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_local_string_control_parameter (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 368, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.delete_local_string_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_30delete_local_string_control_parameter(__pyx_self, ((char *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_30delete_local_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_local_string_control_parameter", 0);

  /* "Cython/cwipi.pyx":375
 *       name           <-- parameter name
 *     """
 *     cwipi_delete_local_string_control_parameter(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  cwipi_delete_local_string_control_parameter(__pyx_v_name);

  /* "Cython/cwipi.pyx":368
 * 
 * 
 * def delete_local_string_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local string control parameter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":378
 * 
 * 
 * def get_distant_int_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant integer control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_33get_distant_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_32get_distant_int_control_parameter[] = "\n    Get a distant integer control parameter\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_33get_distant_int_control_parameter = {"get_distant_int_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_33get_distant_int_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_32get_distant_int_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_33get_distant_int_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_application_name;
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_int_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_application_name,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_application_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_distant_int_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 378, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_distant_int_control_parameter") < 0)) __PYX_ERR(0, 378, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_application_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 378, __pyx_L3_error)
    __pyx_v_name = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 378, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_distant_int_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 378, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_distant_int_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_32get_distant_int_control_parameter(__pyx_self, __pyx_v_application_name, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_32get_distant_int_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_distant_int_control_parameter", 0);

  /* "Cython/cwipi.pyx":386
 *       name             <-- parameter name
 *     """
 *     return cwipi_get_distant_int_control_parameter(application_name, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(cwipi_get_distant_int_control_parameter(__pyx_v_application_name, __pyx_v_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":378
 * 
 * 
 * def get_distant_int_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant integer control parameter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.get_distant_int_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":389
 * 
 * 
 * def get_distant_double_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant double control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_35get_distant_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_34get_distant_double_control_parameter[] = "\n    Get a distant double control parameter\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_35get_distant_double_control_parameter = {"get_distant_double_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_35get_distant_double_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_34get_distant_double_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_35get_distant_double_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_application_name;
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_double_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_application_name,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_application_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_distant_double_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 389, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_distant_double_control_parameter") < 0)) __PYX_ERR(0, 389, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_application_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 389, __pyx_L3_error)
    __pyx_v_name = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 389, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_distant_double_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 389, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_distant_double_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_34get_distant_double_control_parameter(__pyx_self, __pyx_v_application_name, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_34get_distant_double_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_distant_double_control_parameter", 0);

  /* "Cython/cwipi.pyx":397
 *       name             <-- parameter name
 *     """
 *     return cwipi_get_distant_double_control_parameter(application_name, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(cwipi_get_distant_double_control_parameter(__pyx_v_application_name, __pyx_v_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":389
 * 
 * 
 * def get_distant_double_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant double control parameter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.get_distant_double_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":400
 * 
 * 
 * def get_distant_string_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant string control parameter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_37get_distant_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_36get_distant_string_control_parameter[] = "\n    Get a distant string control parameter\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_37get_distant_string_control_parameter = {"get_distant_string_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_37get_distant_string_control_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_36get_distant_string_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_37get_distant_string_control_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_application_name;
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_string_control_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_application_name,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_application_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_distant_string_control_parameter", 1, 2, 2, 1); __PYX_ERR(0, 400, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_distant_string_control_parameter") < 0)) __PYX_ERR(0, 400, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_application_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 400, __pyx_L3_error)
    __pyx_v_name = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 400, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_distant_string_control_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 400, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_distant_string_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_36get_distant_string_control_parameter(__pyx_self, __pyx_v_application_name, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_36get_distant_string_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_distant_string_control_parameter", 0);

  /* "Cython/cwipi.pyx":408
 *       name             <-- parameter name
 *     """
 *     return cwipi_get_distant_string_control_parameter(application_name, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(cwipi_get_distant_string_control_parameter(__pyx_v_application_name, __pyx_v_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":400
 * 
 * 
 * def get_distant_string_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant string control parameter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.get_distant_string_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":411
 * 
 * 
 * def has_int_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this int parameter ?
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_39has_int_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_38has_int_parameter[] = "\n    Has this int parameter ?\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    return\n      boolean\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_39has_int_parameter = {"has_int_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_39has_int_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_38has_int_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_39has_int_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_application_name;
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_int_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_application_name,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_application_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("has_int_parameter", 1, 2, 2, 1); __PYX_ERR(0, 411, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "has_int_parameter") < 0)) __PYX_ERR(0, 411, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_application_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L3_error)
    __pyx_v_name = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_int_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 411, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.has_int_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_38has_int_parameter(__pyx_self, __pyx_v_application_name, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_38has_int_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("has_int_parameter", 0);

  /* "Cython/cwipi.pyx":421
 *       boolean
 *     """
 *     return (cwipi_has_int_parameter(application_name, name) == 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((cwipi_has_int_parameter(__pyx_v_application_name, __pyx_v_name) == 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":411
 * 
 * 
 * def has_int_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this int parameter ?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.has_int_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":424
 * 
 * 
 * def has_double_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this double parameter ?
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_41has_double_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_40has_double_parameter[] = "\n    Has this double parameter ?\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    return\n      boolean\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_41has_double_parameter = {"has_double_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_41has_double_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_40has_double_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_41has_double_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_application_name;
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_double_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_application_name,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_application_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("has_double_parameter", 1, 2, 2, 1); __PYX_ERR(0, 424, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "has_double_parameter") < 0)) __PYX_ERR(0, 424, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_application_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L3_error)
    __pyx_v_name = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_double_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 424, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.has_double_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_40has_double_parameter(__pyx_self, __pyx_v_application_name, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_40has_double_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("has_double_parameter", 0);

  /* "Cython/cwipi.pyx":434
 *       boolean
 *     """
 *     return (cwipi_has_double_parameter(application_name, name) == 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((cwipi_has_double_parameter(__pyx_v_application_name, __pyx_v_name) == 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":424
 * 
 * 
 * def has_double_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this double parameter ?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.has_double_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":437
 * 
 * 
 * def has_string_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this double parameter ?
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_43has_string_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_42has_string_parameter[] = "\n    Has this double parameter ?\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    return\n      boolean\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_43has_string_parameter = {"has_string_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_43has_string_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_42has_string_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_43has_string_parameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_application_name;
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_string_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_application_name,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_application_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("has_string_parameter", 1, 2, 2, 1); __PYX_ERR(0, 437, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "has_string_parameter") < 0)) __PYX_ERR(0, 437, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_application_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
    __pyx_v_name = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_string_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 437, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.has_string_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_42has_string_parameter(__pyx_self, __pyx_v_application_name, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_42has_string_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("has_string_parameter", 0);

  /* "Cython/cwipi.pyx":447
 *       boolean
 *     """
 *     return (cwipi_has_string_parameter(application_name, name) == 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((cwipi_has_string_parameter(__pyx_v_application_name, __pyx_v_name) == 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":437
 * 
 * 
 * def has_string_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this double parameter ?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.has_string_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":450
 * 
 * 
 * def get_list_int_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return int parameters names
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_45get_list_int_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_application_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_44get_list_int_parameter[] = "\n    return int parameters names\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    return\n      list\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_45get_list_int_parameter = {"get_list_int_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_45get_list_int_parameter, METH_O, __pyx_doc_6Cython_5cwipi_44get_list_int_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_45get_list_int_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_application_name) {
  char *__pyx_v_application_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_list_int_parameter (wrapper)", 0);
  assert(__pyx_arg_application_name); {
    __pyx_v_application_name = __Pyx_PyObject_AsString(__pyx_arg_application_name); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 450, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_list_int_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_44get_list_int_parameter(__pyx_self, ((char *)__pyx_v_application_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_44get_list_int_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name) {
  PyObject *__pyx_v_i_parameters = NULL;
  int __pyx_v_n_parameters;
  char **__pyx_v_c_parameters;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_list_int_parameter", 0);

  /* "Cython/cwipi.pyx":460
 *       list
 *     """
 *     i_parameters = []             # <<<<<<<<<<<<<<
 *     cdef int n_parameters = cwipi_get_n_int_parameters(application_name)
 *     cdef char** c_parameters = cwipi_get_list_int_parameters(application_name)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i_parameters = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":461
 *     """
 *     i_parameters = []
 *     cdef int n_parameters = cwipi_get_n_int_parameters(application_name)             # <<<<<<<<<<<<<<
 *     cdef char** c_parameters = cwipi_get_list_int_parameters(application_name)
 * 
 */
  __pyx_v_n_parameters = cwipi_get_n_int_parameters(__pyx_v_application_name);

  /* "Cython/cwipi.pyx":462
 *     i_parameters = []
 *     cdef int n_parameters = cwipi_get_n_int_parameters(application_name)
 *     cdef char** c_parameters = cwipi_get_list_int_parameters(application_name)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_parameters) :
 */
  __pyx_v_c_parameters = cwipi_get_list_int_parameters(__pyx_v_application_name);

  /* "Cython/cwipi.pyx":464
 *     cdef char** c_parameters = cwipi_get_list_int_parameters(application_name)
 * 
 *     for i in range(n_parameters) :             # <<<<<<<<<<<<<<
 *         i_parameters.append(str(c_parameters[i]))
 *         free(c_parameters[i])
 */
  __pyx_t_2 = __pyx_v_n_parameters;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "Cython/cwipi.pyx":465
 * 
 *     for i in range(n_parameters) :
 *         i_parameters.append(str(c_parameters[i]))             # <<<<<<<<<<<<<<
 *         free(c_parameters[i])
 * 
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString((__pyx_v_c_parameters[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_i_parameters, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Cython/cwipi.pyx":466
 *     for i in range(n_parameters) :
 *         i_parameters.append(str(c_parameters[i]))
 *         free(c_parameters[i])             # <<<<<<<<<<<<<<
 * 
 *     free(c_parameters)
 */
    free((__pyx_v_c_parameters[__pyx_v_i]));
  }

  /* "Cython/cwipi.pyx":468
 *         free(c_parameters[i])
 * 
 *     free(c_parameters)             # <<<<<<<<<<<<<<
 * 
 *     return i_parameters
 */
  free(__pyx_v_c_parameters);

  /* "Cython/cwipi.pyx":470
 *     free(c_parameters)
 * 
 *     return i_parameters             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_i_parameters);
  __pyx_r = __pyx_v_i_parameters;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":450
 * 
 * 
 * def get_list_int_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return int parameters names
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Cython.cwipi.get_list_int_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i_parameters);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":473
 * 
 * 
 * def get_list_double_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return double parameters names
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_47get_list_double_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_application_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_46get_list_double_parameter[] = "\n    return double parameters names\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    return\n      list\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_47get_list_double_parameter = {"get_list_double_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_47get_list_double_parameter, METH_O, __pyx_doc_6Cython_5cwipi_46get_list_double_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_47get_list_double_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_application_name) {
  char *__pyx_v_application_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_list_double_parameter (wrapper)", 0);
  assert(__pyx_arg_application_name); {
    __pyx_v_application_name = __Pyx_PyObject_AsString(__pyx_arg_application_name); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_list_double_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_46get_list_double_parameter(__pyx_self, ((char *)__pyx_v_application_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_46get_list_double_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name) {
  PyObject *__pyx_v_d_parameters = NULL;
  int __pyx_v_n_parameters;
  char **__pyx_v_c_parameters;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_list_double_parameter", 0);

  /* "Cython/cwipi.pyx":483
 *       list
 *     """
 *     d_parameters = []             # <<<<<<<<<<<<<<
 *     cdef int n_parameters = cwipi_get_n_double_parameters(application_name)
 *     cdef char** c_parameters = cwipi_get_list_double_parameters(application_name)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_d_parameters = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":484
 *     """
 *     d_parameters = []
 *     cdef int n_parameters = cwipi_get_n_double_parameters(application_name)             # <<<<<<<<<<<<<<
 *     cdef char** c_parameters = cwipi_get_list_double_parameters(application_name)
 * 
 */
  __pyx_v_n_parameters = cwipi_get_n_double_parameters(__pyx_v_application_name);

  /* "Cython/cwipi.pyx":485
 *     d_parameters = []
 *     cdef int n_parameters = cwipi_get_n_double_parameters(application_name)
 *     cdef char** c_parameters = cwipi_get_list_double_parameters(application_name)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_parameters) :
 */
  __pyx_v_c_parameters = cwipi_get_list_double_parameters(__pyx_v_application_name);

  /* "Cython/cwipi.pyx":487
 *     cdef char** c_parameters = cwipi_get_list_double_parameters(application_name)
 * 
 *     for i in range(n_parameters) :             # <<<<<<<<<<<<<<
 *         d_parameters.append(str(c_parameters[i]))
 *         free(c_parameters[i])
 */
  __pyx_t_2 = __pyx_v_n_parameters;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "Cython/cwipi.pyx":488
 * 
 *     for i in range(n_parameters) :
 *         d_parameters.append(str(c_parameters[i]))             # <<<<<<<<<<<<<<
 *         free(c_parameters[i])
 * 
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString((__pyx_v_c_parameters[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_d_parameters, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Cython/cwipi.pyx":489
 *     for i in range(n_parameters) :
 *         d_parameters.append(str(c_parameters[i]))
 *         free(c_parameters[i])             # <<<<<<<<<<<<<<
 * 
 *     free(c_parameters)
 */
    free((__pyx_v_c_parameters[__pyx_v_i]));
  }

  /* "Cython/cwipi.pyx":491
 *         free(c_parameters[i])
 * 
 *     free(c_parameters)             # <<<<<<<<<<<<<<
 *     return d_parameters
 * 
 */
  free(__pyx_v_c_parameters);

  /* "Cython/cwipi.pyx":492
 * 
 *     free(c_parameters)
 *     return d_parameters             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_d_parameters);
  __pyx_r = __pyx_v_d_parameters;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":473
 * 
 * 
 * def get_list_double_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return double parameters names
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Cython.cwipi.get_list_double_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d_parameters);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":495
 * 
 * 
 * def get_list_string_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return string parameters names
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_49get_list_string_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_application_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_48get_list_string_parameter[] = "\n    return string parameters names\n\n    parameters\n      application_name <-- distant application name\n      name             <-- parameter name\n    return\n      list\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_49get_list_string_parameter = {"get_list_string_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_49get_list_string_parameter, METH_O, __pyx_doc_6Cython_5cwipi_48get_list_string_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_49get_list_string_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_application_name) {
  char *__pyx_v_application_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_list_string_parameter (wrapper)", 0);
  assert(__pyx_arg_application_name); {
    __pyx_v_application_name = __Pyx_PyObject_AsString(__pyx_arg_application_name); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.get_list_string_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_48get_list_string_parameter(__pyx_self, ((char *)__pyx_v_application_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_48get_list_string_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name) {
  PyObject *__pyx_v_s_parameters = NULL;
  int __pyx_v_n_parameters;
  char **__pyx_v_c_parameters;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_list_string_parameter", 0);

  /* "Cython/cwipi.pyx":505
 *       list
 *     """
 *     s_parameters = []             # <<<<<<<<<<<<<<
 *     cdef int n_parameters = cwipi_get_n_string_parameters(application_name)
 *     cdef char** c_parameters = cwipi_get_list_string_parameters(application_name)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s_parameters = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":506
 *     """
 *     s_parameters = []
 *     cdef int n_parameters = cwipi_get_n_string_parameters(application_name)             # <<<<<<<<<<<<<<
 *     cdef char** c_parameters = cwipi_get_list_string_parameters(application_name)
 * 
 */
  __pyx_v_n_parameters = cwipi_get_n_string_parameters(__pyx_v_application_name);

  /* "Cython/cwipi.pyx":507
 *     s_parameters = []
 *     cdef int n_parameters = cwipi_get_n_string_parameters(application_name)
 *     cdef char** c_parameters = cwipi_get_list_string_parameters(application_name)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_parameters) :
 */
  __pyx_v_c_parameters = cwipi_get_list_string_parameters(__pyx_v_application_name);

  /* "Cython/cwipi.pyx":509
 *     cdef char** c_parameters = cwipi_get_list_string_parameters(application_name)
 * 
 *     for i in range(n_parameters) :             # <<<<<<<<<<<<<<
 *         s_parameters.append(str(c_parameters[i]))
 *         free(c_parameters[i])
 */
  __pyx_t_2 = __pyx_v_n_parameters;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "Cython/cwipi.pyx":510
 * 
 *     for i in range(n_parameters) :
 *         s_parameters.append(str(c_parameters[i]))             # <<<<<<<<<<<<<<
 *         free(c_parameters[i])
 * 
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString((__pyx_v_c_parameters[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_s_parameters, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Cython/cwipi.pyx":511
 *     for i in range(n_parameters) :
 *         s_parameters.append(str(c_parameters[i]))
 *         free(c_parameters[i])             # <<<<<<<<<<<<<<
 * 
 *     free(c_parameters)
 */
    free((__pyx_v_c_parameters[__pyx_v_i]));
  }

  /* "Cython/cwipi.pyx":513
 *         free(c_parameters[i])
 * 
 *     free(c_parameters)             # <<<<<<<<<<<<<<
 * 
 *     return s_parameters
 */
  free(__pyx_v_c_parameters);

  /* "Cython/cwipi.pyx":515
 *     free(c_parameters)
 * 
 *     return s_parameters             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s_parameters);
  __pyx_r = __pyx_v_s_parameters;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":495
 * 
 * 
 * def get_list_string_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return string parameters names
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Cython.cwipi.get_list_string_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s_parameters);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":518
 * 
 * 
 * def synchronize_control_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     Synchronize local control parameters with an other application.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_51synchronize_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_application_name); /*proto*/
static char __pyx_doc_6Cython_5cwipi_50synchronize_control_parameter[] = "\n    Synchronize local control parameters with an other application.\n    It is a synchronization point with this second application\n\n    parameters\n      application_name    <-- application name\n    ";
static PyMethodDef __pyx_mdef_6Cython_5cwipi_51synchronize_control_parameter = {"synchronize_control_parameter", (PyCFunction)__pyx_pw_6Cython_5cwipi_51synchronize_control_parameter, METH_O, __pyx_doc_6Cython_5cwipi_50synchronize_control_parameter};
static PyObject *__pyx_pw_6Cython_5cwipi_51synchronize_control_parameter(PyObject *__pyx_self, PyObject *__pyx_arg_application_name) {
  char *__pyx_v_application_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("synchronize_control_parameter (wrapper)", 0);
  assert(__pyx_arg_application_name); {
    __pyx_v_application_name = __Pyx_PyObject_AsString(__pyx_arg_application_name); if (unlikely((!__pyx_v_application_name) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.synchronize_control_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_50synchronize_control_parameter(__pyx_self, ((char *)__pyx_v_application_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_50synchronize_control_parameter(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_application_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("synchronize_control_parameter", 0);

  /* "Cython/cwipi.pyx":526
 *       application_name    <-- application name
 *     """
 *     cwipi_synchronize_control_parameter(application_name)             # <<<<<<<<<<<<<<
 * 
 * #
 */
  cwipi_synchronize_control_parameter(__pyx_v_application_name);

  /* "Cython/cwipi.pyx":518
 * 
 * 
 * def synchronize_control_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     Synchronize local control parameters with an other application.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":539
 *     cdef char* name
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  char* coupling_name,
 *                  cwipi_coupling_type_t coupling_type,
 */

/* Python wrapper */
static int __pyx_pw_6Cython_5cwipi_8Coupling_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling___init__[] = "\n        Init\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6Cython_5cwipi_8Coupling___init__;
#endif
static int __pyx_pw_6Cython_5cwipi_8Coupling_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_coupling_name;
  cwipi_coupling_type_t __pyx_v_coupling_type;
  char *__pyx_v_coupled_application;
  int __pyx_v_entitiesDim;
  double __pyx_v_tolerance;
  cwipi_mesh_type_t __pyx_v_mesh_type;
  cwipi_solver_type_t __pyx_v_solver_type;
  int __pyx_v_output_frequency;
  char *__pyx_v_output_format;
  char *__pyx_v_output_format_option;
  PyObject *__pyx_v_nb_locations = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coupling_name,&__pyx_n_s_coupling_type,&__pyx_n_s_coupled_application,&__pyx_n_s_entitiesDim,&__pyx_n_s_tolerance,&__pyx_n_s_mesh_type,&__pyx_n_s_solver_type,&__pyx_n_s_output_frequency,&__pyx_n_s_output_format,&__pyx_n_s_output_format_option,&__pyx_n_s_nb_locations,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};

    /* "Cython/cwipi.pyx":550
 *                  char *output_format,
 *                  char *output_format_option,
 *                  nb_locations = None):             # <<<<<<<<<<<<<<
 *         """
 *         Init
 */
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coupling_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coupling_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 1); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coupled_application)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 2); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_entitiesDim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 3); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tolerance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 4); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 5); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_solver_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 6); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_frequency)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 7); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 8); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_format_option)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, 9); __PYX_ERR(0, 539, __pyx_L3_error)
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nb_locations);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 539, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coupling_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_coupling_name) && PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L3_error)
    __pyx_v_coupling_type = ((cwipi_coupling_type_t)__Pyx_PyInt_As_cwipi_coupling_type_t(values[1])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L3_error)
    __pyx_v_coupled_application = __Pyx_PyObject_AsString(values[2]); if (unlikely((!__pyx_v_coupled_application) && PyErr_Occurred())) __PYX_ERR(0, 542, __pyx_L3_error)
    __pyx_v_entitiesDim = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_entitiesDim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L3_error)
    __pyx_v_tolerance = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_tolerance == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
    __pyx_v_mesh_type = ((cwipi_mesh_type_t)__Pyx_PyInt_As_cwipi_mesh_type_t(values[5])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 545, __pyx_L3_error)
    __pyx_v_solver_type = ((cwipi_solver_type_t)__Pyx_PyInt_As_cwipi_solver_type_t(values[6])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L3_error)
    __pyx_v_output_frequency = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_output_frequency == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 547, __pyx_L3_error)
    __pyx_v_output_format = __Pyx_PyObject_AsString(values[8]); if (unlikely((!__pyx_v_output_format) && PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L3_error)
    __pyx_v_output_format_option = __Pyx_PyObject_AsString(values[9]); if (unlikely((!__pyx_v_output_format_option) && PyErr_Occurred())) __PYX_ERR(0, 549, __pyx_L3_error)
    __pyx_v_nb_locations = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 10, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 539, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling___init__(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), __pyx_v_coupling_name, __pyx_v_coupling_type, __pyx_v_coupled_application, __pyx_v_entitiesDim, __pyx_v_tolerance, __pyx_v_mesh_type, __pyx_v_solver_type, __pyx_v_output_frequency, __pyx_v_output_format, __pyx_v_output_format_option, __pyx_v_nb_locations);

  /* "Cython/cwipi.pyx":539
 *     cdef char* name
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  char* coupling_name,
 *                  cwipi_coupling_type_t coupling_type,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6Cython_5cwipi_8Coupling___init__(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_coupling_name, cwipi_coupling_type_t __pyx_v_coupling_type, char *__pyx_v_coupled_application, int __pyx_v_entitiesDim, double __pyx_v_tolerance, cwipi_mesh_type_t __pyx_v_mesh_type, cwipi_solver_type_t __pyx_v_solver_type, int __pyx_v_output_frequency, char *__pyx_v_output_format, char *__pyx_v_output_format_option, PyObject *__pyx_v_nb_locations) {
  int __pyx_v__nb_locations;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Cython/cwipi.pyx":555
 *         """
 *         global current_cpl
 *         self.name = coupling_name             # <<<<<<<<<<<<<<
 *         current_cpl = self.name
 *         cdef int _nb_locations
 */
  __pyx_v_self->name = __pyx_v_coupling_name;

  /* "Cython/cwipi.pyx":556
 *         global current_cpl
 *         self.name = coupling_name
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cdef int _nb_locations
 *         if (nb_locations is None):
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":558
 *         current_cpl = self.name
 *         cdef int _nb_locations
 *         if (nb_locations is None):             # <<<<<<<<<<<<<<
 *            _nb_locations = 1
 *         else :
 */
  __pyx_t_2 = (__pyx_v_nb_locations == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "Cython/cwipi.pyx":559
 *         cdef int _nb_locations
 *         if (nb_locations is None):
 *            _nb_locations = 1             # <<<<<<<<<<<<<<
 *         else :
 *            _nb_locations = <int> nb_locations
 */
    __pyx_v__nb_locations = 1;

    /* "Cython/cwipi.pyx":558
 *         current_cpl = self.name
 *         cdef int _nb_locations
 *         if (nb_locations is None):             # <<<<<<<<<<<<<<
 *            _nb_locations = 1
 *         else :
 */
    goto __pyx_L3;
  }

  /* "Cython/cwipi.pyx":561
 *            _nb_locations = 1
 *         else :
 *            _nb_locations = <int> nb_locations             # <<<<<<<<<<<<<<
 *         cwipi_create_coupling(coupling_name,
 *                               coupling_type,
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_nb_locations); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L1_error)
    __pyx_v__nb_locations = ((int)__pyx_t_4);
  }
  __pyx_L3:;

  /* "Cython/cwipi.pyx":562
 *         else :
 *            _nb_locations = <int> nb_locations
 *         cwipi_create_coupling(coupling_name,             # <<<<<<<<<<<<<<
 *                               coupling_type,
 *                               coupled_application,
 */
  cwipi_create_coupling(__pyx_v_coupling_name, __pyx_v_coupling_type, __pyx_v_coupled_application, __pyx_v_entitiesDim, __pyx_v_tolerance, __pyx_v_mesh_type, __pyx_v_solver_type, __pyx_v_output_frequency, __pyx_v_output_format, __pyx_v_output_format_option, __pyx_v__nb_locations);

  /* "Cython/cwipi.pyx":573
 *                               output_format_option,
 *                               _nb_locations)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 573, __pyx_L1_error)

  /* "Cython/cwipi.pyx":539
 *     cdef char* name
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  char* coupling_name,
 *                  cwipi_coupling_type_t coupling_type,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":575
 *         current_cpl = ""
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cwipi_delete_coupling(self.name)
 * 
 */

/* Python wrapper */
static void __pyx_pw_6Cython_5cwipi_8Coupling_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6Cython_5cwipi_8Coupling_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6Cython_5cwipi_8Coupling_2__dealloc__(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6Cython_5cwipi_8Coupling_2__dealloc__(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "Cython/cwipi.pyx":576
 * 
 *     def __dealloc__(self):
 *         cwipi_delete_coupling(self.name)             # <<<<<<<<<<<<<<
 * 
 * #
 */
  cwipi_delete_coupling(__pyx_v_self->name);

  /* "Cython/cwipi.pyx":575
 *         current_cpl = ""
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cwipi_delete_coupling(self.name)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Cython/cwipi.pyx":582
 * # --------------------------------
 * 
 *     def define_mesh(self,             # <<<<<<<<<<<<<<
 *                     int n_vertex,
 *                     int n_element,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_5define_mesh(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_4define_mesh[] = "\n        Define mesh\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_5define_mesh(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_n_vertex;
  int __pyx_v_n_element;
  PyArrayObject *__pyx_v_coordinates = 0;
  PyArrayObject *__pyx_v_connectivity_index = 0;
  PyArrayObject *__pyx_v_connectivity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("define_mesh (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_vertex,&__pyx_n_s_n_element,&__pyx_n_s_coordinates,&__pyx_n_s_connectivity_index,&__pyx_n_s_connectivity,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_vertex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_element)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("define_mesh", 1, 5, 5, 1); __PYX_ERR(0, 582, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coordinates)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("define_mesh", 1, 5, 5, 2); __PYX_ERR(0, 582, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_connectivity_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("define_mesh", 1, 5, 5, 3); __PYX_ERR(0, 582, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_connectivity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("define_mesh", 1, 5, 5, 4); __PYX_ERR(0, 582, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "define_mesh") < 0)) __PYX_ERR(0, 582, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_n_vertex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n_vertex == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 583, __pyx_L3_error)
    __pyx_v_n_element = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n_element == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_coordinates = ((PyArrayObject *)values[2]);
    __pyx_v_connectivity_index = ((PyArrayObject *)values[3]);
    __pyx_v_connectivity = ((PyArrayObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("define_mesh", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 582, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.define_mesh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coordinates), __pyx_ptype_5numpy_ndarray, 0, "coordinates", 0))) __PYX_ERR(0, 585, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_connectivity_index), __pyx_ptype_5numpy_ndarray, 0, "connectivity_index", 0))) __PYX_ERR(0, 586, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_connectivity), __pyx_ptype_5numpy_ndarray, 0, "connectivity", 0))) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_4define_mesh(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), __pyx_v_n_vertex, __pyx_v_n_element, __pyx_v_coordinates, __pyx_v_connectivity_index, __pyx_v_connectivity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_4define_mesh(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_n_vertex, int __pyx_v_n_element, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_connectivity_index, PyArrayObject *__pyx_v_connectivity) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_connectivity;
  __Pyx_Buffer __pyx_pybuffer_connectivity;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_connectivity_index;
  __Pyx_Buffer __pyx_pybuffer_connectivity_index;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coordinates;
  __Pyx_Buffer __pyx_pybuffer_coordinates;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("define_mesh", 0);
  __pyx_pybuffer_coordinates.pybuffer.buf = NULL;
  __pyx_pybuffer_coordinates.refcount = 0;
  __pyx_pybuffernd_coordinates.data = NULL;
  __pyx_pybuffernd_coordinates.rcbuffer = &__pyx_pybuffer_coordinates;
  __pyx_pybuffer_connectivity_index.pybuffer.buf = NULL;
  __pyx_pybuffer_connectivity_index.refcount = 0;
  __pyx_pybuffernd_connectivity_index.data = NULL;
  __pyx_pybuffernd_connectivity_index.rcbuffer = &__pyx_pybuffer_connectivity_index;
  __pyx_pybuffer_connectivity.pybuffer.buf = NULL;
  __pyx_pybuffer_connectivity.refcount = 0;
  __pyx_pybuffernd_connectivity.data = NULL;
  __pyx_pybuffernd_connectivity.rcbuffer = &__pyx_pybuffer_connectivity;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 582, __pyx_L1_error)
  }
  __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_connectivity_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_connectivity_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 582, __pyx_L1_error)
  }
  __pyx_pybuffernd_connectivity_index.diminfo[0].strides = __pyx_pybuffernd_connectivity_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_connectivity_index.diminfo[0].shape = __pyx_pybuffernd_connectivity_index.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_connectivity.rcbuffer->pybuffer, (PyObject*)__pyx_v_connectivity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 582, __pyx_L1_error)
  }
  __pyx_pybuffernd_connectivity.diminfo[0].strides = __pyx_pybuffernd_connectivity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_connectivity.diminfo[0].shape = __pyx_pybuffernd_connectivity.rcbuffer->pybuffer.shape[0];

  /* "Cython/cwipi.pyx":592
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         assert (3 * n_vertex) <= coordinates.size
 *         assert (n_element + 1) <= connectivity_index.size
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":593
 *         global current_cpl
 *         current_cpl = self.name
 *         assert (3 * n_vertex) <= coordinates.size             # <<<<<<<<<<<<<<
 *         assert (n_element + 1) <= connectivity_index.size
 *         cwipi_define_mesh(self.name,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_long((3 * __pyx_v_n_vertex)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_coordinates), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 593, __pyx_L1_error)
    }
  }
  #endif

  /* "Cython/cwipi.pyx":594
 *         current_cpl = self.name
 *         assert (3 * n_vertex) <= coordinates.size
 *         assert (n_element + 1) <= connectivity_index.size             # <<<<<<<<<<<<<<
 *         cwipi_define_mesh(self.name,
 *                           n_vertex,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_n_element + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_connectivity_index), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 594, __pyx_L1_error)
    }
  }
  #endif

  /* "Cython/cwipi.pyx":595
 *         assert (3 * n_vertex) <= coordinates.size
 *         assert (n_element + 1) <= connectivity_index.size
 *         cwipi_define_mesh(self.name,             # <<<<<<<<<<<<<<
 *                           n_vertex,
 *                           n_element,
 */
  cwipi_define_mesh(__pyx_v_self->name, __pyx_v_n_vertex, __pyx_v_n_element, ((double *)__pyx_v_coordinates->data), ((int *)__pyx_v_connectivity_index->data), ((int *)__pyx_v_connectivity->data));

  /* "Cython/cwipi.pyx":601
 *                           <int *> connectivity_index.data,
 *                           <int *> connectivity.data)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 601, __pyx_L1_error)

  /* "Cython/cwipi.pyx":582
 * # --------------------------------
 * 
 *     def define_mesh(self,             # <<<<<<<<<<<<<<
 *                     int n_vertex,
 *                     int n_element,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_connectivity.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_connectivity_index.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("Cython.cwipi.Coupling.define_mesh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_connectivity.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_connectivity_index.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":605
 * 
 * 
 *     def set_points_to_locate(self,             # <<<<<<<<<<<<<<
 *                              int n_points,
 *                              np.ndarray[np.double_t] coordinates not None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_7set_points_to_locate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_6set_points_to_locate[] = "\n        Set points to locate\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_7set_points_to_locate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_n_points;
  PyArrayObject *__pyx_v_coordinates = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_points_to_locate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_points,&__pyx_n_s_coordinates,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coordinates)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_points_to_locate", 1, 2, 2, 1); __PYX_ERR(0, 605, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_points_to_locate") < 0)) __PYX_ERR(0, 605, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n_points = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n_points == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_coordinates = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_points_to_locate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 605, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.set_points_to_locate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coordinates), __pyx_ptype_5numpy_ndarray, 0, "coordinates", 0))) __PYX_ERR(0, 607, __pyx_L1_error)
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_6set_points_to_locate(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), __pyx_v_n_points, __pyx_v_coordinates);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_6set_points_to_locate(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_n_points, PyArrayObject *__pyx_v_coordinates) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coordinates;
  __Pyx_Buffer __pyx_pybuffer_coordinates;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_points_to_locate", 0);
  __pyx_pybuffer_coordinates.pybuffer.buf = NULL;
  __pyx_pybuffer_coordinates.refcount = 0;
  __pyx_pybuffernd_coordinates.data = NULL;
  __pyx_pybuffernd_coordinates.rcbuffer = &__pyx_pybuffer_coordinates;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 605, __pyx_L1_error)
  }
  __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0];

  /* "Cython/cwipi.pyx":612
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_set_points_to_locate(self.name,
 *                                    n_points,
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":613
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_set_points_to_locate(self.name,             # <<<<<<<<<<<<<<
 *                                    n_points,
 *                                    <double *> coordinates.data)
 */
  cwipi_set_points_to_locate(__pyx_v_self->name, __pyx_v_n_points, ((double *)__pyx_v_coordinates->data));

  /* "Cython/cwipi.pyx":616
 *                                    n_points,
 *                                    <double *> coordinates.data)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 616, __pyx_L1_error)

  /* "Cython/cwipi.pyx":605
 * 
 * 
 *     def set_points_to_locate(self,             # <<<<<<<<<<<<<<
 *                              int n_points,
 *                              np.ndarray[np.double_t] coordinates not None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("Cython.cwipi.Coupling.set_points_to_locate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":619
 * 
 * 
 *     def add_polyhedra(self,             # <<<<<<<<<<<<<<
 *                       int n_element,
 *                       np.ndarray[np.int32_t] face_index not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_9add_polyhedra(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_8add_polyhedra[] = "\n        Add polyhedra\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_9add_polyhedra(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_n_element;
  PyArrayObject *__pyx_v_face_index = 0;
  PyArrayObject *__pyx_v_cell_to_face_connectivity = 0;
  int __pyx_v_n_face;
  PyArrayObject *__pyx_v_face_connectivity_index = 0;
  PyArrayObject *__pyx_v_face_connectivity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_polyhedra (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_element,&__pyx_n_s_face_index,&__pyx_n_s_cell_to_face_connectivity,&__pyx_n_s_n_face,&__pyx_n_s_face_connectivity_index,&__pyx_n_s_face_connectivity,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_element)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_face_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_polyhedra", 1, 6, 6, 1); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cell_to_face_connectivity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_polyhedra", 1, 6, 6, 2); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_face)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_polyhedra", 1, 6, 6, 3); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_face_connectivity_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_polyhedra", 1, 6, 6, 4); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_face_connectivity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_polyhedra", 1, 6, 6, 5); __PYX_ERR(0, 619, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_polyhedra") < 0)) __PYX_ERR(0, 619, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_n_element = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n_element == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L3_error)
    __pyx_v_face_index = ((PyArrayObject *)values[1]);
    __pyx_v_cell_to_face_connectivity = ((PyArrayObject *)values[2]);
    __pyx_v_n_face = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n_face == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L3_error)
    __pyx_v_face_connectivity_index = ((PyArrayObject *)values[4]);
    __pyx_v_face_connectivity = ((PyArrayObject *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_polyhedra", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 619, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.add_polyhedra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_index), __pyx_ptype_5numpy_ndarray, 0, "face_index", 0))) __PYX_ERR(0, 621, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cell_to_face_connectivity), __pyx_ptype_5numpy_ndarray, 0, "cell_to_face_connectivity", 0))) __PYX_ERR(0, 622, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_connectivity_index), __pyx_ptype_5numpy_ndarray, 0, "face_connectivity_index", 0))) __PYX_ERR(0, 624, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_connectivity), __pyx_ptype_5numpy_ndarray, 0, "face_connectivity", 0))) __PYX_ERR(0, 625, __pyx_L1_error)
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_8add_polyhedra(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), __pyx_v_n_element, __pyx_v_face_index, __pyx_v_cell_to_face_connectivity, __pyx_v_n_face, __pyx_v_face_connectivity_index, __pyx_v_face_connectivity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_8add_polyhedra(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_n_element, PyArrayObject *__pyx_v_face_index, PyArrayObject *__pyx_v_cell_to_face_connectivity, int __pyx_v_n_face, PyArrayObject *__pyx_v_face_connectivity_index, PyArrayObject *__pyx_v_face_connectivity) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cell_to_face_connectivity;
  __Pyx_Buffer __pyx_pybuffer_cell_to_face_connectivity;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_face_connectivity;
  __Pyx_Buffer __pyx_pybuffer_face_connectivity;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_face_connectivity_index;
  __Pyx_Buffer __pyx_pybuffer_face_connectivity_index;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_face_index;
  __Pyx_Buffer __pyx_pybuffer_face_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("add_polyhedra", 0);
  __pyx_pybuffer_face_index.pybuffer.buf = NULL;
  __pyx_pybuffer_face_index.refcount = 0;
  __pyx_pybuffernd_face_index.data = NULL;
  __pyx_pybuffernd_face_index.rcbuffer = &__pyx_pybuffer_face_index;
  __pyx_pybuffer_cell_to_face_connectivity.pybuffer.buf = NULL;
  __pyx_pybuffer_cell_to_face_connectivity.refcount = 0;
  __pyx_pybuffernd_cell_to_face_connectivity.data = NULL;
  __pyx_pybuffernd_cell_to_face_connectivity.rcbuffer = &__pyx_pybuffer_cell_to_face_connectivity;
  __pyx_pybuffer_face_connectivity_index.pybuffer.buf = NULL;
  __pyx_pybuffer_face_connectivity_index.refcount = 0;
  __pyx_pybuffernd_face_connectivity_index.data = NULL;
  __pyx_pybuffernd_face_connectivity_index.rcbuffer = &__pyx_pybuffer_face_connectivity_index;
  __pyx_pybuffer_face_connectivity.pybuffer.buf = NULL;
  __pyx_pybuffer_face_connectivity.refcount = 0;
  __pyx_pybuffernd_face_connectivity.data = NULL;
  __pyx_pybuffernd_face_connectivity.rcbuffer = &__pyx_pybuffer_face_connectivity;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_face_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_face_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 619, __pyx_L1_error)
  }
  __pyx_pybuffernd_face_index.diminfo[0].strides = __pyx_pybuffernd_face_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_face_index.diminfo[0].shape = __pyx_pybuffernd_face_index.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cell_to_face_connectivity.rcbuffer->pybuffer, (PyObject*)__pyx_v_cell_to_face_connectivity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 619, __pyx_L1_error)
  }
  __pyx_pybuffernd_cell_to_face_connectivity.diminfo[0].strides = __pyx_pybuffernd_cell_to_face_connectivity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cell_to_face_connectivity.diminfo[0].shape = __pyx_pybuffernd_cell_to_face_connectivity.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_face_connectivity_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_face_connectivity_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 619, __pyx_L1_error)
  }
  __pyx_pybuffernd_face_connectivity_index.diminfo[0].strides = __pyx_pybuffernd_face_connectivity_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_face_connectivity_index.diminfo[0].shape = __pyx_pybuffernd_face_connectivity_index.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_face_connectivity.rcbuffer->pybuffer, (PyObject*)__pyx_v_face_connectivity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 619, __pyx_L1_error)
  }
  __pyx_pybuffernd_face_connectivity.diminfo[0].strides = __pyx_pybuffernd_face_connectivity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_face_connectivity.diminfo[0].shape = __pyx_pybuffernd_face_connectivity.rcbuffer->pybuffer.shape[0];

  /* "Cython/cwipi.pyx":630
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         assert face_index.size == (n_element + 1)
 *         cwipi_add_polyhedra(self.name,
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":631
 *         global current_cpl
 *         current_cpl = self.name
 *         assert face_index.size == (n_element + 1)             # <<<<<<<<<<<<<<
 *         cwipi_add_polyhedra(self.name,
 *                             n_element,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_face_index), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_n_element + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 631, __pyx_L1_error)
    }
  }
  #endif

  /* "Cython/cwipi.pyx":632
 *         current_cpl = self.name
 *         assert face_index.size == (n_element + 1)
 *         cwipi_add_polyhedra(self.name,             # <<<<<<<<<<<<<<
 *                             n_element,
 *                             <int *> face_index.data,
 */
  cwipi_add_polyhedra(__pyx_v_self->name, __pyx_v_n_element, ((int *)__pyx_v_face_index->data), ((int *)__pyx_v_cell_to_face_connectivity->data), __pyx_v_n_face, ((int *)__pyx_v_face_connectivity_index->data), ((int *)__pyx_v_face_connectivity->data));

  /* "Cython/cwipi.pyx":640
 *                             <int *> face_connectivity.data)
 * 
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 640, __pyx_L1_error)

  /* "Cython/cwipi.pyx":619
 * 
 * 
 *     def add_polyhedra(self,             # <<<<<<<<<<<<<<
 *                       int n_element,
 *                       np.ndarray[np.int32_t] face_index not None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cell_to_face_connectivity.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_face_connectivity.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_face_connectivity_index.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_face_index.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("Cython.cwipi.Coupling.add_polyhedra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cell_to_face_connectivity.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_face_connectivity.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_face_connectivity_index.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_face_index.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":643
 * 
 * 
 *     def locate(self):             # <<<<<<<<<<<<<<
 *         """
 *         Locate
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_11locate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_10locate[] = "\n        Locate\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_11locate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("locate (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_10locate(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_10locate(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("locate", 0);

  /* "Cython/cwipi.pyx":648
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_locate (self.name)
 *         current_cpl = ""
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":649
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_locate (self.name)             # <<<<<<<<<<<<<<
 *         current_cpl = ""
 * 
 */
  cwipi_locate(__pyx_v_self->name);

  /* "Cython/cwipi.pyx":650
 *         current_cpl = self.name
 *         cwipi_locate (self.name)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 650, __pyx_L1_error)

  /* "Cython/cwipi.pyx":643
 * 
 * 
 *     def locate(self):             # <<<<<<<<<<<<<<
 *         """
 *         Locate
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.locate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":653
 * 
 * 
 *     def set_location_index(self, int index):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_13set_location_index(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_12set_location_index[] = "\n        Set location index\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_13set_location_index(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_location_index (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 653, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.set_location_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_12set_location_index(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_12set_location_index(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_location_index", 0);

  /* "Cython/cwipi.pyx":658
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_set_location_index(self.name, index)
 *         current_cpl = ""
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":659
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_set_location_index(self.name, index)             # <<<<<<<<<<<<<<
 *         current_cpl = ""
 * 
 */
  cwipi_set_location_index(__pyx_v_self->name, __pyx_v_index);

  /* "Cython/cwipi.pyx":660
 *         current_cpl = self.name
 *         cwipi_set_location_index(self.name, index)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 660, __pyx_L1_error)

  /* "Cython/cwipi.pyx":653
 * 
 * 
 *     def set_location_index(self, int index):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.set_location_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":663
 * 
 * 
 *     def load_location(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_15load_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_14load_location[] = "\n        Set location index\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_15load_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_location (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_14load_location(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_14load_location(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("load_location", 0);

  /* "Cython/cwipi.pyx":668
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_load_location(self.name)
 *         current_cpl = ""
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":669
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_load_location(self.name)             # <<<<<<<<<<<<<<
 *         current_cpl = ""
 * 
 */
  cwipi_load_location(__pyx_v_self->name);

  /* "Cython/cwipi.pyx":670
 *         current_cpl = self.name
 *         cwipi_load_location(self.name)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 670, __pyx_L1_error)

  /* "Cython/cwipi.pyx":663
 * 
 * 
 *     def load_location(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.load_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":673
 * 
 * 
 *     def save_location(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_17save_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_16save_location[] = "\n        Set location index\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_17save_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_location (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_16save_location(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_16save_location(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("save_location", 0);

  /* "Cython/cwipi.pyx":678
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_save_location(self.name)
 *         current_cpl = ""
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":679
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_save_location(self.name)             # <<<<<<<<<<<<<<
 *         current_cpl = ""
 * 
 */
  cwipi_save_location(__pyx_v_self->name);

  /* "Cython/cwipi.pyx":680
 *         current_cpl = self.name
 *         cwipi_save_location(self.name)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 680, __pyx_L1_error)

  /* "Cython/cwipi.pyx":673
 * 
 * 
 *     def save_location(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.save_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":683
 * 
 * 
 *     def open_location_file(self, char *filename, char *mode):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_19open_location_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_18open_location_file[] = "\n        Set location index\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_19open_location_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  char *__pyx_v_mode;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_location_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_mode,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("open_location_file", 1, 2, 2, 1); __PYX_ERR(0, 683, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "open_location_file") < 0)) __PYX_ERR(0, 683, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L3_error)
    __pyx_v_mode = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_mode) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("open_location_file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 683, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.open_location_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_18open_location_file(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), __pyx_v_filename, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_18open_location_file(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_filename, char *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("open_location_file", 0);

  /* "Cython/cwipi.pyx":688
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_open_location_file(self.name, filename, mode)
 *         current_cpl = ""
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":689
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_open_location_file(self.name, filename, mode)             # <<<<<<<<<<<<<<
 *         current_cpl = ""
 * 
 */
  cwipi_open_location_file(__pyx_v_self->name, __pyx_v_filename, __pyx_v_mode);

  /* "Cython/cwipi.pyx":690
 *         current_cpl = self.name
 *         cwipi_open_location_file(self.name, filename, mode)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 690, __pyx_L1_error)

  /* "Cython/cwipi.pyx":683
 * 
 * 
 *     def open_location_file(self, char *filename, char *mode):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.open_location_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":693
 * 
 * 
 *     def close_location_file(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_21close_location_file(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_20close_location_file[] = "\n        Set location index\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_21close_location_file(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close_location_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_20close_location_file(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_20close_location_file(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("close_location_file", 0);

  /* "Cython/cwipi.pyx":698
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_close_location_file(self.name)
 *         current_cpl = ""
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":699
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_close_location_file(self.name)             # <<<<<<<<<<<<<<
 *         current_cpl = ""
 * 
 */
  cwipi_close_location_file(__pyx_v_self->name);

  /* "Cython/cwipi.pyx":700
 *         current_cpl = self.name
 *         cwipi_close_location_file(self.name)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 700, __pyx_L1_error)

  /* "Cython/cwipi.pyx":693
 * 
 * 
 *     def close_location_file(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set location index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.close_location_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":703
 * 
 * 
 *     def update_location(self):             # <<<<<<<<<<<<<<
 *         """
 *         Locate
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_23update_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_22update_location[] = "\n        Locate\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_23update_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_location (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_22update_location(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_22update_location(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("update_location", 0);

  /* "Cython/cwipi.pyx":708
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_update_location (self.name)
 *         current_cpl = ""
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":709
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_update_location (self.name)             # <<<<<<<<<<<<<<
 *         current_cpl = ""
 * 
 */
  cwipi_update_location(__pyx_v_self->name);

  /* "Cython/cwipi.pyx":710
 *         current_cpl = self.name
 *         cwipi_update_location (self.name)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 710, __pyx_L1_error)

  /* "Cython/cwipi.pyx":703
 * 
 * 
 *     def update_location(self):             # <<<<<<<<<<<<<<
 *         """
 *         Locate
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.update_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":713
 * 
 * 
 *     def exchange(self,             # <<<<<<<<<<<<<<
 *                  char* exchange_name,
 *                  int stride,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_25exchange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_24exchange[] = "\n        Exchange\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_25exchange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_exchange_name;
  int __pyx_v_stride;
  int __pyx_v_time_step;
  double __pyx_v_time_value;
  char *__pyx_v_sending_field_name;
  PyArrayObject *__pyx_v_sending_field = 0;
  char *__pyx_v_receiving_field_name;
  PyArrayObject *__pyx_v_receiving_field = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exchange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exchange_name,&__pyx_n_s_stride,&__pyx_n_s_time_step,&__pyx_n_s_time_value,&__pyx_n_s_sending_field_name,&__pyx_n_s_sending_field,&__pyx_n_s_receiving_field_name,&__pyx_n_s_receiving_field,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exchange_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("exchange", 1, 8, 8, 1); __PYX_ERR(0, 713, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("exchange", 1, 8, 8, 2); __PYX_ERR(0, 713, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("exchange", 1, 8, 8, 3); __PYX_ERR(0, 713, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sending_field_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("exchange", 1, 8, 8, 4); __PYX_ERR(0, 713, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sending_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("exchange", 1, 8, 8, 5); __PYX_ERR(0, 713, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_receiving_field_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("exchange", 1, 8, 8, 6); __PYX_ERR(0, 713, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_receiving_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("exchange", 1, 8, 8, 7); __PYX_ERR(0, 713, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "exchange") < 0)) __PYX_ERR(0, 713, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_exchange_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_exchange_name) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_stride = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_stride == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
    __pyx_v_time_step = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_time_step == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L3_error)
    __pyx_v_time_value = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_time_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L3_error)
    __pyx_v_sending_field_name = __Pyx_PyObject_AsString(values[4]); if (unlikely((!__pyx_v_sending_field_name) && PyErr_Occurred())) __PYX_ERR(0, 718, __pyx_L3_error)
    __pyx_v_sending_field = ((PyArrayObject *)values[5]);
    __pyx_v_receiving_field_name = __Pyx_PyObject_AsString(values[6]); if (unlikely((!__pyx_v_receiving_field_name) && PyErr_Occurred())) __PYX_ERR(0, 720, __pyx_L3_error)
    __pyx_v_receiving_field = ((PyArrayObject *)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("exchange", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 713, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.exchange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sending_field), __pyx_ptype_5numpy_ndarray, 1, "sending_field", 0))) __PYX_ERR(0, 719, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_receiving_field), __pyx_ptype_5numpy_ndarray, 1, "receiving_field", 0))) __PYX_ERR(0, 721, __pyx_L1_error)
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_24exchange(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), __pyx_v_exchange_name, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_sending_field_name, __pyx_v_sending_field, __pyx_v_receiving_field_name, __pyx_v_receiving_field);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_24exchange(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_exchange_name, int __pyx_v_stride, int __pyx_v_time_step, double __pyx_v_time_value, char *__pyx_v_sending_field_name, PyArrayObject *__pyx_v_sending_field, char *__pyx_v_receiving_field_name, PyArrayObject *__pyx_v_receiving_field) {
  int __pyx_v_c_n_not_located_points;
  cwipi_exchange_status_t __pyx_v_status;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_receiving_field;
  __Pyx_Buffer __pyx_pybuffer_receiving_field;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sending_field;
  __Pyx_Buffer __pyx_pybuffer_sending_field;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("exchange", 0);
  __pyx_pybuffer_sending_field.pybuffer.buf = NULL;
  __pyx_pybuffer_sending_field.refcount = 0;
  __pyx_pybuffernd_sending_field.data = NULL;
  __pyx_pybuffernd_sending_field.rcbuffer = &__pyx_pybuffer_sending_field;
  __pyx_pybuffer_receiving_field.pybuffer.buf = NULL;
  __pyx_pybuffer_receiving_field.refcount = 0;
  __pyx_pybuffernd_receiving_field.data = NULL;
  __pyx_pybuffernd_receiving_field.rcbuffer = &__pyx_pybuffer_receiving_field;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sending_field.rcbuffer->pybuffer, (PyObject*)__pyx_v_sending_field, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 713, __pyx_L1_error)
  }
  __pyx_pybuffernd_sending_field.diminfo[0].strides = __pyx_pybuffernd_sending_field.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sending_field.diminfo[0].shape = __pyx_pybuffernd_sending_field.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_receiving_field.rcbuffer->pybuffer, (PyObject*)__pyx_v_receiving_field, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 713, __pyx_L1_error)
  }
  __pyx_pybuffernd_receiving_field.diminfo[0].strides = __pyx_pybuffernd_receiving_field.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_receiving_field.diminfo[0].shape = __pyx_pybuffernd_receiving_field.rcbuffer->pybuffer.shape[0];

  /* "Cython/cwipi.pyx":726
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 * 
 *         cdef int c_n_not_located_points
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":731
 *         cdef cwipi_exchange_status_t status
 * 
 *         if (sending_field is None) and  (receiving_field is not None):             # <<<<<<<<<<<<<<
 *           status = cwipi_exchange(self.name,
 *                                    exchange_name,
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_sending_field) == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (((PyObject *)__pyx_v_receiving_field) != Py_None);
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "Cython/cwipi.pyx":732
 * 
 *         if (sending_field is None) and  (receiving_field is not None):
 *           status = cwipi_exchange(self.name,             # <<<<<<<<<<<<<<
 *                                    exchange_name,
 *                                    stride,
 */
    __pyx_v_status = cwipi_exchange(__pyx_v_self->name, __pyx_v_exchange_name, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_sending_field_name, NULL, __pyx_v_receiving_field_name, ((double *)__pyx_v_receiving_field->data), (&__pyx_v_c_n_not_located_points));

    /* "Cython/cwipi.pyx":731
 *         cdef cwipi_exchange_status_t status
 * 
 *         if (sending_field is None) and  (receiving_field is not None):             # <<<<<<<<<<<<<<
 *           status = cwipi_exchange(self.name,
 *                                    exchange_name,
 */
    goto __pyx_L3;
  }

  /* "Cython/cwipi.pyx":742
 *                                    <double*> receiving_field.data,
 *                                    &c_n_not_located_points)
 *         elif (sending_field is not None) and  (receiving_field is None):             # <<<<<<<<<<<<<<
 *           status = cwipi_exchange(self.name,
 *                                    exchange_name,
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_sending_field) != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = (((PyObject *)__pyx_v_receiving_field) == Py_None);
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "Cython/cwipi.pyx":743
 *                                    &c_n_not_located_points)
 *         elif (sending_field is not None) and  (receiving_field is None):
 *           status = cwipi_exchange(self.name,             # <<<<<<<<<<<<<<
 *                                    exchange_name,
 *                                    stride,
 */
    __pyx_v_status = cwipi_exchange(__pyx_v_self->name, __pyx_v_exchange_name, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_sending_field_name, ((double *)__pyx_v_sending_field->data), __pyx_v_receiving_field_name, NULL, (&__pyx_v_c_n_not_located_points));

    /* "Cython/cwipi.pyx":742
 *                                    <double*> receiving_field.data,
 *                                    &c_n_not_located_points)
 *         elif (sending_field is not None) and  (receiving_field is None):             # <<<<<<<<<<<<<<
 *           status = cwipi_exchange(self.name,
 *                                    exchange_name,
 */
    goto __pyx_L3;
  }

  /* "Cython/cwipi.pyx":753
 *                                    NULL,
 *                                    &c_n_not_located_points)
 *         elif (sending_field is not None) and  (receiving_field is not None):             # <<<<<<<<<<<<<<
 *           status = cwipi_exchange(self.name,
 *                                    exchange_name,
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_sending_field) != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = (((PyObject *)__pyx_v_receiving_field) != Py_None);
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_2) {

    /* "Cython/cwipi.pyx":754
 *                                    &c_n_not_located_points)
 *         elif (sending_field is not None) and  (receiving_field is not None):
 *           status = cwipi_exchange(self.name,             # <<<<<<<<<<<<<<
 *                                    exchange_name,
 *                                    stride,
 */
    __pyx_v_status = cwipi_exchange(__pyx_v_self->name, __pyx_v_exchange_name, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_sending_field_name, ((double *)__pyx_v_sending_field->data), __pyx_v_receiving_field_name, ((double *)__pyx_v_receiving_field->data), (&__pyx_v_c_n_not_located_points));

    /* "Cython/cwipi.pyx":753
 *                                    NULL,
 *                                    &c_n_not_located_points)
 *         elif (sending_field is not None) and  (receiving_field is not None):             # <<<<<<<<<<<<<<
 *           status = cwipi_exchange(self.name,
 *                                    exchange_name,
 */
    goto __pyx_L3;
  }

  /* "Cython/cwipi.pyx":765
 *                                    &c_n_not_located_points)
 *         else :
 *           status = cwipi_exchange(self.name,             # <<<<<<<<<<<<<<
 *                                    exchange_name,
 *                                    stride,
 */
  /*else*/ {

    /* "Cython/cwipi.pyx":774
 *                                    receiving_field_name,
 *                                    NULL,
 *                                    &c_n_not_located_points)             # <<<<<<<<<<<<<<
 * 
 *         current_cpl = ""
 */
    __pyx_v_status = cwipi_exchange(__pyx_v_self->name, __pyx_v_exchange_name, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_sending_field_name, NULL, __pyx_v_receiving_field_name, NULL, (&__pyx_v_c_n_not_located_points));
  }
  __pyx_L3:;

  /* "Cython/cwipi.pyx":776
 *                                    &c_n_not_located_points)
 * 
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 *         return {'status':status, 'n_not_located_points':c_n_not_located_points}
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 776, __pyx_L1_error)

  /* "Cython/cwipi.pyx":777
 * 
 *         current_cpl = ""
 *         return {'status':status, 'n_not_located_points':c_n_not_located_points}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_From_cwipi_exchange_status_t(__pyx_v_status); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_status, __pyx_t_5) < 0) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_c_n_not_located_points); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_n_not_located_points, __pyx_t_5) < 0) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":713
 * 
 * 
 *     def exchange(self,             # <<<<<<<<<<<<<<
 *                  char* exchange_name,
 *                  int stride,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_receiving_field.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sending_field.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("Cython.cwipi.Coupling.exchange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_receiving_field.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sending_field.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":780
 * 
 * 
 *     def issend(self,             # <<<<<<<<<<<<<<
 *                char* exchange_name,
 *                int tag,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_27issend(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_26issend[] = "\n        Issend\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_27issend(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_exchange_name;
  int __pyx_v_tag;
  int __pyx_v_stride;
  int __pyx_v_time_step;
  double __pyx_v_time_value;
  char *__pyx_v_sending_field_name;
  PyArrayObject *__pyx_v_sending_field = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("issend (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exchange_name,&__pyx_n_s_tag,&__pyx_n_s_stride,&__pyx_n_s_time_step,&__pyx_n_s_time_value,&__pyx_n_s_sending_field_name,&__pyx_n_s_sending_field,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exchange_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("issend", 1, 7, 7, 1); __PYX_ERR(0, 780, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("issend", 1, 7, 7, 2); __PYX_ERR(0, 780, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("issend", 1, 7, 7, 3); __PYX_ERR(0, 780, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("issend", 1, 7, 7, 4); __PYX_ERR(0, 780, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sending_field_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("issend", 1, 7, 7, 5); __PYX_ERR(0, 780, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sending_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("issend", 1, 7, 7, 6); __PYX_ERR(0, 780, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "issend") < 0)) __PYX_ERR(0, 780, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_exchange_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_exchange_name) && PyErr_Occurred())) __PYX_ERR(0, 781, __pyx_L3_error)
    __pyx_v_tag = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_tag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L3_error)
    __pyx_v_stride = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_stride == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 783, __pyx_L3_error)
    __pyx_v_time_step = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_time_step == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
    __pyx_v_time_value = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_time_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L3_error)
    __pyx_v_sending_field_name = __Pyx_PyObject_AsString(values[5]); if (unlikely((!__pyx_v_sending_field_name) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L3_error)
    __pyx_v_sending_field = ((PyArrayObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("issend", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 780, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.issend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sending_field), __pyx_ptype_5numpy_ndarray, 1, "sending_field", 0))) __PYX_ERR(0, 787, __pyx_L1_error)
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_26issend(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), __pyx_v_exchange_name, __pyx_v_tag, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_sending_field_name, __pyx_v_sending_field);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_26issend(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_exchange_name, int __pyx_v_tag, int __pyx_v_stride, int __pyx_v_time_step, double __pyx_v_time_value, char *__pyx_v_sending_field_name, PyArrayObject *__pyx_v_sending_field) {
  int __pyx_v_request;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sending_field;
  __Pyx_Buffer __pyx_pybuffer_sending_field;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("issend", 0);
  __pyx_pybuffer_sending_field.pybuffer.buf = NULL;
  __pyx_pybuffer_sending_field.refcount = 0;
  __pyx_pybuffernd_sending_field.data = NULL;
  __pyx_pybuffernd_sending_field.rcbuffer = &__pyx_pybuffer_sending_field;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sending_field.rcbuffer->pybuffer, (PyObject*)__pyx_v_sending_field, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 780, __pyx_L1_error)
  }
  __pyx_pybuffernd_sending_field.diminfo[0].strides = __pyx_pybuffernd_sending_field.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sending_field.diminfo[0].shape = __pyx_pybuffernd_sending_field.rcbuffer->pybuffer.shape[0];

  /* "Cython/cwipi.pyx":794
 * 
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 * 
 *         if sending_field is None:
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":796
 *         current_cpl = self.name
 * 
 *         if sending_field is None:             # <<<<<<<<<<<<<<
 *             cwipi_issend(self.name,
 *                          exchange_name,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_sending_field) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "Cython/cwipi.pyx":797
 * 
 *         if sending_field is None:
 *             cwipi_issend(self.name,             # <<<<<<<<<<<<<<
 *                          exchange_name,
 *                          tag,
 */
    cwipi_issend(__pyx_v_self->name, __pyx_v_exchange_name, __pyx_v_tag, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_sending_field_name, NULL, (&__pyx_v_request));

    /* "Cython/cwipi.pyx":796
 *         current_cpl = self.name
 * 
 *         if sending_field is None:             # <<<<<<<<<<<<<<
 *             cwipi_issend(self.name,
 *                          exchange_name,
 */
    goto __pyx_L3;
  }

  /* "Cython/cwipi.pyx":807
 *                          &request)
 *         else:
 *             cwipi_issend(self.name,             # <<<<<<<<<<<<<<
 *                          exchange_name,
 *                          tag,
 */
  /*else*/ {

    /* "Cython/cwipi.pyx":815
 *                          sending_field_name,
 *                          <double*> sending_field.data,
 *                          &request)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    cwipi_issend(__pyx_v_self->name, __pyx_v_exchange_name, __pyx_v_tag, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_sending_field_name, ((double *)__pyx_v_sending_field->data), (&__pyx_v_request));
  }
  __pyx_L3:;

  /* "Cython/cwipi.pyx":818
 * 
 * 
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 *         return {'request':request}
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 818, __pyx_L1_error)

  /* "Cython/cwipi.pyx":819
 * 
 *         current_cpl = ""
 *         return {'request':request}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_request); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_request, __pyx_t_4) < 0) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":780
 * 
 * 
 *     def issend(self,             # <<<<<<<<<<<<<<
 *                char* exchange_name,
 *                int tag,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sending_field.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("Cython.cwipi.Coupling.issend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sending_field.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":822
 * 
 * 
 *     def irecv(self,             # <<<<<<<<<<<<<<
 *               char* exchange_name,
 *               int tag,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_29irecv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_28irecv[] = "\n        Irecv\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_29irecv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_exchange_name;
  int __pyx_v_tag;
  int __pyx_v_stride;
  int __pyx_v_time_step;
  double __pyx_v_time_value;
  char *__pyx_v_receiving_field_name;
  PyArrayObject *__pyx_v_receiving_field = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("irecv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exchange_name,&__pyx_n_s_tag,&__pyx_n_s_stride,&__pyx_n_s_time_step,&__pyx_n_s_time_value,&__pyx_n_s_receiving_field_name,&__pyx_n_s_receiving_field,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exchange_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("irecv", 1, 7, 7, 1); __PYX_ERR(0, 822, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("irecv", 1, 7, 7, 2); __PYX_ERR(0, 822, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("irecv", 1, 7, 7, 3); __PYX_ERR(0, 822, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("irecv", 1, 7, 7, 4); __PYX_ERR(0, 822, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_receiving_field_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("irecv", 1, 7, 7, 5); __PYX_ERR(0, 822, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_receiving_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("irecv", 1, 7, 7, 6); __PYX_ERR(0, 822, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "irecv") < 0)) __PYX_ERR(0, 822, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_exchange_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_exchange_name) && PyErr_Occurred())) __PYX_ERR(0, 823, __pyx_L3_error)
    __pyx_v_tag = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_tag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 824, __pyx_L3_error)
    __pyx_v_stride = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_stride == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 825, __pyx_L3_error)
    __pyx_v_time_step = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_time_step == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 826, __pyx_L3_error)
    __pyx_v_time_value = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_time_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
    __pyx_v_receiving_field_name = __Pyx_PyObject_AsString(values[5]); if (unlikely((!__pyx_v_receiving_field_name) && PyErr_Occurred())) __PYX_ERR(0, 828, __pyx_L3_error)
    __pyx_v_receiving_field = ((PyArrayObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("irecv", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 822, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.irecv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_receiving_field), __pyx_ptype_5numpy_ndarray, 1, "receiving_field", 0))) __PYX_ERR(0, 829, __pyx_L1_error)
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_28irecv(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), __pyx_v_exchange_name, __pyx_v_tag, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_receiving_field_name, __pyx_v_receiving_field);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_28irecv(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, char *__pyx_v_exchange_name, int __pyx_v_tag, int __pyx_v_stride, int __pyx_v_time_step, double __pyx_v_time_value, char *__pyx_v_receiving_field_name, PyArrayObject *__pyx_v_receiving_field) {
  int __pyx_v_request;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_receiving_field;
  __Pyx_Buffer __pyx_pybuffer_receiving_field;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("irecv", 0);
  __pyx_pybuffer_receiving_field.pybuffer.buf = NULL;
  __pyx_pybuffer_receiving_field.refcount = 0;
  __pyx_pybuffernd_receiving_field.data = NULL;
  __pyx_pybuffernd_receiving_field.rcbuffer = &__pyx_pybuffer_receiving_field;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_receiving_field.rcbuffer->pybuffer, (PyObject*)__pyx_v_receiving_field, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 822, __pyx_L1_error)
  }
  __pyx_pybuffernd_receiving_field.diminfo[0].strides = __pyx_pybuffernd_receiving_field.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_receiving_field.diminfo[0].shape = __pyx_pybuffernd_receiving_field.rcbuffer->pybuffer.shape[0];

  /* "Cython/cwipi.pyx":836
 * 
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 * 
 *         if receiving_field is None:
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":838
 *         current_cpl = self.name
 * 
 *         if receiving_field is None:             # <<<<<<<<<<<<<<
 *             cwipi_irecv(self.name,
 *                         exchange_name,
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_receiving_field) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "Cython/cwipi.pyx":839
 * 
 *         if receiving_field is None:
 *             cwipi_irecv(self.name,             # <<<<<<<<<<<<<<
 *                         exchange_name,
 *                         tag,
 */
    cwipi_irecv(__pyx_v_self->name, __pyx_v_exchange_name, __pyx_v_tag, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_receiving_field_name, NULL, (&__pyx_v_request));

    /* "Cython/cwipi.pyx":838
 *         current_cpl = self.name
 * 
 *         if receiving_field is None:             # <<<<<<<<<<<<<<
 *             cwipi_irecv(self.name,
 *                         exchange_name,
 */
    goto __pyx_L3;
  }

  /* "Cython/cwipi.pyx":849
 *                         &request)
 *         else:
 *             cwipi_irecv(self.name,             # <<<<<<<<<<<<<<
 *                         exchange_name,
 *                         tag,
 */
  /*else*/ {

    /* "Cython/cwipi.pyx":857
 *                         receiving_field_name,
 *                         <double*> receiving_field.data,
 *                         &request)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    cwipi_irecv(__pyx_v_self->name, __pyx_v_exchange_name, __pyx_v_tag, __pyx_v_stride, __pyx_v_time_step, __pyx_v_time_value, __pyx_v_receiving_field_name, ((double *)__pyx_v_receiving_field->data), (&__pyx_v_request));
  }
  __pyx_L3:;

  /* "Cython/cwipi.pyx":860
 * 
 * 
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 *         return {'request':request}
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 860, __pyx_L1_error)

  /* "Cython/cwipi.pyx":861
 * 
 *         current_cpl = ""
 *         return {'request':request}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_request); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_request, __pyx_t_4) < 0) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":822
 * 
 * 
 *     def irecv(self,             # <<<<<<<<<<<<<<
 *               char* exchange_name,
 *               int tag,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_receiving_field.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("Cython.cwipi.Coupling.irecv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_receiving_field.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":864
 * 
 * 
 *     def wait_issend(self,             # <<<<<<<<<<<<<<
 *                     int request):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_31wait_issend(PyObject *__pyx_v_self, PyObject *__pyx_arg_request); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_30wait_issend[] = "\n        Wait issend\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_31wait_issend(PyObject *__pyx_v_self, PyObject *__pyx_arg_request) {
  int __pyx_v_request;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wait_issend (wrapper)", 0);
  assert(__pyx_arg_request); {
    __pyx_v_request = __Pyx_PyInt_As_int(__pyx_arg_request); if (unlikely((__pyx_v_request == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.wait_issend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_30wait_issend(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), ((int)__pyx_v_request));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_30wait_issend(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_request) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("wait_issend", 0);

  /* "Cython/cwipi.pyx":870
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_wait_issend(self.name, request)
 * 
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":871
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_wait_issend(self.name, request)             # <<<<<<<<<<<<<<
 * 
 *         current_cpl = ""
 */
  cwipi_wait_issend(__pyx_v_self->name, __pyx_v_request);

  /* "Cython/cwipi.pyx":873
 *         cwipi_wait_issend(self.name, request)
 * 
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 873, __pyx_L1_error)

  /* "Cython/cwipi.pyx":864
 * 
 * 
 *     def wait_issend(self,             # <<<<<<<<<<<<<<
 *                     int request):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.wait_issend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":876
 * 
 * 
 *     def wait_irecv(self,             # <<<<<<<<<<<<<<
 *                     int request):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_33wait_irecv(PyObject *__pyx_v_self, PyObject *__pyx_arg_request); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_32wait_irecv[] = "\n        Wait irecv\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_33wait_irecv(PyObject *__pyx_v_self, PyObject *__pyx_arg_request) {
  int __pyx_v_request;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wait_irecv (wrapper)", 0);
  assert(__pyx_arg_request); {
    __pyx_v_request = __Pyx_PyInt_As_int(__pyx_arg_request); if (unlikely((__pyx_v_request == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 877, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("Cython.cwipi.Coupling.wait_irecv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_32wait_irecv(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), ((int)__pyx_v_request));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_32wait_irecv(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, int __pyx_v_request) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("wait_irecv", 0);

  /* "Cython/cwipi.pyx":882
 *         """
 *         global current_cpl
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         cwipi_wait_irecv(self.name, request)
 * 
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":883
 *         global current_cpl
 *         current_cpl = self.name
 *         cwipi_wait_irecv(self.name, request)             # <<<<<<<<<<<<<<
 * 
 *         current_cpl = ""
 */
  cwipi_wait_irecv(__pyx_v_self->name, __pyx_v_request);

  /* "Cython/cwipi.pyx":885
 *         cwipi_wait_irecv(self.name, request)
 * 
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 885, __pyx_L1_error)

  /* "Cython/cwipi.pyx":876
 * 
 * 
 *     def wait_irecv(self,             # <<<<<<<<<<<<<<
 *                     int request):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.wait_irecv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":888
 * 
 * 
 *     def get_n_located_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get number of located points
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_35get_n_located_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_34get_n_located_points[] = "\n        Get number of located points\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_35get_n_located_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_located_points (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_34get_n_located_points(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_34get_n_located_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_n_located_points", 0);

  /* "Cython/cwipi.pyx":892
 *         Get number of located points
 *         """
 *         return cwipi_get_n_located_points(self.name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(cwipi_get_n_located_points(__pyx_v_self->name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":888
 * 
 * 
 *     def get_n_located_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get number of located points
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_n_located_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":895
 * 
 * 
 *     def get_n_not_located_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get number of not located points
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_37get_n_not_located_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_36get_n_not_located_points[] = "\n        Get number of not located points\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_37get_n_not_located_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_not_located_points (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_36get_n_not_located_points(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_36get_n_not_located_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_n_not_located_points", 0);

  /* "Cython/cwipi.pyx":899
 *         Get number of not located points
 *         """
 *         return cwipi_get_n_not_located_points(self.name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(cwipi_get_n_not_located_points(__pyx_v_self->name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":895
 * 
 * 
 *     def get_n_not_located_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get number of not located points
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_n_not_located_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":902
 * 
 * 
 *     def get_not_located_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get not located points
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_39get_not_located_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_38get_not_located_points[] = "\n        Get not located points\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_39get_not_located_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_not_located_points (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_38get_not_located_points(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_38get_not_located_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_not_located_points", 0);

  /* "Cython/cwipi.pyx":906
 *         Get not located points
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_not_located_points(self.name)
 *         if (dims == 0):
 */
  import_array();

  /* "Cython/cwipi.pyx":907
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_not_located_points(self.name)             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = ((npy_intp)cwipi_get_n_not_located_points(__pyx_v_self->name));

  /* "Cython/cwipi.pyx":908
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_not_located_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":909
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_not_located_points(self.name)
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":908
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_not_located_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":911
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":914
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 *                                                  <void *> cwipi_get_not_located_points(self.name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)cwipi_get_not_located_points(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":902
 * 
 * 
 *     def get_not_located_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get not located points
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_not_located_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":917
 * 
 * 
 *     def get_located_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get not located points
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_41get_located_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_40get_located_points[] = "\n        Get not located points\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_41get_located_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_located_points (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_40get_located_points(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_40get_located_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_located_points", 0);

  /* "Cython/cwipi.pyx":921
 *         Get not located points
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_located_points(self.name)
 *         if (dims == 0):
 */
  import_array();

  /* "Cython/cwipi.pyx":922
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_located_points(self.name)             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = ((npy_intp)cwipi_get_n_located_points(__pyx_v_self->name));

  /* "Cython/cwipi.pyx":923
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_located_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":924
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_located_points(self.name)
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":923
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_located_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":926
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":929
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 *                                                  <void *> cwipi_get_located_points(self.name))             # <<<<<<<<<<<<<<
 * 
 *     def get_distant_location(self):
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)cwipi_get_located_points(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 926, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":917
 * 
 * 
 *     def get_located_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get not located points
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_located_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":931
 *                                                  <void *> cwipi_get_located_points(self.name))
 * 
 *     def get_distant_location(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant point location
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_43get_distant_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_42get_distant_location[] = "\n        Get distant point location \n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_43get_distant_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_location (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_42get_distant_location(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_42get_distant_location(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_distant_location", 0);

  /* "Cython/cwipi.pyx":935
 *         Get distant point location
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):
 */
  import_array();

  /* "Cython/cwipi.pyx":936
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = ((npy_intp)cwipi_get_n_distant_points(__pyx_v_self->name));

  /* "Cython/cwipi.pyx":937
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":938
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":937
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":940
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":943
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 *                                                  <void *> cwipi_get_distant_location(self.name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)cwipi_get_distant_location(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":931
 *                                                  <void *> cwipi_get_located_points(self.name))
 * 
 *     def get_distant_location(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant point location
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_distant_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":946
 * 
 * 
 *     def get_distant_distance(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points distance to location element
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_45get_distant_distance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_44get_distant_distance[] = "\n        Get distant points distance to location element\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_45get_distant_distance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_distance (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_44get_distant_distance(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_44get_distant_distance(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_distant_distance", 0);

  /* "Cython/cwipi.pyx":950
 *         Get distant points distance to location element
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):
 */
  import_array();

  /* "Cython/cwipi.pyx":951
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = ((npy_intp)cwipi_get_n_distant_points(__pyx_v_self->name));

  /* "Cython/cwipi.pyx":952
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":953
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":952
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":955
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_FLOAT,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":958
 *                                                  &dims,
 *                                                  np.NPY_FLOAT,
 *                                                  <void *> cwipi_get_distant_distance(self.name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_FLOAT, ((void *)cwipi_get_distant_distance(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":946
 * 
 * 
 *     def get_distant_distance(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points distance to location element
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_distant_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":961
 * 
 * 
 *     def get_distant_coordinates(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points coordinates
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_47get_distant_coordinates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_46get_distant_coordinates[] = "\n        Get distant points coordinates\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_47get_distant_coordinates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_coordinates (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_46get_distant_coordinates(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_46get_distant_coordinates(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_distant_coordinates", 0);

  /* "Cython/cwipi.pyx":965
 *         Get distant points coordinates
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = 3 * <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):
 */
  import_array();

  /* "Cython/cwipi.pyx":966
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims = 3 * <np.npy_intp> cwipi_get_n_distant_points(self.name)             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = (3 * ((npy_intp)cwipi_get_n_distant_points(__pyx_v_self->name)));

  /* "Cython/cwipi.pyx":967
 *         np.import_array()
 *         cdef np.npy_intp dims = 3 * <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":968
 *         cdef np.npy_intp dims = 3 * <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":967
 *         np.import_array()
 *         cdef np.npy_intp dims = 3 * <np.npy_intp> cwipi_get_n_distant_points(self.name)
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":970
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_DOUBLE,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":973
 *                                                  &dims,
 *                                                  np.NPY_DOUBLE,
 *                                                  <void *> cwipi_get_distant_coordinates(self.name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_DOUBLE, ((void *)cwipi_get_distant_coordinates(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":961
 * 
 * 
 *     def get_distant_coordinates(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points coordinates
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_distant_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":976
 * 
 * 
 *     def get_distant_barycentric_coordinates_index(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points barycentric coordinates index
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_49get_distant_barycentric_coordinates_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_48get_distant_barycentric_coordinates_index[] = "\n        Get distant points barycentric coordinates index\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_49get_distant_barycentric_coordinates_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_barycentric_coordinates_index (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_48get_distant_barycentric_coordinates_index(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_48get_distant_barycentric_coordinates_index(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_distant_barycentric_coordinates_index", 0);

  /* "Cython/cwipi.pyx":980
 *         Get distant points barycentric coordinates index
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1
 *         if (dims == 0):
 */
  import_array();

  /* "Cython/cwipi.pyx":981
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = (((npy_intp)cwipi_get_n_distant_points(__pyx_v_self->name)) + 1);

  /* "Cython/cwipi.pyx":982
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":983
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":982
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":985
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":988
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 *                                                  <void *> cwipi_get_distant_barycentric_coordinates_index(self.name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)cwipi_get_distant_barycentric_coordinates_index(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":976
 * 
 * 
 *     def get_distant_barycentric_coordinates_index(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points barycentric coordinates index
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_distant_barycentric_coordinates_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":991
 * 
 * 
 *     def get_distant_barycentric_coordinates(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points barycentric coordinates
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_51get_distant_barycentric_coordinates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_50get_distant_barycentric_coordinates[] = "\n        Get distant points barycentric coordinates\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_51get_distant_barycentric_coordinates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_barycentric_coordinates (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_50get_distant_barycentric_coordinates(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_50get_distant_barycentric_coordinates(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims1;
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_distant_barycentric_coordinates", 0);

  /* "Cython/cwipi.pyx":995
 *         Get distant points barycentric coordinates
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims1 = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1
 *         cdef np.npy_intp dims = <np.npy_intp> (cwipi_get_distant_barycentric_coordinates_index(self.name)[dims1])
 */
  import_array();

  /* "Cython/cwipi.pyx":996
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims1 = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = <np.npy_intp> (cwipi_get_distant_barycentric_coordinates_index(self.name)[dims1])
 *         if (dims == 0):
 */
  __pyx_v_dims1 = (((npy_intp)cwipi_get_n_distant_points(__pyx_v_self->name)) + 1);

  /* "Cython/cwipi.pyx":997
 *         np.import_array()
 *         cdef np.npy_intp dims1 = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1
 *         cdef np.npy_intp dims = <np.npy_intp> (cwipi_get_distant_barycentric_coordinates_index(self.name)[dims1])             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = ((npy_intp)(cwipi_get_distant_barycentric_coordinates_index(__pyx_v_self->name)[__pyx_v_dims1]));

  /* "Cython/cwipi.pyx":998
 *         cdef np.npy_intp dims1 = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1
 *         cdef np.npy_intp dims = <np.npy_intp> (cwipi_get_distant_barycentric_coordinates_index(self.name)[dims1])
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":999
 *         cdef np.npy_intp dims = <np.npy_intp> (cwipi_get_distant_barycentric_coordinates_index(self.name)[dims1])
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":998
 *         cdef np.npy_intp dims1 = <np.npy_intp> cwipi_get_n_distant_points(self.name) + 1
 *         cdef np.npy_intp dims = <np.npy_intp> (cwipi_get_distant_barycentric_coordinates_index(self.name)[dims1])
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":1001
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_DOUBLE,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":1004
 *                                                  &dims,
 *                                                  np.NPY_DOUBLE,
 *                                                  <void *> cwipi_get_distant_barycentric_coordinates(self.name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_DOUBLE, ((void *)cwipi_get_distant_barycentric_coordinates(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":991
 * 
 * 
 *     def get_distant_barycentric_coordinates(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points barycentric coordinates
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_distant_barycentric_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":1007
 * 
 * 
 *     def get_n_distant_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get number of distant points
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_53get_n_distant_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_52get_n_distant_points[] = "\n        Get number of distant points\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_53get_n_distant_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_distant_points (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_52get_n_distant_points(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_52get_n_distant_points(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_n_distant_points", 0);

  /* "Cython/cwipi.pyx":1011
 *         Get number of distant points
 *         """
 *         return  cwipi_get_n_distant_points(self.name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(cwipi_get_n_distant_points(__pyx_v_self->name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":1007
 * 
 * 
 *     def get_n_distant_points(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get number of distant points
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_n_distant_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":1014
 * 
 * 
 *     def get_n_distant_ranks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get number of distant ranks
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_55get_n_distant_ranks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_54get_n_distant_ranks[] = "\n        Get number of distant ranks\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_55get_n_distant_ranks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_distant_ranks (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_54get_n_distant_ranks(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_54get_n_distant_ranks(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_n_distant_ranks", 0);

  /* "Cython/cwipi.pyx":1018
 *         Get number of distant ranks
 *         """
 *         return  cwipi_get_n_distant_ranks(self.name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(cwipi_get_n_distant_ranks(__pyx_v_self->name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":1014
 * 
 * 
 *     def get_n_distant_ranks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get number of distant ranks
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_n_distant_ranks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":1021
 * 
 * 
 *     def get_distant_distribution(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points distribution on distant ranks
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_57get_distant_distribution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_56get_distant_distribution[] = "\n        Get distant points distribution on distant ranks\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_57get_distant_distribution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distant_distribution (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_56get_distant_distribution(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_56get_distant_distribution(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_distant_distribution", 0);

  /* "Cython/cwipi.pyx":1025
 *         Get distant points distribution on distant ranks
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1
 *         if (dims == 0):
 */
  import_array();

  /* "Cython/cwipi.pyx":1026
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = (((npy_intp)cwipi_get_n_distant_ranks(__pyx_v_self->name)) + 1);

  /* "Cython/cwipi.pyx":1027
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1028
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":1027
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":1030
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":1033
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 *                                                  <void *> cwipi_get_distant_distribution(self.name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)cwipi_get_distant_distribution(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":1021
 * 
 * 
 *     def get_distant_distribution(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get distant points distribution on distant ranks
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_distant_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":1036
 * 
 * 
 *     def get_located_points_distribution(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get located points distribution on distant ranks
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_59get_located_points_distribution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_58get_located_points_distribution[] = "\n        Get located points distribution on distant ranks\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_59get_located_points_distribution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_located_points_distribution (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_58get_located_points_distribution(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_58get_located_points_distribution(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_located_points_distribution", 0);

  /* "Cython/cwipi.pyx":1040
 *         Get located points distribution on distant ranks
 *         """
 *         np.import_array()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1
 *         if (dims == 0):
 */
  import_array();

  /* "Cython/cwipi.pyx":1041
 *         """
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1             # <<<<<<<<<<<<<<
 *         if (dims == 0):
 *             return None
 */
  __pyx_v_dims = (((npy_intp)cwipi_get_n_distant_ranks(__pyx_v_self->name)) + 1);

  /* "Cython/cwipi.pyx":1042
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  __pyx_t_1 = ((__pyx_v_dims == 0) != 0);
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1043
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1
 *         if (dims == 0):
 *             return None             # <<<<<<<<<<<<<<
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "Cython/cwipi.pyx":1042
 *         np.import_array()
 *         cdef np.npy_intp dims = <np.npy_intp> cwipi_get_n_distant_ranks(self.name) + 1
 *         if (dims == 0):             # <<<<<<<<<<<<<<
 *             return None
 *         else :
 */
  }

  /* "Cython/cwipi.pyx":1045
 *             return None
 *         else :
 *             return np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "Cython/cwipi.pyx":1048
 *                                                  &dims,
 *                                                  np.NPY_INT32,
 *                                                  <void *> cwipi_get_located_points_distribution(self.name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)cwipi_get_located_points_distribution(__pyx_v_self->name))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "Cython/cwipi.pyx":1036
 * 
 * 
 *     def get_located_points_distribution(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get located points distribution on distant ranks
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.get_located_points_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":1051
 * 
 * 
 *     def set_interpolation_function(self, f):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_61set_interpolation_function(PyObject *__pyx_v_self, PyObject *__pyx_v_f); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_60set_interpolation_function[] = "\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_61set_interpolation_function(PyObject *__pyx_v_self, PyObject *__pyx_v_f) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_interpolation_function (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_60set_interpolation_function(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self), ((PyObject *)__pyx_v_f));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_60set_interpolation_function(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self, PyObject *__pyx_v_f) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("set_interpolation_function", 0);

  /* "Cython/cwipi.pyx":1056
 *         global current_cpl
 *         global interp_f
 *         current_cpl = self.name             # <<<<<<<<<<<<<<
 *         interp_f[self.name]=f
 *         cwipi_set_interpolation_function(self.name, callback)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_t_1) < 0) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":1057
 *         global interp_f
 *         current_cpl = self.name
 *         interp_f[self.name]=f             # <<<<<<<<<<<<<<
 *         cwipi_set_interpolation_function(self.name, callback)
 *         current_cpl = ""
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_interp_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_2, __pyx_v_f) < 0)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Cython/cwipi.pyx":1058
 *         current_cpl = self.name
 *         interp_f[self.name]=f
 *         cwipi_set_interpolation_function(self.name, callback)             # <<<<<<<<<<<<<<
 *         current_cpl = ""
 * 
 */
  cwipi_set_interpolation_function(__pyx_v_self->name, __pyx_f_6Cython_5cwipi_callback);

  /* "Cython/cwipi.pyx":1059
 *         interp_f[self.name]=f
 *         cwipi_set_interpolation_function(self.name, callback)
 *         current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 1059, __pyx_L1_error)

  /* "Cython/cwipi.pyx":1051
 * 
 * 
 *     def set_interpolation_function(self, f):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.set_interpolation_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":1062
 * 
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_63getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6Cython_5cwipi_8Coupling_62getName[] = "\n        ";
static PyObject *__pyx_pw_6Cython_5cwipi_8Coupling_63getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_6Cython_5cwipi_8Coupling_62getName(((struct __pyx_obj_6Cython_5cwipi_Coupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6Cython_5cwipi_8Coupling_62getName(struct __pyx_obj_6Cython_5cwipi_Coupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "Cython/cwipi.pyx":1065
 *         """
 *         """
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Cython/cwipi.pyx":1062
 * 
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Cython.cwipi.Coupling.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cython/cwipi.pyx":1083
 * 
 * 
 * cdef void callback(int entities_dim,             # <<<<<<<<<<<<<<
 *                    int n_local_vertex,
 *                    int n_local_element,
 */

static void __pyx_f_6Cython_5cwipi_callback(int __pyx_v_entities_dim, int __pyx_v_n_local_vertex, int __pyx_v_n_local_element, int __pyx_v_n_local_polhyedra, int __pyx_v_n_distant_point, double *__pyx_v_local_coordinates, int *__pyx_v_local_connectivity_index, int *__pyx_v_local_connectivity, int *__pyx_v_local_polyhedra_face_index, int *__pyx_v_local_polyhedra_cell_to_face_connectivity, int *__pyx_v_local_polyhedra_face_connectivity_index, int *__pyx_v_local_polyhedra_face_connectivity, double *__pyx_v_distant_points_coordinates, int *__pyx_v_distant_points_location, float *__pyx_v_distant_points_distance, int *__pyx_v_distant_points_barycentric_coordinates_index, double *__pyx_v_distant_points_barycentric_coordinates, int __pyx_v_stride, cwipi_solver_type_t __pyx_v_solver_type, void *__pyx_v_local_field, void *__pyx_v_distant_field) {
  npy_intp __pyx_v_dims;
  PyObject *__pyx_v_local_coordinates_a = NULL;
  PyObject *__pyx_v_local_connectivity_index_a = NULL;
  PyObject *__pyx_v_local_connectivity_a = NULL;
  PyObject *__pyx_v_local_polyhedra_face_index_a = NULL;
  PyObject *__pyx_v_local_polyhedra_cell_to_face_a = NULL;
  PyObject *__pyx_v_local_polyhedra_face_connectivity_index_a = NULL;
  PyObject *__pyx_v_local_polyhedra_face_connectivity_a = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_distant_points_location_a = NULL;
  PyObject *__pyx_v_distant_points_coordinates_a = NULL;
  PyObject *__pyx_v_distant_points_distance_a = NULL;
  PyObject *__pyx_v_distant_points_barycentric_coordinates_index_a = NULL;
  PyObject *__pyx_v_distant_points_barycentric_coordinates_a = NULL;
  PyObject *__pyx_v_local_field_a = NULL;
  PyObject *__pyx_v_distant_field_a = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  npy_intp __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("callback", 0);

  /* "Cython/cwipi.pyx":1108
 *     global current_cpl
 *     global inter_f
 *     np.import_array()             # <<<<<<<<<<<<<<
 * 
 *     cdef np.npy_intp dims = 0
 */
  import_array();

  /* "Cython/cwipi.pyx":1110
 *     np.import_array()
 * 
 *     cdef np.npy_intp dims = 0             # <<<<<<<<<<<<<<
 * 
 *     if (local_coordinates == NULL or n_local_vertex == 0):
 */
  __pyx_v_dims = 0;

  /* "Cython/cwipi.pyx":1112
 *     cdef np.npy_intp dims = 0
 * 
 *     if (local_coordinates == NULL or n_local_vertex == 0):             # <<<<<<<<<<<<<<
 *         local_coordinates_a = None
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_local_coordinates == NULL) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_n_local_vertex == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1113
 * 
 *     if (local_coordinates == NULL or n_local_vertex == 0):
 *         local_coordinates_a = None             # <<<<<<<<<<<<<<
 *     else:
 *         dims = <np.npy_intp>(3 * n_local_vertex)
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_local_coordinates_a = Py_None;

    /* "Cython/cwipi.pyx":1112
 *     cdef np.npy_intp dims = 0
 * 
 *     if (local_coordinates == NULL or n_local_vertex == 0):             # <<<<<<<<<<<<<<
 *         local_coordinates_a = None
 *     else:
 */
    goto __pyx_L3;
  }

  /* "Cython/cwipi.pyx":1115
 *         local_coordinates_a = None
 *     else:
 *         dims = <np.npy_intp>(3 * n_local_vertex)             # <<<<<<<<<<<<<<
 *         local_coordinates_a = np.PyArray_SimpleNewFromData(1,
 *                                                        &dims,
 */
  /*else*/ {
    __pyx_v_dims = ((npy_intp)(3 * __pyx_v_n_local_vertex));

    /* "Cython/cwipi.pyx":1116
 *     else:
 *         dims = <np.npy_intp>(3 * n_local_vertex)
 *         local_coordinates_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                        &dims,
 *                                                        np.NPY_DOUBLE,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_DOUBLE, ((void *)__pyx_v_local_coordinates)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_local_coordinates_a = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "Cython/cwipi.pyx":1121
 *                                                        <void *> local_coordinates)
 * 
 *     if (local_connectivity_index == NULL or n_local_element == 0):             # <<<<<<<<<<<<<<
 *         local_connectivity_index_a = None
 *         local_connectivity_a = None
 */
  __pyx_t_2 = ((__pyx_v_local_connectivity_index == NULL) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_n_local_element == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1122
 * 
 *     if (local_connectivity_index == NULL or n_local_element == 0):
 *         local_connectivity_index_a = None             # <<<<<<<<<<<<<<
 *         local_connectivity_a = None
 *     else:
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_local_connectivity_index_a = Py_None;

    /* "Cython/cwipi.pyx":1123
 *     if (local_connectivity_index == NULL or n_local_element == 0):
 *         local_connectivity_index_a = None
 *         local_connectivity_a = None             # <<<<<<<<<<<<<<
 *     else:
 *         dims = <np.npy_intp>(n_local_element + 1)
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_local_connectivity_a = Py_None;

    /* "Cython/cwipi.pyx":1121
 *                                                        <void *> local_coordinates)
 * 
 *     if (local_connectivity_index == NULL or n_local_element == 0):             # <<<<<<<<<<<<<<
 *         local_connectivity_index_a = None
 *         local_connectivity_a = None
 */
    goto __pyx_L6;
  }

  /* "Cython/cwipi.pyx":1125
 *         local_connectivity_a = None
 *     else:
 *         dims = <np.npy_intp>(n_local_element + 1)             # <<<<<<<<<<<<<<
 *         local_connectivity_index_a = np.PyArray_SimpleNewFromData(1,
 *                                                                   &dims,
 */
  /*else*/ {
    __pyx_v_dims = ((npy_intp)(__pyx_v_n_local_element + 1));

    /* "Cython/cwipi.pyx":1126
 *     else:
 *         dims = <np.npy_intp>(n_local_element + 1)
 *         local_connectivity_index_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                   &dims,
 *                                                                   np.NPY_INT32,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)__pyx_v_local_connectivity_index)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_local_connectivity_index_a = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "Cython/cwipi.pyx":1130
 *                                                                   np.NPY_INT32,
 *                                                                   <void *> local_connectivity_index)
 *         dims = <np.npy_intp>(local_connectivity_index[n_local_element])             # <<<<<<<<<<<<<<
 *         local_connectivity_a = np.PyArray_SimpleNewFromData(1,
 *                                                             &dims,
 */
    __pyx_v_dims = ((npy_intp)(__pyx_v_local_connectivity_index[__pyx_v_n_local_element]));

    /* "Cython/cwipi.pyx":1131
 *                                                                   <void *> local_connectivity_index)
 *         dims = <np.npy_intp>(local_connectivity_index[n_local_element])
 *         local_connectivity_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                             &dims,
 *                                                             np.NPY_INT32,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)__pyx_v_local_connectivity)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_local_connectivity_a = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L6:;

  /* "Cython/cwipi.pyx":1136
 *                                                             <void *> local_connectivity)
 * 
 *     if (local_polyhedra_face_index == NULL or n_local_polhyedra == 0):             # <<<<<<<<<<<<<<
 *         local_polyhedra_face_index_a = None
 *         local_polyhedra_cell_to_face_a = None
 */
  __pyx_t_2 = ((__pyx_v_local_polyhedra_face_index == NULL) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_n_local_polhyedra == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1137
 * 
 *     if (local_polyhedra_face_index == NULL or n_local_polhyedra == 0):
 *         local_polyhedra_face_index_a = None             # <<<<<<<<<<<<<<
 *         local_polyhedra_cell_to_face_a = None
 *         local_polyhedra_face_connectivity_index_a = None
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_local_polyhedra_face_index_a = Py_None;

    /* "Cython/cwipi.pyx":1138
 *     if (local_polyhedra_face_index == NULL or n_local_polhyedra == 0):
 *         local_polyhedra_face_index_a = None
 *         local_polyhedra_cell_to_face_a = None             # <<<<<<<<<<<<<<
 *         local_polyhedra_face_connectivity_index_a = None
 *         local_polyhedra_face_connectivity_a = None
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_local_polyhedra_cell_to_face_a = Py_None;

    /* "Cython/cwipi.pyx":1139
 *         local_polyhedra_face_index_a = None
 *         local_polyhedra_cell_to_face_a = None
 *         local_polyhedra_face_connectivity_index_a = None             # <<<<<<<<<<<<<<
 *         local_polyhedra_face_connectivity_a = None
 *     else:
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_local_polyhedra_face_connectivity_index_a = Py_None;

    /* "Cython/cwipi.pyx":1140
 *         local_polyhedra_cell_to_face_a = None
 *         local_polyhedra_face_connectivity_index_a = None
 *         local_polyhedra_face_connectivity_a = None             # <<<<<<<<<<<<<<
 *     else:
 *         dims = <np.npy_intp>(n_local_polhyedra+1)
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_local_polyhedra_face_connectivity_a = Py_None;

    /* "Cython/cwipi.pyx":1136
 *                                                             <void *> local_connectivity)
 * 
 *     if (local_polyhedra_face_index == NULL or n_local_polhyedra == 0):             # <<<<<<<<<<<<<<
 *         local_polyhedra_face_index_a = None
 *         local_polyhedra_cell_to_face_a = None
 */
    goto __pyx_L9;
  }

  /* "Cython/cwipi.pyx":1142
 *         local_polyhedra_face_connectivity_a = None
 *     else:
 *         dims = <np.npy_intp>(n_local_polhyedra+1)             # <<<<<<<<<<<<<<
 *         local_polyhedra_face_index_a = np.PyArray_SimpleNewFromData(1,
 *                                                                     &dims,
 */
  /*else*/ {
    __pyx_v_dims = ((npy_intp)(__pyx_v_n_local_polhyedra + 1));

    /* "Cython/cwipi.pyx":1143
 *     else:
 *         dims = <np.npy_intp>(n_local_polhyedra+1)
 *         local_polyhedra_face_index_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                     &dims,
 *                                                                     np.NPY_INT32,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)__pyx_v_local_polyhedra_face_index)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_local_polyhedra_face_index_a = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "Cython/cwipi.pyx":1148
 *                                                                     <void *> local_polyhedra_face_index)
 * 
 *         dims = <np.npy_intp>(local_polyhedra_face_index[n_local_polhyedra])             # <<<<<<<<<<<<<<
 *         local_polyhedra_cell_to_face_a = np.PyArray_SimpleNewFromData(1,
 *                                                           &dims,
 */
    __pyx_v_dims = ((npy_intp)(__pyx_v_local_polyhedra_face_index[__pyx_v_n_local_polhyedra]));

    /* "Cython/cwipi.pyx":1149
 * 
 *         dims = <np.npy_intp>(local_polyhedra_face_index[n_local_polhyedra])
 *         local_polyhedra_cell_to_face_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                           &dims,
 *                                                           np.NPY_INT32,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)__pyx_v_local_polyhedra_cell_to_face_connectivity)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_local_polyhedra_cell_to_face_a = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "Cython/cwipi.pyx":1154
 *                                                           <void *> local_polyhedra_cell_to_face_connectivity)
 * 
 *         dims = <np.npy_intp> (0)             # <<<<<<<<<<<<<<
 *         for i in local_polyhedra_cell_to_face_a:
 *             dims = <np.npy_intp> max(dims, i)
 */
    __pyx_v_dims = ((npy_intp)0);

    /* "Cython/cwipi.pyx":1155
 * 
 *         dims = <np.npy_intp> (0)
 *         for i in local_polyhedra_cell_to_face_a:             # <<<<<<<<<<<<<<
 *             dims = <np.npy_intp> max(dims, i)
 *         dims = dims + 1
 */
    if (likely(PyList_CheckExact(__pyx_v_local_polyhedra_cell_to_face_a)) || PyTuple_CheckExact(__pyx_v_local_polyhedra_cell_to_face_a)) {
      __pyx_t_3 = __pyx_v_local_polyhedra_cell_to_face_a; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_local_polyhedra_cell_to_face_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1155, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1155, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1155, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1155, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "Cython/cwipi.pyx":1156
 *         dims = <np.npy_intp> (0)
 *         for i in local_polyhedra_cell_to_face_a:
 *             dims = <np.npy_intp> max(dims, i)             # <<<<<<<<<<<<<<
 *         dims = dims + 1
 *         local_polyhedra_face_connectivity_index_a = np.PyArray_SimpleNewFromData(1,
 */
      __Pyx_INCREF(__pyx_v_i);
      __pyx_t_6 = __pyx_v_i;
      __pyx_t_7 = __pyx_v_dims;
      __pyx_t_9 = __Pyx_PyInt_From_Py_intptr_t(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyObject_RichCompare(__pyx_t_6, __pyx_t_9, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1156, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1156, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_1) {
        __Pyx_INCREF(__pyx_t_6);
        __pyx_t_8 = __pyx_t_6;
      } else {
        __pyx_t_10 = __Pyx_PyInt_From_Py_intptr_t(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1156, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = __pyx_t_10;
        __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_8); if (unlikely((__pyx_t_7 == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(0, 1156, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_dims = ((npy_intp)__pyx_t_7);

      /* "Cython/cwipi.pyx":1155
 * 
 *         dims = <np.npy_intp> (0)
 *         for i in local_polyhedra_cell_to_face_a:             # <<<<<<<<<<<<<<
 *             dims = <np.npy_intp> max(dims, i)
 *         dims = dims + 1
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "Cython/cwipi.pyx":1157
 *         for i in local_polyhedra_cell_to_face_a:
 *             dims = <np.npy_intp> max(dims, i)
 *         dims = dims + 1             # <<<<<<<<<<<<<<
 *         local_polyhedra_face_connectivity_index_a = np.PyArray_SimpleNewFromData(1,
 *                                                                                  &dims,
 */
    __pyx_v_dims = (__pyx_v_dims + 1);

    /* "Cython/cwipi.pyx":1158
 *             dims = <np.npy_intp> max(dims, i)
 *         dims = dims + 1
 *         local_polyhedra_face_connectivity_index_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                                  &dims,
 *                                                                                  np.NPY_INT32,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)__pyx_v_local_polyhedra_face_connectivity_index)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_local_polyhedra_face_connectivity_index_a = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "Cython/cwipi.pyx":1163
 *                                                                                  <void *> local_polyhedra_face_connectivity_index)
 * 
 *         dims = <np.npy_intp> (local_polyhedra_cell_to_face_connectivity[<int>dims -1])             # <<<<<<<<<<<<<<
 *         local_polyhedra_face_connectivity_a = np.PyArray_SimpleNewFromData(1,
 *                                                                           &dims,
 */
    __pyx_v_dims = ((npy_intp)(__pyx_v_local_polyhedra_cell_to_face_connectivity[(((int)__pyx_v_dims) - 1)]));

    /* "Cython/cwipi.pyx":1164
 * 
 *         dims = <np.npy_intp> (local_polyhedra_cell_to_face_connectivity[<int>dims -1])
 *         local_polyhedra_face_connectivity_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                           &dims,
 *                                                                           np.NPY_INT32,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)__pyx_v_local_polyhedra_face_connectivity)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_local_polyhedra_face_connectivity_a = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L9:;

  /* "Cython/cwipi.pyx":1169
 *                                                                          <void *> local_polyhedra_face_connectivity)
 * 
 *     if (distant_points_location == NULL or n_distant_point == 0):             # <<<<<<<<<<<<<<
 *         distant_points_location_a = None
 *         distant_points_coordinates_a = None
 */
  __pyx_t_2 = ((__pyx_v_distant_points_location == NULL) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_n_distant_point == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1170
 * 
 *     if (distant_points_location == NULL or n_distant_point == 0):
 *         distant_points_location_a = None             # <<<<<<<<<<<<<<
 *         distant_points_coordinates_a = None
 *         distant_points_distance_a = None
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_distant_points_location_a = Py_None;

    /* "Cython/cwipi.pyx":1171
 *     if (distant_points_location == NULL or n_distant_point == 0):
 *         distant_points_location_a = None
 *         distant_points_coordinates_a = None             # <<<<<<<<<<<<<<
 *         distant_points_distance_a = None
 *         distant_points_barycentric_coordinates_index_a = None
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_distant_points_coordinates_a = Py_None;

    /* "Cython/cwipi.pyx":1172
 *         distant_points_location_a = None
 *         distant_points_coordinates_a = None
 *         distant_points_distance_a = None             # <<<<<<<<<<<<<<
 *         distant_points_barycentric_coordinates_index_a = None
 *         distant_points_barycentric_coordinates_a = None
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_distant_points_distance_a = Py_None;

    /* "Cython/cwipi.pyx":1173
 *         distant_points_coordinates_a = None
 *         distant_points_distance_a = None
 *         distant_points_barycentric_coordinates_index_a = None             # <<<<<<<<<<<<<<
 *         distant_points_barycentric_coordinates_a = None
 *     else:
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_distant_points_barycentric_coordinates_index_a = Py_None;

    /* "Cython/cwipi.pyx":1174
 *         distant_points_distance_a = None
 *         distant_points_barycentric_coordinates_index_a = None
 *         distant_points_barycentric_coordinates_a = None             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_distant_points_barycentric_coordinates_a = Py_None;

    /* "Cython/cwipi.pyx":1169
 *                                                                          <void *> local_polyhedra_face_connectivity)
 * 
 *     if (distant_points_location == NULL or n_distant_point == 0):             # <<<<<<<<<<<<<<
 *         distant_points_location_a = None
 *         distant_points_coordinates_a = None
 */
    goto __pyx_L14;
  }

  /* "Cython/cwipi.pyx":1177
 *     else:
 * 
 *         dims = <np.npy_intp>(n_distant_point)             # <<<<<<<<<<<<<<
 *         distant_points_location_a = np.PyArray_SimpleNewFromData(1,
 *                                                                  &dims,
 */
  /*else*/ {
    __pyx_v_dims = ((npy_intp)__pyx_v_n_distant_point);

    /* "Cython/cwipi.pyx":1178
 * 
 *         dims = <np.npy_intp>(n_distant_point)
 *         distant_points_location_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                  &dims,
 *                                                                  np.NPY_INT,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT, ((void *)__pyx_v_distant_points_location)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_distant_points_location_a = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "Cython/cwipi.pyx":1183
 *                                                                  <void *> distant_points_location)
 * 
 *         distant_points_distance_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                  &dims,
 *                                                                  np.NPY_FLOAT,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_FLOAT, ((void *)__pyx_v_distant_points_distance)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_distant_points_distance_a = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "Cython/cwipi.pyx":1187
 *                                                                  np.NPY_FLOAT,
 *                                                                  <void *> distant_points_distance)
 *         dims = <np.npy_intp>(3 * n_distant_point)             # <<<<<<<<<<<<<<
 *         distant_points_coordinates_a = np.PyArray_SimpleNewFromData(1,
 *                                                                     &dims,
 */
    __pyx_v_dims = ((npy_intp)(3 * __pyx_v_n_distant_point));

    /* "Cython/cwipi.pyx":1188
 *                                                                  <void *> distant_points_distance)
 *         dims = <np.npy_intp>(3 * n_distant_point)
 *         distant_points_coordinates_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                     &dims,
 *                                                                     np.NPY_DOUBLE,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_DOUBLE, ((void *)__pyx_v_distant_points_coordinates)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_distant_points_coordinates_a = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "Cython/cwipi.pyx":1192
 *                                                                     np.NPY_DOUBLE,
 *                                                                     <void *> distant_points_coordinates)
 *         if (distant_points_barycentric_coordinates_index == NULL or distant_points_barycentric_coordinates == NULL):             # <<<<<<<<<<<<<<
 *             distant_points_barycentric_coordinates_index_a = None
 *             distant_points_barycentric_coordinates_a = None
 */
    __pyx_t_2 = ((__pyx_v_distant_points_barycentric_coordinates_index == NULL) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_distant_points_barycentric_coordinates == NULL) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_1) {

      /* "Cython/cwipi.pyx":1193
 *                                                                     <void *> distant_points_coordinates)
 *         if (distant_points_barycentric_coordinates_index == NULL or distant_points_barycentric_coordinates == NULL):
 *             distant_points_barycentric_coordinates_index_a = None             # <<<<<<<<<<<<<<
 *             distant_points_barycentric_coordinates_a = None
 *         else:
 */
      __Pyx_INCREF(Py_None);
      __pyx_v_distant_points_barycentric_coordinates_index_a = Py_None;

      /* "Cython/cwipi.pyx":1194
 *         if (distant_points_barycentric_coordinates_index == NULL or distant_points_barycentric_coordinates == NULL):
 *             distant_points_barycentric_coordinates_index_a = None
 *             distant_points_barycentric_coordinates_a = None             # <<<<<<<<<<<<<<
 *         else:
 *             dims = <np.npy_intp>(n_distant_point + 1)
 */
      __Pyx_INCREF(Py_None);
      __pyx_v_distant_points_barycentric_coordinates_a = Py_None;

      /* "Cython/cwipi.pyx":1192
 *                                                                     np.NPY_DOUBLE,
 *                                                                     <void *> distant_points_coordinates)
 *         if (distant_points_barycentric_coordinates_index == NULL or distant_points_barycentric_coordinates == NULL):             # <<<<<<<<<<<<<<
 *             distant_points_barycentric_coordinates_index_a = None
 *             distant_points_barycentric_coordinates_a = None
 */
      goto __pyx_L17;
    }

    /* "Cython/cwipi.pyx":1196
 *             distant_points_barycentric_coordinates_a = None
 *         else:
 *             dims = <np.npy_intp>(n_distant_point + 1)             # <<<<<<<<<<<<<<
 *             distant_points_barycentric_coordinates_index_a = np.PyArray_SimpleNewFromData(1,
 *                                                                                           &dims,
 */
    /*else*/ {
      __pyx_v_dims = ((npy_intp)(__pyx_v_n_distant_point + 1));

      /* "Cython/cwipi.pyx":1197
 *         else:
 *             dims = <np.npy_intp>(n_distant_point + 1)
 *             distant_points_barycentric_coordinates_index_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                                           &dims,
 *                                                                                           np.NPY_INT32,
 */
      __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, ((void *)__pyx_v_distant_points_barycentric_coordinates_index)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_distant_points_barycentric_coordinates_index_a = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "Cython/cwipi.pyx":1202
 *                                                                                           <void *>distant_points_barycentric_coordinates_index)
 * 
 *             dims = <np.npy_intp>(distant_points_barycentric_coordinates_index[n_distant_point])             # <<<<<<<<<<<<<<
 *             distant_points_barycentric_coordinates_a = np.PyArray_SimpleNewFromData(1,
 *                                                                                     &dims,
 */
      __pyx_v_dims = ((npy_intp)(__pyx_v_distant_points_barycentric_coordinates_index[__pyx_v_n_distant_point]));

      /* "Cython/cwipi.pyx":1203
 * 
 *             dims = <np.npy_intp>(distant_points_barycentric_coordinates_index[n_distant_point])
 *             distant_points_barycentric_coordinates_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                                                     &dims,
 *                                                                                     np.NPY_DOUBLE,
 */
      __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_DOUBLE, ((void *)__pyx_v_distant_points_barycentric_coordinates)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_distant_points_barycentric_coordinates_a = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L17:;
  }
  __pyx_L14:;

  /* "Cython/cwipi.pyx":1209
 * 
 * 
 *     dims = <np.npy_intp>(0)             # <<<<<<<<<<<<<<
 *     if (solver_type == SOLVER_CELL_CENTER):
 *         dims = <np.npy_intp> (n_local_element * stride)
 */
  __pyx_v_dims = ((npy_intp)0);

  /* "Cython/cwipi.pyx":1210
 * 
 *     dims = <np.npy_intp>(0)
 *     if (solver_type == SOLVER_CELL_CENTER):             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp> (n_local_element * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):
 */
  __pyx_t_3 = __Pyx_PyInt_From_cwipi_solver_type_t(__pyx_v_solver_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_SOLVER_CELL_CENTER); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1211
 *     dims = <np.npy_intp>(0)
 *     if (solver_type == SOLVER_CELL_CENTER):
 *         dims = <np.npy_intp> (n_local_element * stride)             # <<<<<<<<<<<<<<
 *     elif (solver_type == SOLVER_CELL_VERTEX):
 *         dims = <np.npy_intp> (n_local_vertex * stride)
 */
    __pyx_v_dims = ((npy_intp)(__pyx_v_n_local_element * __pyx_v_stride));

    /* "Cython/cwipi.pyx":1210
 * 
 *     dims = <np.npy_intp>(0)
 *     if (solver_type == SOLVER_CELL_CENTER):             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp> (n_local_element * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):
 */
    goto __pyx_L20;
  }

  /* "Cython/cwipi.pyx":1212
 *     if (solver_type == SOLVER_CELL_CENTER):
 *         dims = <np.npy_intp> (n_local_element * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp> (n_local_vertex * stride)
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_From_cwipi_solver_type_t(__pyx_v_solver_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_SOLVER_CELL_VERTEX); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1213
 *         dims = <np.npy_intp> (n_local_element * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):
 *         dims = <np.npy_intp> (n_local_vertex * stride)             # <<<<<<<<<<<<<<
 * 
 *     if (dims == 0 or local_field == NULL):
 */
    __pyx_v_dims = ((npy_intp)(__pyx_v_n_local_vertex * __pyx_v_stride));

    /* "Cython/cwipi.pyx":1212
 *     if (solver_type == SOLVER_CELL_CENTER):
 *         dims = <np.npy_intp> (n_local_element * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp> (n_local_vertex * stride)
 * 
 */
  }
  __pyx_L20:;

  /* "Cython/cwipi.pyx":1215
 *         dims = <np.npy_intp> (n_local_vertex * stride)
 * 
 *     if (dims == 0 or local_field == NULL):             # <<<<<<<<<<<<<<
 *         local_field_a = None
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_dims == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_local_field == NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L22_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1216
 * 
 *     if (dims == 0 or local_field == NULL):
 *         local_field_a = None             # <<<<<<<<<<<<<<
 *     else:
 *         local_field_a = np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_local_field_a = Py_None;

    /* "Cython/cwipi.pyx":1215
 *         dims = <np.npy_intp> (n_local_vertex * stride)
 * 
 *     if (dims == 0 or local_field == NULL):             # <<<<<<<<<<<<<<
 *         local_field_a = None
 *     else:
 */
    goto __pyx_L21;
  }

  /* "Cython/cwipi.pyx":1218
 *         local_field_a = None
 *     else:
 *         local_field_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                      &dims,
 *                                                      np.NPY_DOUBLE,
 */
  /*else*/ {

    /* "Cython/cwipi.pyx":1221
 *                                                      &dims,
 *                                                      np.NPY_DOUBLE,
 *                                                      <void *> local_field)             # <<<<<<<<<<<<<<
 * 
 *     dims = <np.npy_intp>(0)
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_DOUBLE, ((void *)__pyx_v_local_field)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_local_field_a = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L21:;

  /* "Cython/cwipi.pyx":1223
 *                                                      <void *> local_field)
 * 
 *     dims = <np.npy_intp>(0)             # <<<<<<<<<<<<<<
 *     if (solver_type == SOLVER_CELL_CENTER):
 *         dims = <np.npy_intp> (n_distant_point * stride)
 */
  __pyx_v_dims = ((npy_intp)0);

  /* "Cython/cwipi.pyx":1224
 * 
 *     dims = <np.npy_intp>(0)
 *     if (solver_type == SOLVER_CELL_CENTER):             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp> (n_distant_point * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):
 */
  __pyx_t_3 = __Pyx_PyInt_From_cwipi_solver_type_t(__pyx_v_solver_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_SOLVER_CELL_CENTER); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1225
 *     dims = <np.npy_intp>(0)
 *     if (solver_type == SOLVER_CELL_CENTER):
 *         dims = <np.npy_intp> (n_distant_point * stride)             # <<<<<<<<<<<<<<
 *     elif (solver_type == SOLVER_CELL_VERTEX):
 *         dims = <np.npy_intp> (n_distant_point * stride)
 */
    __pyx_v_dims = ((npy_intp)(__pyx_v_n_distant_point * __pyx_v_stride));

    /* "Cython/cwipi.pyx":1224
 * 
 *     dims = <np.npy_intp>(0)
 *     if (solver_type == SOLVER_CELL_CENTER):             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp> (n_distant_point * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):
 */
    goto __pyx_L24;
  }

  /* "Cython/cwipi.pyx":1226
 *     if (solver_type == SOLVER_CELL_CENTER):
 *         dims = <np.npy_intp> (n_distant_point * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp> (n_distant_point * stride)
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_From_cwipi_solver_type_t(__pyx_v_solver_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_SOLVER_CELL_VERTEX); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1227
 *         dims = <np.npy_intp> (n_distant_point * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):
 *         dims = <np.npy_intp> (n_distant_point * stride)             # <<<<<<<<<<<<<<
 * 
 *     if (dims == 0 or distant_field == NULL):
 */
    __pyx_v_dims = ((npy_intp)(__pyx_v_n_distant_point * __pyx_v_stride));

    /* "Cython/cwipi.pyx":1226
 *     if (solver_type == SOLVER_CELL_CENTER):
 *         dims = <np.npy_intp> (n_distant_point * stride)
 *     elif (solver_type == SOLVER_CELL_VERTEX):             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp> (n_distant_point * stride)
 * 
 */
  }
  __pyx_L24:;

  /* "Cython/cwipi.pyx":1229
 *         dims = <np.npy_intp> (n_distant_point * stride)
 * 
 *     if (dims == 0 or distant_field == NULL):             # <<<<<<<<<<<<<<
 *         distant_field_a = None
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_dims == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_distant_field == NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L26_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Cython/cwipi.pyx":1230
 * 
 *     if (dims == 0 or distant_field == NULL):
 *         distant_field_a = None             # <<<<<<<<<<<<<<
 *     else:
 *         distant_field_a = np.PyArray_SimpleNewFromData(1,
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_distant_field_a = Py_None;

    /* "Cython/cwipi.pyx":1229
 *         dims = <np.npy_intp> (n_distant_point * stride)
 * 
 *     if (dims == 0 or distant_field == NULL):             # <<<<<<<<<<<<<<
 *         distant_field_a = None
 *     else:
 */
    goto __pyx_L25;
  }

  /* "Cython/cwipi.pyx":1232
 *         distant_field_a = None
 *     else:
 *         distant_field_a = np.PyArray_SimpleNewFromData(1,             # <<<<<<<<<<<<<<
 *                                                        &dims,
 *                                                        np.NPY_DOUBLE,
 */
  /*else*/ {

    /* "Cython/cwipi.pyx":1235
 *                                                        &dims,
 *                                                        np.NPY_DOUBLE,
 *                                                        <void *> distant_field)             # <<<<<<<<<<<<<<
 * 
 *     (<object>interp_f[current_cpl])(entities_dim,
 */
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_DOUBLE, ((void *)__pyx_v_distant_field)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_distant_field_a = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L25:;

  /* "Cython/cwipi.pyx":1237
 *                                                        <void *> distant_field)
 * 
 *     (<object>interp_f[current_cpl])(entities_dim,             # <<<<<<<<<<<<<<
 *                                     n_local_vertex,
 *                                     n_local_element,
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_interp_f); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_current_cpl); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = PyObject_GetItem(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_entities_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "Cython/cwipi.pyx":1238
 * 
 *     (<object>interp_f[current_cpl])(entities_dim,
 *                                     n_local_vertex,             # <<<<<<<<<<<<<<
 *                                     n_local_element,
 *                                     n_local_polhyedra,
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_n_local_vertex); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Cython/cwipi.pyx":1239
 *     (<object>interp_f[current_cpl])(entities_dim,
 *                                     n_local_vertex,
 *                                     n_local_element,             # <<<<<<<<<<<<<<
 *                                     n_local_polhyedra,
 *                                     n_distant_point,
 */
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_n_local_element); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "Cython/cwipi.pyx":1240
 *                                     n_local_vertex,
 *                                     n_local_element,
 *                                     n_local_polhyedra,             # <<<<<<<<<<<<<<
 *                                     n_distant_point,
 *                                     local_coordinates_a,
 */
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n_local_polhyedra); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "Cython/cwipi.pyx":1241
 *                                     n_local_element,
 *                                     n_local_polhyedra,
 *                                     n_distant_point,             # <<<<<<<<<<<<<<
 *                                     local_coordinates_a,
 *                                     local_connectivity_index_a,
 */
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_n_distant_point); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "Cython/cwipi.pyx":1254
 *                                     distant_points_barycentric_coordinates_index_a,
 *                                     distant_points_barycentric_coordinates_a,
 *                                     stride,             # <<<<<<<<<<<<<<
 *                                     solver_type,
 *                                     local_field_a,
 */
  __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_stride); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "Cython/cwipi.pyx":1255
 *                                     distant_points_barycentric_coordinates_a,
 *                                     stride,
 *                                     solver_type,             # <<<<<<<<<<<<<<
 *                                     local_field_a,
 *                                     distant_field_a)
 */
  __pyx_t_14 = __Pyx_PyInt_From_cwipi_solver_type_t(__pyx_v_solver_type); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);

  /* "Cython/cwipi.pyx":1257
 *                                     solver_type,
 *                                     local_field_a,
 *                                     distant_field_a)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_t_10));
  __pyx_t_15 = __pyx_t_10; __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_16 = PyTuple_New(21+__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (__pyx_t_10) {
    __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_10); __pyx_t_10 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_4, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_4, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_16, 3+__pyx_t_4, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_16, 4+__pyx_t_4, __pyx_t_12);
  __Pyx_INCREF(__pyx_v_local_coordinates_a);
  __Pyx_GIVEREF(__pyx_v_local_coordinates_a);
  PyTuple_SET_ITEM(__pyx_t_16, 5+__pyx_t_4, __pyx_v_local_coordinates_a);
  __Pyx_INCREF(__pyx_v_local_connectivity_index_a);
  __Pyx_GIVEREF(__pyx_v_local_connectivity_index_a);
  PyTuple_SET_ITEM(__pyx_t_16, 6+__pyx_t_4, __pyx_v_local_connectivity_index_a);
  __Pyx_INCREF(__pyx_v_local_connectivity_a);
  __Pyx_GIVEREF(__pyx_v_local_connectivity_a);
  PyTuple_SET_ITEM(__pyx_t_16, 7+__pyx_t_4, __pyx_v_local_connectivity_a);
  __Pyx_INCREF(__pyx_v_local_polyhedra_face_index_a);
  __Pyx_GIVEREF(__pyx_v_local_polyhedra_face_index_a);
  PyTuple_SET_ITEM(__pyx_t_16, 8+__pyx_t_4, __pyx_v_local_polyhedra_face_index_a);
  __Pyx_INCREF(__pyx_v_local_polyhedra_cell_to_face_a);
  __Pyx_GIVEREF(__pyx_v_local_polyhedra_cell_to_face_a);
  PyTuple_SET_ITEM(__pyx_t_16, 9+__pyx_t_4, __pyx_v_local_polyhedra_cell_to_face_a);
  __Pyx_INCREF(__pyx_v_local_polyhedra_face_connectivity_index_a);
  __Pyx_GIVEREF(__pyx_v_local_polyhedra_face_connectivity_index_a);
  PyTuple_SET_ITEM(__pyx_t_16, 10+__pyx_t_4, __pyx_v_local_polyhedra_face_connectivity_index_a);
  __Pyx_INCREF(__pyx_v_local_polyhedra_face_connectivity_a);
  __Pyx_GIVEREF(__pyx_v_local_polyhedra_face_connectivity_a);
  PyTuple_SET_ITEM(__pyx_t_16, 11+__pyx_t_4, __pyx_v_local_polyhedra_face_connectivity_a);
  __Pyx_INCREF(__pyx_v_distant_points_coordinates_a);
  __Pyx_GIVEREF(__pyx_v_distant_points_coordinates_a);
  PyTuple_SET_ITEM(__pyx_t_16, 12+__pyx_t_4, __pyx_v_distant_points_coordinates_a);
  __Pyx_INCREF(__pyx_v_distant_points_location_a);
  __Pyx_GIVEREF(__pyx_v_distant_points_location_a);
  PyTuple_SET_ITEM(__pyx_t_16, 13+__pyx_t_4, __pyx_v_distant_points_location_a);
  __Pyx_INCREF(__pyx_v_distant_points_distance_a);
  __Pyx_GIVEREF(__pyx_v_distant_points_distance_a);
  PyTuple_SET_ITEM(__pyx_t_16, 14+__pyx_t_4, __pyx_v_distant_points_distance_a);
  __Pyx_INCREF(__pyx_v_distant_points_barycentric_coordinates_index_a);
  __Pyx_GIVEREF(__pyx_v_distant_points_barycentric_coordinates_index_a);
  PyTuple_SET_ITEM(__pyx_t_16, 15+__pyx_t_4, __pyx_v_distant_points_barycentric_coordinates_index_a);
  __Pyx_INCREF(__pyx_v_distant_points_barycentric_coordinates_a);
  __Pyx_GIVEREF(__pyx_v_distant_points_barycentric_coordinates_a);
  PyTuple_SET_ITEM(__pyx_t_16, 16+__pyx_t_4, __pyx_v_distant_points_barycentric_coordinates_a);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_16, 17+__pyx_t_4, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_16, 18+__pyx_t_4, __pyx_t_14);
  __Pyx_INCREF(__pyx_v_local_field_a);
  __Pyx_GIVEREF(__pyx_v_local_field_a);
  PyTuple_SET_ITEM(__pyx_t_16, 19+__pyx_t_4, __pyx_v_local_field_a);
  __Pyx_INCREF(__pyx_v_distant_field_a);
  __Pyx_GIVEREF(__pyx_v_distant_field_a);
  PyTuple_SET_ITEM(__pyx_t_16, 20+__pyx_t_4, __pyx_v_distant_field_a);
  __pyx_t_6 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Cython/cwipi.pyx":1083
 * 
 * 
 * cdef void callback(int entities_dim,             # <<<<<<<<<<<<<<
 *                    int n_local_vertex,
 *                    int n_local_element,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_WriteUnraisable("Cython.cwipi.callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_local_coordinates_a);
  __Pyx_XDECREF(__pyx_v_local_connectivity_index_a);
  __Pyx_XDECREF(__pyx_v_local_connectivity_a);
  __Pyx_XDECREF(__pyx_v_local_polyhedra_face_index_a);
  __Pyx_XDECREF(__pyx_v_local_polyhedra_cell_to_face_a);
  __Pyx_XDECREF(__pyx_v_local_polyhedra_face_connectivity_index_a);
  __Pyx_XDECREF(__pyx_v_local_polyhedra_face_connectivity_a);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_distant_points_location_a);
  __Pyx_XDECREF(__pyx_v_distant_points_coordinates_a);
  __Pyx_XDECREF(__pyx_v_distant_points_distance_a);
  __Pyx_XDECREF(__pyx_v_distant_points_barycentric_coordinates_index_a);
  __Pyx_XDECREF(__pyx_v_distant_points_barycentric_coordinates_a);
  __Pyx_XDECREF(__pyx_v_local_field_a);
  __Pyx_XDECREF(__pyx_v_distant_field_a);
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 218, __pyx_L1_error)

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 222, __pyx_L1_error)

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 259, __pyx_L1_error)

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 278, __pyx_L1_error)
      break;
    }

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 796, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 799, __pyx_L1_error)

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 803, __pyx_L1_error)

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 823, __pyx_L1_error)

        /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6Cython_5cwipi_Coupling(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6Cython_5cwipi_Coupling(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6Cython_5cwipi_8Coupling_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6Cython_5cwipi_Coupling[] = {
  {"define_mesh", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_5define_mesh, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_8Coupling_4define_mesh},
  {"set_points_to_locate", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_7set_points_to_locate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_8Coupling_6set_points_to_locate},
  {"add_polyhedra", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_9add_polyhedra, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_8Coupling_8add_polyhedra},
  {"locate", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_11locate, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_10locate},
  {"set_location_index", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_13set_location_index, METH_O, __pyx_doc_6Cython_5cwipi_8Coupling_12set_location_index},
  {"load_location", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_15load_location, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_14load_location},
  {"save_location", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_17save_location, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_16save_location},
  {"open_location_file", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_19open_location_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_8Coupling_18open_location_file},
  {"close_location_file", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_21close_location_file, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_20close_location_file},
  {"update_location", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_23update_location, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_22update_location},
  {"exchange", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_25exchange, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_8Coupling_24exchange},
  {"issend", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_27issend, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_8Coupling_26issend},
  {"irecv", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_29irecv, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6Cython_5cwipi_8Coupling_28irecv},
  {"wait_issend", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_31wait_issend, METH_O, __pyx_doc_6Cython_5cwipi_8Coupling_30wait_issend},
  {"wait_irecv", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_33wait_irecv, METH_O, __pyx_doc_6Cython_5cwipi_8Coupling_32wait_irecv},
  {"get_n_located_points", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_35get_n_located_points, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_34get_n_located_points},
  {"get_n_not_located_points", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_37get_n_not_located_points, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_36get_n_not_located_points},
  {"get_not_located_points", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_39get_not_located_points, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_38get_not_located_points},
  {"get_located_points", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_41get_located_points, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_40get_located_points},
  {"get_distant_location", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_43get_distant_location, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_42get_distant_location},
  {"get_distant_distance", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_45get_distant_distance, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_44get_distant_distance},
  {"get_distant_coordinates", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_47get_distant_coordinates, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_46get_distant_coordinates},
  {"get_distant_barycentric_coordinates_index", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_49get_distant_barycentric_coordinates_index, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_48get_distant_barycentric_coordinates_index},
  {"get_distant_barycentric_coordinates", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_51get_distant_barycentric_coordinates, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_50get_distant_barycentric_coordinates},
  {"get_n_distant_points", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_53get_n_distant_points, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_52get_n_distant_points},
  {"get_n_distant_ranks", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_55get_n_distant_ranks, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_54get_n_distant_ranks},
  {"get_distant_distribution", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_57get_distant_distribution, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_56get_distant_distribution},
  {"get_located_points_distribution", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_59get_located_points_distribution, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_58get_located_points_distribution},
  {"set_interpolation_function", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_61set_interpolation_function, METH_O, __pyx_doc_6Cython_5cwipi_8Coupling_60set_interpolation_function},
  {"getName", (PyCFunction)__pyx_pw_6Cython_5cwipi_8Coupling_63getName, METH_NOARGS, __pyx_doc_6Cython_5cwipi_8Coupling_62getName},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6Cython_5cwipi_Coupling = {
  PyVarObject_HEAD_INIT(0, 0)
  "Cython.cwipi.Coupling", /*tp_name*/
  sizeof(struct __pyx_obj_6Cython_5cwipi_Coupling), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6Cython_5cwipi_Coupling, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Coupling\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6Cython_5cwipi_Coupling, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6Cython_5cwipi_8Coupling_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6Cython_5cwipi_Coupling, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "cwipi",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_BASIC_INFO, __pyx_k_BASIC_INFO, sizeof(__pyx_k_BASIC_INFO), 0, 0, 1, 1},
  {&__pyx_n_s_COUPLING_PARALLEL_WITHOUT_PARTIT, __pyx_k_COUPLING_PARALLEL_WITHOUT_PARTIT, sizeof(__pyx_k_COUPLING_PARALLEL_WITHOUT_PARTIT), 0, 0, 1, 1},
  {&__pyx_n_s_COUPLING_PARALLEL_WITH_PARTITION, __pyx_k_COUPLING_PARALLEL_WITH_PARTITION, sizeof(__pyx_k_COUPLING_PARALLEL_WITH_PARTITION), 0, 0, 1, 1},
  {&__pyx_n_s_COUPLING_SEQUENTIAL, __pyx_k_COUPLING_SEQUENTIAL, sizeof(__pyx_k_COUPLING_SEQUENTIAL), 0, 0, 1, 1},
  {&__pyx_n_s_CYCLIC_MESH, __pyx_k_CYCLIC_MESH, sizeof(__pyx_k_CYCLIC_MESH), 0, 0, 1, 1},
  {&__pyx_n_s_Cython_cwipi, __pyx_k_Cython_cwipi, sizeof(__pyx_k_Cython_cwipi), 0, 0, 1, 1},
  {&__pyx_n_s_DISTANT_MESH_INFO, __pyx_k_DISTANT_MESH_INFO, sizeof(__pyx_k_DISTANT_MESH_INFO), 0, 0, 1, 1},
  {&__pyx_n_s_EXCHANGE_BAD_RECEIVING, __pyx_k_EXCHANGE_BAD_RECEIVING, sizeof(__pyx_k_EXCHANGE_BAD_RECEIVING), 0, 0, 1, 1},
  {&__pyx_n_s_EXCHANGE_OK, __pyx_k_EXCHANGE_OK, sizeof(__pyx_k_EXCHANGE_OK), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_MOBILE_MESH, __pyx_k_MOBILE_MESH, sizeof(__pyx_k_MOBILE_MESH), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SOLVER_CELL_CENTER, __pyx_k_SOLVER_CELL_CENTER, sizeof(__pyx_k_SOLVER_CELL_CENTER), 0, 0, 1, 1},
  {&__pyx_n_s_SOLVER_CELL_VERTEX, __pyx_k_SOLVER_CELL_VERTEX, sizeof(__pyx_k_SOLVER_CELL_VERTEX), 0, 0, 1, 1},
  {&__pyx_n_s_STATIC_MESH, __pyx_k_STATIC_MESH, sizeof(__pyx_k_STATIC_MESH), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_add_local_double_control_paramet, __pyx_k_add_local_double_control_paramet, sizeof(__pyx_k_add_local_double_control_paramet), 0, 0, 1, 1},
  {&__pyx_n_s_add_local_int_control_parameter, __pyx_k_add_local_int_control_parameter, sizeof(__pyx_k_add_local_int_control_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_add_local_string_control_paramet, __pyx_k_add_local_string_control_paramet, sizeof(__pyx_k_add_local_string_control_paramet), 0, 0, 1, 1},
  {&__pyx_n_s_application_comm, __pyx_k_application_comm, sizeof(__pyx_k_application_comm), 0, 0, 1, 1},
  {&__pyx_n_s_application_name, __pyx_k_application_name, sizeof(__pyx_k_application_name), 0, 0, 1, 1},
  {&__pyx_n_s_c_common_comm, __pyx_k_c_common_comm, sizeof(__pyx_k_c_common_comm), 0, 0, 1, 1},
  {&__pyx_n_s_c_file, __pyx_k_c_file, sizeof(__pyx_k_c_file), 0, 0, 1, 1},
  {&__pyx_n_s_c_parameters, __pyx_k_c_parameters, sizeof(__pyx_k_c_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_cell_to_face_connectivity, __pyx_k_cell_to_face_connectivity, sizeof(__pyx_k_cell_to_face_connectivity), 0, 0, 1, 1},
  {&__pyx_n_s_common_comm, __pyx_k_common_comm, sizeof(__pyx_k_common_comm), 0, 0, 1, 1},
  {&__pyx_n_s_connectivity, __pyx_k_connectivity, sizeof(__pyx_k_connectivity), 0, 0, 1, 1},
  {&__pyx_n_s_connectivity_index, __pyx_k_connectivity_index, sizeof(__pyx_k_connectivity_index), 0, 0, 1, 1},
  {&__pyx_n_s_coordinates, __pyx_k_coordinates, sizeof(__pyx_k_coordinates), 0, 0, 1, 1},
  {&__pyx_n_s_coupled_application, __pyx_k_coupled_application, sizeof(__pyx_k_coupled_application), 0, 0, 1, 1},
  {&__pyx_n_s_coupling_name, __pyx_k_coupling_name, sizeof(__pyx_k_coupling_name), 0, 0, 1, 1},
  {&__pyx_n_s_coupling_type, __pyx_k_coupling_type, sizeof(__pyx_k_coupling_type), 0, 0, 1, 1},
  {&__pyx_n_s_current_cpl, __pyx_k_current_cpl, sizeof(__pyx_k_current_cpl), 0, 0, 1, 1},
  {&__pyx_n_s_d_parameters, __pyx_k_d_parameters, sizeof(__pyx_k_d_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_delete_local_double_control_para, __pyx_k_delete_local_double_control_para, sizeof(__pyx_k_delete_local_double_control_para), 0, 0, 1, 1},
  {&__pyx_n_s_delete_local_int_control_paramet, __pyx_k_delete_local_int_control_paramet, sizeof(__pyx_k_delete_local_int_control_paramet), 0, 0, 1, 1},
  {&__pyx_n_s_delete_local_string_control_para, __pyx_k_delete_local_string_control_para, sizeof(__pyx_k_delete_local_string_control_para), 0, 0, 1, 1},
  {&__pyx_n_s_dump_application_properties, __pyx_k_dump_application_properties, sizeof(__pyx_k_dump_application_properties), 0, 0, 1, 1},
  {&__pyx_n_s_entitiesDim, __pyx_k_entitiesDim, sizeof(__pyx_k_entitiesDim), 0, 0, 1, 1},
  {&__pyx_n_s_exchange_name, __pyx_k_exchange_name, sizeof(__pyx_k_exchange_name), 0, 0, 1, 1},
  {&__pyx_n_s_face_connectivity, __pyx_k_face_connectivity, sizeof(__pyx_k_face_connectivity), 0, 0, 1, 1},
  {&__pyx_n_s_face_connectivity_index, __pyx_k_face_connectivity_index, sizeof(__pyx_k_face_connectivity_index), 0, 0, 1, 1},
  {&__pyx_n_s_face_index, __pyx_k_face_index, sizeof(__pyx_k_face_index), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_finalize, __pyx_k_finalize, sizeof(__pyx_k_finalize), 0, 0, 1, 1},
  {&__pyx_n_s_get_distant_double_control_param, __pyx_k_get_distant_double_control_param, sizeof(__pyx_k_get_distant_double_control_param), 0, 0, 1, 1},
  {&__pyx_n_s_get_distant_int_control_paramete, __pyx_k_get_distant_int_control_paramete, sizeof(__pyx_k_get_distant_int_control_paramete), 0, 0, 1, 1},
  {&__pyx_n_s_get_distant_string_control_param, __pyx_k_get_distant_string_control_param, sizeof(__pyx_k_get_distant_string_control_param), 0, 0, 1, 1},
  {&__pyx_n_s_get_list_double_parameter, __pyx_k_get_list_double_parameter, sizeof(__pyx_k_get_list_double_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_get_list_int_parameter, __pyx_k_get_list_int_parameter, sizeof(__pyx_k_get_list_int_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_get_list_string_parameter, __pyx_k_get_list_string_parameter, sizeof(__pyx_k_get_list_string_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_get_local_double_control_paramet, __pyx_k_get_local_double_control_paramet, sizeof(__pyx_k_get_local_double_control_paramet), 0, 0, 1, 1},
  {&__pyx_n_s_get_local_int_control_parameter, __pyx_k_get_local_int_control_parameter, sizeof(__pyx_k_get_local_int_control_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_get_local_string_control_paramet, __pyx_k_get_local_string_control_paramet, sizeof(__pyx_k_get_local_string_control_paramet), 0, 0, 1, 1},
  {&__pyx_n_s_has_double_parameter, __pyx_k_has_double_parameter, sizeof(__pyx_k_has_double_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_has_int_parameter, __pyx_k_has_int_parameter, sizeof(__pyx_k_has_int_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_has_string_parameter, __pyx_k_has_string_parameter, sizeof(__pyx_k_has_string_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_i_parameters, __pyx_k_i_parameters, sizeof(__pyx_k_i_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_initial_value, __pyx_k_initial_value, sizeof(__pyx_k_initial_value), 0, 0, 1, 1},
  {&__pyx_n_s_interp_f, __pyx_k_interp_f, sizeof(__pyx_k_interp_f), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_type, __pyx_k_mesh_type, sizeof(__pyx_k_mesh_type), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_n_element, __pyx_k_n_element, sizeof(__pyx_k_n_element), 0, 0, 1, 1},
  {&__pyx_n_s_n_face, __pyx_k_n_face, sizeof(__pyx_k_n_face), 0, 0, 1, 1},
  {&__pyx_n_s_n_not_located_points, __pyx_k_n_not_located_points, sizeof(__pyx_k_n_not_located_points), 0, 0, 1, 1},
  {&__pyx_n_s_n_parameters, __pyx_k_n_parameters, sizeof(__pyx_k_n_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_n_points, __pyx_k_n_points, sizeof(__pyx_k_n_points), 0, 0, 1, 1},
  {&__pyx_n_s_n_vertex, __pyx_k_n_vertex, sizeof(__pyx_k_n_vertex), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nb_locations, __pyx_k_nb_locations, sizeof(__pyx_k_nb_locations), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_output_format, __pyx_k_output_format, sizeof(__pyx_k_output_format), 0, 0, 1, 1},
  {&__pyx_n_s_output_format_option, __pyx_k_output_format_option, sizeof(__pyx_k_output_format_option), 0, 0, 1, 1},
  {&__pyx_n_s_output_frequency, __pyx_k_output_frequency, sizeof(__pyx_k_output_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_output_listing, __pyx_k_output_listing, sizeof(__pyx_k_output_listing), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_receiving_field, __pyx_k_receiving_field, sizeof(__pyx_k_receiving_field), 0, 0, 1, 1},
  {&__pyx_n_s_receiving_field_name, __pyx_k_receiving_field_name, sizeof(__pyx_k_receiving_field_name), 0, 0, 1, 1},
  {&__pyx_n_s_request, __pyx_k_request, sizeof(__pyx_k_request), 0, 0, 1, 1},
  {&__pyx_n_s_s_parameters, __pyx_k_s_parameters, sizeof(__pyx_k_s_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_sending_field, __pyx_k_sending_field, sizeof(__pyx_k_sending_field), 0, 0, 1, 1},
  {&__pyx_n_s_sending_field_name, __pyx_k_sending_field_name, sizeof(__pyx_k_sending_field_name), 0, 0, 1, 1},
  {&__pyx_n_s_set_local_double_control_paramet, __pyx_k_set_local_double_control_paramet, sizeof(__pyx_k_set_local_double_control_paramet), 0, 0, 1, 1},
  {&__pyx_n_s_set_local_int_control_parameter, __pyx_k_set_local_int_control_parameter, sizeof(__pyx_k_set_local_int_control_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_set_local_string_control_paramet, __pyx_k_set_local_string_control_paramet, sizeof(__pyx_k_set_local_string_control_paramet), 0, 0, 1, 1},
  {&__pyx_n_s_set_output_listing, __pyx_k_set_output_listing, sizeof(__pyx_k_set_output_listing), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_solver_type, __pyx_k_solver_type, sizeof(__pyx_k_solver_type), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_k_stck3_stck3_2_equemera_workspac, sizeof(__pyx_k_stck3_stck3_2_equemera_workspac), 0, 0, 1, 0},
  {&__pyx_n_s_stride, __pyx_k_stride, sizeof(__pyx_k_stride), 0, 0, 1, 1},
  {&__pyx_n_s_synchronize_control_parameter, __pyx_k_synchronize_control_parameter, sizeof(__pyx_k_synchronize_control_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time_step, __pyx_k_time_step, sizeof(__pyx_k_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_time_value, __pyx_k_time_value, sizeof(__pyx_k_time_value), 0, 0, 1, 1},
  {&__pyx_n_s_tolerance, __pyx_k_tolerance, sizeof(__pyx_k_tolerance), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 464, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "Cython/cwipi.pyx":203
 * # ---------------
 * 
 * def  init(MPI.Comm common_comm, char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *      Initialize the cwipi library and create
 */
  __pyx_tuple__8 = PyTuple_Pack(4, __pyx_n_s_common_comm, __pyx_n_s_application_name, __pyx_n_s_c_common_comm, __pyx_n_s_application_comm); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_init, 203, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 203, __pyx_L1_error)

  /* "Cython/cwipi.pyx":224
 * 
 * 
 * def set_output_listing(file output_listing):             # <<<<<<<<<<<<<<
 *     """
 *     Set up the file used for the output listing
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_n_s_output_listing, __pyx_n_s_c_file); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_set_output_listing, 224, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 224, __pyx_L1_error)

  /* "Cython/cwipi.pyx":235
 * 
 * 
 * def dump_application_properties():             # <<<<<<<<<<<<<<
 *     """
 *     Dump application properties
 */
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_dump_application_properties, 235, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 235, __pyx_L1_error)

  /* "Cython/cwipi.pyx":242
 * 
 * 
 * def finalize():             # <<<<<<<<<<<<<<
 *     """
 *     Finalize
 */
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_finalize, 242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 242, __pyx_L1_error)

  /* "Cython/cwipi.pyx":252
 * # ------------------
 * 
 * def add_local_int_control_parameter(char* name, int initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a integer control parameter
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_initial_value); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_add_local_int_control_parameter, 252, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 252, __pyx_L1_error)

  /* "Cython/cwipi.pyx":263
 * 
 * 
 * def add_local_double_control_parameter(char* name, double initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a double control parameter
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_initial_value); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_add_local_double_control_paramet, 263, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 263, __pyx_L1_error)

  /* "Cython/cwipi.pyx":274
 * 
 * 
 * def add_local_string_control_parameter(char* name, char* initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a string control parameter
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_initial_value); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_add_local_string_control_paramet, 274, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 274, __pyx_L1_error)

  /* "Cython/cwipi.pyx":285
 * 
 * 
 * def set_local_int_control_parameter(char* name, int value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a integer control parameter
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_value); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_set_local_int_control_parameter, 285, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 285, __pyx_L1_error)

  /* "Cython/cwipi.pyx":296
 * 
 * 
 * def set_local_double_control_parameter(char* name, double value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a double control parameter
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_value); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_set_local_double_control_paramet, 296, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 296, __pyx_L1_error)

  /* "Cython/cwipi.pyx":307
 * 
 * 
 * def set_local_string_control_parameter(char* name, char* value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a string control parameter
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_value); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_set_local_string_control_paramet, 307, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 307, __pyx_L1_error)

  /* "Cython/cwipi.pyx":318
 * 
 * 
 * def get_local_int_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local integer control parameter
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_local_int_control_parameter, 318, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 318, __pyx_L1_error)

  /* "Cython/cwipi.pyx":328
 * 
 * 
 * def get_local_double_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local double control parameter
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_local_double_control_paramet, 328, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 328, __pyx_L1_error)

  /* "Cython/cwipi.pyx":338
 * 
 * 
 * def get_local_string_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local string control parameter
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_local_string_control_paramet, 338, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "Cython/cwipi.pyx":348
 * 
 * 
 * def delete_local_int_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local integer control parameter
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_delete_local_int_control_paramet, 348, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 348, __pyx_L1_error)

  /* "Cython/cwipi.pyx":358
 * 
 * 
 * def delete_local_double_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local double control parameter
 */
  __pyx_tuple__34 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_delete_local_double_control_para, 358, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "Cython/cwipi.pyx":368
 * 
 * 
 * def delete_local_string_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local string control parameter
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_delete_local_string_control_para, 368, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 368, __pyx_L1_error)

  /* "Cython/cwipi.pyx":378
 * 
 * 
 * def get_distant_int_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant integer control parameter
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_application_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_distant_int_control_paramete, 378, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 378, __pyx_L1_error)

  /* "Cython/cwipi.pyx":389
 * 
 * 
 * def get_distant_double_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant double control parameter
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_application_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_distant_double_control_param, 389, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 389, __pyx_L1_error)

  /* "Cython/cwipi.pyx":400
 * 
 * 
 * def get_distant_string_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant string control parameter
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_application_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_distant_string_control_param, 400, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 400, __pyx_L1_error)

  /* "Cython/cwipi.pyx":411
 * 
 * 
 * def has_int_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this int parameter ?
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_s_application_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_has_int_parameter, 411, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 411, __pyx_L1_error)

  /* "Cython/cwipi.pyx":424
 * 
 * 
 * def has_double_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this double parameter ?
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_application_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_has_double_parameter, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 424, __pyx_L1_error)

  /* "Cython/cwipi.pyx":437
 * 
 * 
 * def has_string_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this double parameter ?
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_n_s_application_name, __pyx_n_s_name); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_has_string_parameter, 437, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 437, __pyx_L1_error)

  /* "Cython/cwipi.pyx":450
 * 
 * 
 * def get_list_int_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return int parameters names
 */
  __pyx_tuple__50 = PyTuple_Pack(6, __pyx_n_s_application_name, __pyx_n_s_application_name, __pyx_n_s_i_parameters, __pyx_n_s_n_parameters, __pyx_n_s_c_parameters, __pyx_n_s_i); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_list_int_parameter, 450, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 450, __pyx_L1_error)

  /* "Cython/cwipi.pyx":473
 * 
 * 
 * def get_list_double_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return double parameters names
 */
  __pyx_tuple__52 = PyTuple_Pack(6, __pyx_n_s_application_name, __pyx_n_s_application_name, __pyx_n_s_d_parameters, __pyx_n_s_n_parameters, __pyx_n_s_c_parameters, __pyx_n_s_i); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_list_double_parameter, 473, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 473, __pyx_L1_error)

  /* "Cython/cwipi.pyx":495
 * 
 * 
 * def get_list_string_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return string parameters names
 */
  __pyx_tuple__54 = PyTuple_Pack(6, __pyx_n_s_application_name, __pyx_n_s_application_name, __pyx_n_s_s_parameters, __pyx_n_s_n_parameters, __pyx_n_s_c_parameters, __pyx_n_s_i); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_get_list_string_parameter, 495, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 495, __pyx_L1_error)

  /* "Cython/cwipi.pyx":518
 * 
 * 
 * def synchronize_control_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     Synchronize local control parameters with an other application.
 */
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_n_s_application_name, __pyx_n_s_application_name); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stck3_stck3_2_equemera_workspac, __pyx_n_s_synchronize_control_parameter, 518, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcwipi(void); /*proto*/
PyMODINIT_FUNC initcwipi(void)
#else
PyMODINIT_FUNC PyInit_cwipi(void); /*proto*/
PyMODINIT_FUNC PyInit_cwipi(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_cwipi(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cwipi", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_Cython__cwipi) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "Cython.cwipi")) {
      if (unlikely(PyDict_SetItemString(modules, "Cython.cwipi", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_6Cython_5cwipi_file = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "file", sizeof(PyFileObject), 0); if (unlikely(!__pyx_ptype_6Cython_5cwipi_file)) __PYX_ERR(0, 41, __pyx_L1_error)
  if (PyType_Ready(&__pyx_type_6Cython_5cwipi_Coupling) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
  __pyx_type_6Cython_5cwipi_Coupling.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6Cython_5cwipi_Coupling, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 532, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6Cython_5cwipi_8Coupling___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6Cython_5cwipi_8Coupling___init__.doc = __pyx_doc_6Cython_5cwipi_8Coupling___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6Cython_5cwipi_8Coupling___init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "Coupling", (PyObject *)&__pyx_type_6Cython_5cwipi_Coupling) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
  __pyx_ptype_6Cython_5cwipi_Coupling = &__pyx_type_6Cython_5cwipi_Coupling;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Status = __Pyx_ImportType("mpi4py.MPI", "Status", sizeof(struct PyMPIStatusObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Status)) __PYX_ERR(3, 28, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Datatype = __Pyx_ImportType("mpi4py.MPI", "Datatype", sizeof(struct PyMPIDatatypeObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Datatype)) __PYX_ERR(3, 35, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Request = __Pyx_ImportType("mpi4py.MPI", "Request", sizeof(struct PyMPIRequestObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Request)) __PYX_ERR(3, 42, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Prequest = __Pyx_ImportType("mpi4py.MPI", "Prequest", sizeof(struct PyMPIPrequestObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Prequest)) __PYX_ERR(3, 50, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Grequest = __Pyx_ImportType("mpi4py.MPI", "Grequest", sizeof(struct PyMPIGrequestObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Grequest)) __PYX_ERR(3, 56, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Message = __Pyx_ImportType("mpi4py.MPI", "Message", sizeof(struct PyMPIMessageObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Message)) __PYX_ERR(3, 62, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Op = __Pyx_ImportType("mpi4py.MPI", "Op", sizeof(struct PyMPIOpObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Op)) __PYX_ERR(3, 70, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Group = __Pyx_ImportType("mpi4py.MPI", "Group", sizeof(struct PyMPIGroupObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Group)) __PYX_ERR(3, 79, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Info = __Pyx_ImportType("mpi4py.MPI", "Info", sizeof(struct PyMPIInfoObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Info)) __PYX_ERR(3, 86, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Errhandler = __Pyx_ImportType("mpi4py.MPI", "Errhandler", sizeof(struct PyMPIErrhandlerObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Errhandler)) __PYX_ERR(3, 93, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Comm = __Pyx_ImportType("mpi4py.MPI", "Comm", sizeof(struct PyMPICommObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Comm)) __PYX_ERR(3, 100, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Intracomm = __Pyx_ImportType("mpi4py.MPI", "Intracomm", sizeof(struct PyMPIIntracommObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Intracomm)) __PYX_ERR(3, 107, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Topocomm = __Pyx_ImportType("mpi4py.MPI", "Topocomm", sizeof(struct PyMPITopocommObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Topocomm)) __PYX_ERR(3, 113, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Cartcomm = __Pyx_ImportType("mpi4py.MPI", "Cartcomm", sizeof(struct PyMPICartcommObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Cartcomm)) __PYX_ERR(3, 119, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Graphcomm = __Pyx_ImportType("mpi4py.MPI", "Graphcomm", sizeof(struct PyMPIGraphcommObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Graphcomm)) __PYX_ERR(3, 125, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Distgraphcomm = __Pyx_ImportType("mpi4py.MPI", "Distgraphcomm", sizeof(struct PyMPIDistgraphcommObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Distgraphcomm)) __PYX_ERR(3, 131, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Intercomm = __Pyx_ImportType("mpi4py.MPI", "Intercomm", sizeof(struct PyMPIIntercommObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Intercomm)) __PYX_ERR(3, 137, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Win = __Pyx_ImportType("mpi4py.MPI", "Win", sizeof(struct PyMPIWinObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_Win)) __PYX_ERR(3, 143, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_File = __Pyx_ImportType("mpi4py.MPI", "File", sizeof(struct PyMPIFileObject), 1); if (unlikely(!__pyx_ptype_6mpi4py_3MPI_File)) __PYX_ERR(3, 151, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "Cython/cwipi.pyx":22
 * cimport cython
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":33
 * from libc.stdlib cimport malloc, free
 * 
 * interp_f={}             # <<<<<<<<<<<<<<
 * current_cpl = ""
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_interp_f, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":34
 * 
 * interp_f={}
 * current_cpl = ""             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Python.h":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_cpl, __pyx_kp_s_) < 0) __PYX_ERR(0, 34, __pyx_L1_error)

  /* "Cython/cwipi.pyx":182
 *     void cwipi_close_location_file(char *coupling_name)
 * 
 * COUPLING_PARALLEL_WITH_PARTITIONING = CWIPI_COUPLING_PARALLEL_WITH_PARTITIONING             # <<<<<<<<<<<<<<
 * COUPLING_PARALLEL_WITHOUT_PARTITIONING = CWIPI_COUPLING_PARALLEL_WITHOUT_PARTITIONING
 * COUPLING_SEQUENTIAL = CWIPI_COUPLING_SEQUENTIAL
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_coupling_type_t(CWIPI_COUPLING_PARALLEL_WITH_PARTITIONING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COUPLING_PARALLEL_WITH_PARTITION, __pyx_t_1) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":183
 * 
 * COUPLING_PARALLEL_WITH_PARTITIONING = CWIPI_COUPLING_PARALLEL_WITH_PARTITIONING
 * COUPLING_PARALLEL_WITHOUT_PARTITIONING = CWIPI_COUPLING_PARALLEL_WITHOUT_PARTITIONING             # <<<<<<<<<<<<<<
 * COUPLING_SEQUENTIAL = CWIPI_COUPLING_SEQUENTIAL
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_coupling_type_t(CWIPI_COUPLING_PARALLEL_WITHOUT_PARTITIONING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COUPLING_PARALLEL_WITHOUT_PARTIT, __pyx_t_1) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":184
 * COUPLING_PARALLEL_WITH_PARTITIONING = CWIPI_COUPLING_PARALLEL_WITH_PARTITIONING
 * COUPLING_PARALLEL_WITHOUT_PARTITIONING = CWIPI_COUPLING_PARALLEL_WITHOUT_PARTITIONING
 * COUPLING_SEQUENTIAL = CWIPI_COUPLING_SEQUENTIAL             # <<<<<<<<<<<<<<
 * 
 * STATIC_MESH = CWIPI_STATIC_MESH
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_coupling_type_t(CWIPI_COUPLING_SEQUENTIAL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COUPLING_SEQUENTIAL, __pyx_t_1) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":186
 * COUPLING_SEQUENTIAL = CWIPI_COUPLING_SEQUENTIAL
 * 
 * STATIC_MESH = CWIPI_STATIC_MESH             # <<<<<<<<<<<<<<
 * MOBILE_MESH = CWIPI_MOBILE_MESH
 * CYCLIC_MESH = CWIPI_CYCLIC_MESH
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_mesh_type_t(CWIPI_STATIC_MESH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STATIC_MESH, __pyx_t_1) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":187
 * 
 * STATIC_MESH = CWIPI_STATIC_MESH
 * MOBILE_MESH = CWIPI_MOBILE_MESH             # <<<<<<<<<<<<<<
 * CYCLIC_MESH = CWIPI_CYCLIC_MESH
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_mesh_type_t(CWIPI_MOBILE_MESH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOBILE_MESH, __pyx_t_1) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":188
 * STATIC_MESH = CWIPI_STATIC_MESH
 * MOBILE_MESH = CWIPI_MOBILE_MESH
 * CYCLIC_MESH = CWIPI_CYCLIC_MESH             # <<<<<<<<<<<<<<
 * 
 * SOLVER_CELL_CENTER = CWIPI_SOLVER_CELL_CENTER
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_mesh_type_t(CWIPI_CYCLIC_MESH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CYCLIC_MESH, __pyx_t_1) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":190
 * CYCLIC_MESH = CWIPI_CYCLIC_MESH
 * 
 * SOLVER_CELL_CENTER = CWIPI_SOLVER_CELL_CENTER             # <<<<<<<<<<<<<<
 * SOLVER_CELL_VERTEX = CWIPI_SOLVER_CELL_VERTEX
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_solver_type_t(CWIPI_SOLVER_CELL_CENTER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SOLVER_CELL_CENTER, __pyx_t_1) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":191
 * 
 * SOLVER_CELL_CENTER = CWIPI_SOLVER_CELL_CENTER
 * SOLVER_CELL_VERTEX = CWIPI_SOLVER_CELL_VERTEX             # <<<<<<<<<<<<<<
 * 
 * BASIC_INFO = CWIPI_BASIC_INFO
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_solver_type_t(CWIPI_SOLVER_CELL_VERTEX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SOLVER_CELL_VERTEX, __pyx_t_1) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":193
 * SOLVER_CELL_VERTEX = CWIPI_SOLVER_CELL_VERTEX
 * 
 * BASIC_INFO = CWIPI_BASIC_INFO             # <<<<<<<<<<<<<<
 * DISTANT_MESH_INFO = CWIPI_DISTANT_MESH_INFO
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_located_point_info_t(CWIPI_BASIC_INFO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BASIC_INFO, __pyx_t_1) < 0) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":194
 * 
 * BASIC_INFO = CWIPI_BASIC_INFO
 * DISTANT_MESH_INFO = CWIPI_DISTANT_MESH_INFO             # <<<<<<<<<<<<<<
 * 
 * EXCHANGE_OK = CWIPI_EXCHANGE_OK
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_located_point_info_t(CWIPI_DISTANT_MESH_INFO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DISTANT_MESH_INFO, __pyx_t_1) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":196
 * DISTANT_MESH_INFO = CWIPI_DISTANT_MESH_INFO
 * 
 * EXCHANGE_OK = CWIPI_EXCHANGE_OK             # <<<<<<<<<<<<<<
 * EXCHANGE_BAD_RECEIVING = CWIPI_EXCHANGE_BAD_RECEIVING
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_exchange_status_t(CWIPI_EXCHANGE_OK); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXCHANGE_OK, __pyx_t_1) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":197
 * 
 * EXCHANGE_OK = CWIPI_EXCHANGE_OK
 * EXCHANGE_BAD_RECEIVING = CWIPI_EXCHANGE_BAD_RECEIVING             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __pyx_t_1 = __Pyx_PyInt_From_cwipi_exchange_status_t(CWIPI_EXCHANGE_BAD_RECEIVING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXCHANGE_BAD_RECEIVING, __pyx_t_1) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":203
 * # ---------------
 * 
 * def  init(MPI.Comm common_comm, char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *      Initialize the cwipi library and create
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_1init, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":224
 * 
 * 
 * def set_output_listing(file output_listing):             # <<<<<<<<<<<<<<
 *     """
 *     Set up the file used for the output listing
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_3set_output_listing, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_output_listing, __pyx_t_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":235
 * 
 * 
 * def dump_application_properties():             # <<<<<<<<<<<<<<
 *     """
 *     Dump application properties
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_5dump_application_properties, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dump_application_properties, __pyx_t_1) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":242
 * 
 * 
 * def finalize():             # <<<<<<<<<<<<<<
 *     """
 *     Finalize
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_7finalize, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_finalize, __pyx_t_1) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":252
 * # ------------------
 * 
 * def add_local_int_control_parameter(char* name, int initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a integer control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_9add_local_int_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_local_int_control_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":263
 * 
 * 
 * def add_local_double_control_parameter(char* name, double initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a double control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_11add_local_double_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_local_double_control_paramet, __pyx_t_1) < 0) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":274
 * 
 * 
 * def add_local_string_control_parameter(char* name, char* initial_value):             # <<<<<<<<<<<<<<
 *     """
 *     Add a string control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_13add_local_string_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_local_string_control_paramet, __pyx_t_1) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":285
 * 
 * 
 * def set_local_int_control_parameter(char* name, int value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a integer control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_15set_local_int_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_local_int_control_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":296
 * 
 * 
 * def set_local_double_control_parameter(char* name, double value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a double control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_17set_local_double_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_local_double_control_paramet, __pyx_t_1) < 0) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":307
 * 
 * 
 * def set_local_string_control_parameter(char* name, char* value):             # <<<<<<<<<<<<<<
 *     """
 *     Set a string control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_19set_local_string_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_local_string_control_paramet, __pyx_t_1) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":318
 * 
 * 
 * def get_local_int_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local integer control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_21get_local_int_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_local_int_control_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":328
 * 
 * 
 * def get_local_double_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local double control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_23get_local_double_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_local_double_control_paramet, __pyx_t_1) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":338
 * 
 * 
 * def get_local_string_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a local string control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_25get_local_string_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_local_string_control_paramet, __pyx_t_1) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":348
 * 
 * 
 * def delete_local_int_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local integer control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_27delete_local_int_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_delete_local_int_control_paramet, __pyx_t_1) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":358
 * 
 * 
 * def delete_local_double_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local double control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_29delete_local_double_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_delete_local_double_control_para, __pyx_t_1) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":368
 * 
 * 
 * def delete_local_string_control_parameter(char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Delete a local string control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_31delete_local_string_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_delete_local_string_control_para, __pyx_t_1) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":378
 * 
 * 
 * def get_distant_int_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant integer control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_33get_distant_int_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_distant_int_control_paramete, __pyx_t_1) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":389
 * 
 * 
 * def get_distant_double_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant double control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_35get_distant_double_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_distant_double_control_param, __pyx_t_1) < 0) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":400
 * 
 * 
 * def get_distant_string_control_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Get a distant string control parameter
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_37get_distant_string_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_distant_string_control_param, __pyx_t_1) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":411
 * 
 * 
 * def has_int_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this int parameter ?
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_39has_int_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_has_int_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":424
 * 
 * 
 * def has_double_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this double parameter ?
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_41has_double_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_has_double_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":437
 * 
 * 
 * def has_string_parameter(char* application_name, char* name):             # <<<<<<<<<<<<<<
 *     """
 *     Has this double parameter ?
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_43has_string_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_has_string_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":450
 * 
 * 
 * def get_list_int_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return int parameters names
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_45get_list_int_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_list_int_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":473
 * 
 * 
 * def get_list_double_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return double parameters names
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_47get_list_double_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_list_double_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":495
 * 
 * 
 * def get_list_string_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     return string parameters names
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_49get_list_string_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_list_string_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":518
 * 
 * 
 * def synchronize_control_parameter(char* application_name):             # <<<<<<<<<<<<<<
 *     """
 *     Synchronize local control parameters with an other application.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6Cython_5cwipi_51synchronize_control_parameter, NULL, __pyx_n_s_Cython_cwipi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_synchronize_control_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cython/cwipi.pyx":1
 * #-----------------------------------------------------------------------------             # <<<<<<<<<<<<<<
 * # This file is part of the CWIPI library.
 * #
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../../home/equemera/opt/moloch/intel/intelpython27/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init Cython.cwipi", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Cython.cwipi");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* BufferFormatCheck */
static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

/* PyErrFetchRestore */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* WriteUnraisableException */
    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
      static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* Import */
      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CodeObjectCache */
      static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
      #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


      /* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_coupling_type_t(cwipi_coupling_type_t value) {
    const cwipi_coupling_type_t neg_one = (cwipi_coupling_type_t) -1, const_zero = (cwipi_coupling_type_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(cwipi_coupling_type_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_coupling_type_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(cwipi_coupling_type_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(cwipi_coupling_type_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_coupling_type_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(cwipi_coupling_type_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_mesh_type_t(cwipi_mesh_type_t value) {
    const cwipi_mesh_type_t neg_one = (cwipi_mesh_type_t) -1, const_zero = (cwipi_mesh_type_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(cwipi_mesh_type_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_mesh_type_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(cwipi_mesh_type_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(cwipi_mesh_type_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_mesh_type_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(cwipi_mesh_type_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_solver_type_t(cwipi_solver_type_t value) {
    const cwipi_solver_type_t neg_one = (cwipi_solver_type_t) -1, const_zero = (cwipi_solver_type_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(cwipi_solver_type_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_solver_type_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(cwipi_solver_type_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(cwipi_solver_type_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_solver_type_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(cwipi_solver_type_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_located_point_info_t(cwipi_located_point_info_t value) {
    const cwipi_located_point_info_t neg_one = (cwipi_located_point_info_t) -1, const_zero = (cwipi_located_point_info_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(cwipi_located_point_info_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_located_point_info_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(cwipi_located_point_info_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(cwipi_located_point_info_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_located_point_info_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(cwipi_located_point_info_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_cwipi_exchange_status_t(cwipi_exchange_status_t value) {
    const cwipi_exchange_status_t neg_one = (cwipi_exchange_status_t) -1, const_zero = (cwipi_exchange_status_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(cwipi_exchange_status_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_exchange_status_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(cwipi_exchange_status_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(cwipi_exchange_status_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(cwipi_exchange_status_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(cwipi_exchange_status_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
      #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* None */
      #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
      #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* None */
      #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
      #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
      static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE cwipi_coupling_type_t __Pyx_PyInt_As_cwipi_coupling_type_t(PyObject *x) {
    const cwipi_coupling_type_t neg_one = (cwipi_coupling_type_t) -1, const_zero = (cwipi_coupling_type_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(cwipi_coupling_type_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (cwipi_coupling_type_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (cwipi_coupling_type_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(cwipi_coupling_type_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) >= 2 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) (((((cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(cwipi_coupling_type_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) >= 3 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) (((((((cwipi_coupling_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(cwipi_coupling_type_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) >= 4 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) (((((((((cwipi_coupling_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (cwipi_coupling_type_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(cwipi_coupling_type_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_coupling_type_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(cwipi_coupling_type_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_coupling_type_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (cwipi_coupling_type_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(cwipi_coupling_type_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) - 1 > 2 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) (((cwipi_coupling_type_t)-1)*(((((cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(cwipi_coupling_type_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) - 1 > 2 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) ((((((cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(cwipi_coupling_type_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) - 1 > 3 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) (((cwipi_coupling_type_t)-1)*(((((((cwipi_coupling_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(cwipi_coupling_type_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) - 1 > 3 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) ((((((((cwipi_coupling_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(cwipi_coupling_type_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) - 1 > 4 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) (((cwipi_coupling_type_t)-1)*(((((((((cwipi_coupling_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(cwipi_coupling_type_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_coupling_type_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_coupling_type_t) - 1 > 4 * PyLong_SHIFT) {
                            return (cwipi_coupling_type_t) ((((((((((cwipi_coupling_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_coupling_type_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(cwipi_coupling_type_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_coupling_type_t, long, PyLong_AsLong(x))
            } else if (sizeof(cwipi_coupling_type_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_coupling_type_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            cwipi_coupling_type_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (cwipi_coupling_type_t) -1;
        }
    } else {
        cwipi_coupling_type_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (cwipi_coupling_type_t) -1;
        val = __Pyx_PyInt_As_cwipi_coupling_type_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to cwipi_coupling_type_t");
    return (cwipi_coupling_type_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to cwipi_coupling_type_t");
    return (cwipi_coupling_type_t) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE cwipi_mesh_type_t __Pyx_PyInt_As_cwipi_mesh_type_t(PyObject *x) {
    const cwipi_mesh_type_t neg_one = (cwipi_mesh_type_t) -1, const_zero = (cwipi_mesh_type_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(cwipi_mesh_type_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (cwipi_mesh_type_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (cwipi_mesh_type_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(cwipi_mesh_type_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) >= 2 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) (((((cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(cwipi_mesh_type_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) >= 3 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) (((((((cwipi_mesh_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(cwipi_mesh_type_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) >= 4 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) (((((((((cwipi_mesh_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (cwipi_mesh_type_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(cwipi_mesh_type_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_mesh_type_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(cwipi_mesh_type_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_mesh_type_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (cwipi_mesh_type_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(cwipi_mesh_type_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) - 1 > 2 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) (((cwipi_mesh_type_t)-1)*(((((cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(cwipi_mesh_type_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) - 1 > 2 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) ((((((cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(cwipi_mesh_type_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) - 1 > 3 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) (((cwipi_mesh_type_t)-1)*(((((((cwipi_mesh_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(cwipi_mesh_type_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) - 1 > 3 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) ((((((((cwipi_mesh_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(cwipi_mesh_type_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) - 1 > 4 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) (((cwipi_mesh_type_t)-1)*(((((((((cwipi_mesh_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(cwipi_mesh_type_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_mesh_type_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_mesh_type_t) - 1 > 4 * PyLong_SHIFT) {
                            return (cwipi_mesh_type_t) ((((((((((cwipi_mesh_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_mesh_type_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(cwipi_mesh_type_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_mesh_type_t, long, PyLong_AsLong(x))
            } else if (sizeof(cwipi_mesh_type_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_mesh_type_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            cwipi_mesh_type_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (cwipi_mesh_type_t) -1;
        }
    } else {
        cwipi_mesh_type_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (cwipi_mesh_type_t) -1;
        val = __Pyx_PyInt_As_cwipi_mesh_type_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to cwipi_mesh_type_t");
    return (cwipi_mesh_type_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to cwipi_mesh_type_t");
    return (cwipi_mesh_type_t) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE cwipi_solver_type_t __Pyx_PyInt_As_cwipi_solver_type_t(PyObject *x) {
    const cwipi_solver_type_t neg_one = (cwipi_solver_type_t) -1, const_zero = (cwipi_solver_type_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(cwipi_solver_type_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (cwipi_solver_type_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (cwipi_solver_type_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(cwipi_solver_type_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) >= 2 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) (((((cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(cwipi_solver_type_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) >= 3 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) (((((((cwipi_solver_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(cwipi_solver_type_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) >= 4 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) (((((((((cwipi_solver_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (cwipi_solver_type_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(cwipi_solver_type_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_solver_type_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(cwipi_solver_type_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_solver_type_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (cwipi_solver_type_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(cwipi_solver_type_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) - 1 > 2 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) (((cwipi_solver_type_t)-1)*(((((cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(cwipi_solver_type_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) - 1 > 2 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) ((((((cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(cwipi_solver_type_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) - 1 > 3 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) (((cwipi_solver_type_t)-1)*(((((((cwipi_solver_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(cwipi_solver_type_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) - 1 > 3 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) ((((((((cwipi_solver_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(cwipi_solver_type_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) - 1 > 4 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) (((cwipi_solver_type_t)-1)*(((((((((cwipi_solver_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(cwipi_solver_type_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(cwipi_solver_type_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(cwipi_solver_type_t) - 1 > 4 * PyLong_SHIFT) {
                            return (cwipi_solver_type_t) ((((((((((cwipi_solver_type_t)digits[3]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[2]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[1]) << PyLong_SHIFT) | (cwipi_solver_type_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(cwipi_solver_type_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_solver_type_t, long, PyLong_AsLong(x))
            } else if (sizeof(cwipi_solver_type_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(cwipi_solver_type_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            cwipi_solver_type_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (cwipi_solver_type_t) -1;
        }
    } else {
        cwipi_solver_type_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (cwipi_solver_type_t) -1;
        val = __Pyx_PyInt_As_cwipi_solver_type_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to cwipi_solver_type_t");
    return (cwipi_solver_type_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to cwipi_solver_type_t");
    return (cwipi_solver_type_t) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (Py_intptr_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (Py_intptr_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(Py_intptr_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, long, PyLong_AsLong(x))
            } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            Py_intptr_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (Py_intptr_t) -1;
        }
    } else {
        Py_intptr_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (Py_intptr_t) -1;
        val = __Pyx_PyInt_As_Py_intptr_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to Py_intptr_t");
    return (Py_intptr_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to Py_intptr_t");
    return (Py_intptr_t) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
      static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
      #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
      #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
      static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
