# Import Section (Python) :
# ------------------------
import numpy     as NPY

# Import Section (Cython) :
# ------------------------
from libc.stdlib       cimport malloc, free
from cpython.ref       cimport PyObject, Py_INCREF, Py_DECREF, Py_XDECREF
from cpython.pycapsule cimport PyCapsule_New, PyCapsule_GetPointer, PyCapsule_IsValid, PyCapsule_GetName
cimport cython
cimport numpy as NPY

from mpi4py cimport MPI

# -----------------------------------------------------------------
cdef extern from "numpy/arrayobject.h":
  void PyArray_ENABLEFLAGS(NPY.ndarray arr, int flags)

# MANDATORY :
# ---------
NPY.import_array()

# PDM Specific type :
# -----------------

ctypedef @PYX_NPY_G_NUM@ npy_pdm_gnum_t
ctypedef @PYX_NPY_L_NUM@ npy_pdm_lnum_t
npy_pdm_gnum_dtype = @PYX_NPY_G_NUM_DTYPE@
pdm_has_parmetis   = @PYX_PDM_HAS_PARMETIS@
pdm_has_ptscotch   = @PYX_PDM_HAS_PTSCOTCH@
ctypedef @PYX_G_NUM@ PDM_g_num_t
ctypedef @PYX_L_NUM@ PDM_l_num_t

ctypedef enum PDM_g_num_npy_t:
  PDM_G_NUM_NPY_INT = @PDM_G_NUM_NPY_INT@

# -----------------------------------------------------------------

cdef extern from "pdm.h":
    ctypedef enum PDM_data_t:
        PDM_INT
        PDM_DOUBLE

    ctypedef enum PDM_stride_t:
        PDM_STRIDE_CST_INTERLACED
        PDM_STRIDE_CST_BLOCK
        PDM_STRIDE_VAR_INTERLACED

    ctypedef enum PDM_mesh_nature_t:
        PDM_MESH_NATURE_NODAL_SHARED
        PDM_MESH_NATURE_MESH_SETTED

    ctypedef enum PDM_mesh_entities_t:
        PDM_MESH_ENTITY_CELL
        PDM_MESH_ENTITY_FACE
        PDM_MESH_ENTITY_EDGE
        PDM_MESH_ENTITY_VERTEX

    ctypedef enum PDM_geometry_kind_t:
        PDM_GEOMETRY_KIND_VOLUMIC  = 0,
        PDM_GEOMETRY_KIND_SURFACIC = 1,
        PDM_GEOMETRY_KIND_RIDGE    = 2,
        PDM_GEOMETRY_KIND_CORNER   = 3,
        PDM_GEOMETRY_KIND_MAX      = 4

    ctypedef enum PDM_bool_t:
        PDM_FALSE = 0
        PDM_TRUE  = 1

    ctypedef enum PDM_ownership_t:
        PDM_OWNERSHIP_KEEP                 = 0
        PDM_OWNERSHIP_USER                 = 1
        PDM_OWNERSHIP_UNGET_RESULT_IS_FREE = 2

    ctypedef enum PDM_connectivity_type_t:
       PDM_CONNECTIVITY_TYPE_CELL_ELMT   = 0,
       PDM_CONNECTIVITY_TYPE_CELL_CELL   = 1,
       PDM_CONNECTIVITY_TYPE_CELL_FACE   = 2,
       PDM_CONNECTIVITY_TYPE_CELL_EDGE   = 3,
       PDM_CONNECTIVITY_TYPE_CELL_VTX    = 4,
       PDM_CONNECTIVITY_TYPE_FACE_ELMT   = 5,
       PDM_CONNECTIVITY_TYPE_FACE_CELL   = 6,
       PDM_CONNECTIVITY_TYPE_FACE_FACE   = 7,
       PDM_CONNECTIVITY_TYPE_FACE_EDGE   = 8,
       PDM_CONNECTIVITY_TYPE_FACE_VTX    = 9,
       PDM_CONNECTIVITY_TYPE_EDGE_ELMT   = 10,
       PDM_CONNECTIVITY_TYPE_EDGE_CELL   = 11,
       PDM_CONNECTIVITY_TYPE_EDGE_FACE   = 12,
       PDM_CONNECTIVITY_TYPE_EDGE_EDGE   = 13,
       PDM_CONNECTIVITY_TYPE_EDGE_VTX    = 14,
       PDM_CONNECTIVITY_TYPE_VTX_ELMT    = 15,
       PDM_CONNECTIVITY_TYPE_VTX_CELL    = 16,
       PDM_CONNECTIVITY_TYPE_VTX_FACE    = 17,
       PDM_CONNECTIVITY_TYPE_VTX_EDGE    = 18,
       PDM_CONNECTIVITY_TYPE_VTX_VTX     = 19,
       PDM_CONNECTIVITY_TYPE_ELMT_CELL   = 20,
       PDM_CONNECTIVITY_TYPE_ELMT_FACE   = 21,
       PDM_CONNECTIVITY_TYPE_ELMT_EDGE   = 22,
       PDM_CONNECTIVITY_TYPE_ELMT_VTX    = 23,
       PDM_CONNECTIVITY_TYPE_MAX         = 24

    ctypedef enum PDM_bound_type_t:
       PDM_BOUND_TYPE_ELMT   = 0,
       PDM_BOUND_TYPE_CELL   = 1,
       PDM_BOUND_TYPE_FACE   = 2,
       PDM_BOUND_TYPE_EDGE   = 3,
       PDM_BOUND_TYPE_VTX    = 4,
       PDM_BOUND_TYPE_MAX    = 5,

    ctypedef enum PDM_mesh_location_method_t:
      PDM_MESH_LOCATION_OCTREE  = 0
      PDM_MESH_LOCATION_DBBTREE = 1

    void PDM_Finalize ()

cdef extern from "pdm_dmesh_nodal.h":
    ctypedef enum PDM_Mesh_nodal_elt_t:
      PDM_MESH_NODAL_POINT    = 0
      PDM_MESH_NODAL_BAR2     = 1
      PDM_MESH_NODAL_TRIA3    = 2
      PDM_MESH_NODAL_QUAD4    = 3
      PDM_MESH_NODAL_POLY_2D  = 4
      PDM_MESH_NODAL_TETRA4   = 5
      PDM_MESH_NODAL_PYRAMID5 = 6
      PDM_MESH_NODAL_PRISM6   = 7
      PDM_MESH_NODAL_HEXA8    = 8
      PDM_MESH_NODAL_POLY_3D  = 9

def Finalize ():
    PDM_Finalize

cdef extern from "pdm_mpi.h":
    ctypedef int PDM_MPI_Comm
    PDM_MPI_Comm PDM_MPI_mpi_2_pdm_mpi_comm(void *pt_comm)
# -----------------------------------------------------------------

_PDM_MESH_ENTITY_CELL   = PDM_MESH_ENTITY_CELL
_PDM_MESH_ENTITY_FACE   = PDM_MESH_ENTITY_FACE
_PDM_MESH_ENTITY_EDGE   = PDM_MESH_ENTITY_EDGE
_PDM_MESH_ENTITY_VERTEX = PDM_MESH_ENTITY_VERTEX

_PDM_GEOMETRY_KIND_VOLUMIC  = PDM_GEOMETRY_KIND_VOLUMIC
_PDM_GEOMETRY_KIND_SURFACIC = PDM_GEOMETRY_KIND_SURFACIC
_PDM_GEOMETRY_KIND_RIDGE    = PDM_GEOMETRY_KIND_RIDGE
_PDM_GEOMETRY_KIND_CORNER   = PDM_GEOMETRY_KIND_CORNER
_PDM_GEOMETRY_KIND_MAX      = PDM_GEOMETRY_KIND_MAX

_PDM_CONNECTIVITY_TYPE_CELL_ELMT = PDM_CONNECTIVITY_TYPE_CELL_ELMT
_PDM_CONNECTIVITY_TYPE_CELL_CELL = PDM_CONNECTIVITY_TYPE_CELL_CELL
_PDM_CONNECTIVITY_TYPE_CELL_FACE = PDM_CONNECTIVITY_TYPE_CELL_FACE
_PDM_CONNECTIVITY_TYPE_CELL_EDGE = PDM_CONNECTIVITY_TYPE_CELL_EDGE
_PDM_CONNECTIVITY_TYPE_CELL_VTX  = PDM_CONNECTIVITY_TYPE_CELL_VTX
_PDM_CONNECTIVITY_TYPE_FACE_ELMT = PDM_CONNECTIVITY_TYPE_FACE_ELMT
_PDM_CONNECTIVITY_TYPE_FACE_CELL = PDM_CONNECTIVITY_TYPE_FACE_CELL
_PDM_CONNECTIVITY_TYPE_FACE_FACE = PDM_CONNECTIVITY_TYPE_FACE_FACE
_PDM_CONNECTIVITY_TYPE_FACE_EDGE = PDM_CONNECTIVITY_TYPE_FACE_EDGE
_PDM_CONNECTIVITY_TYPE_FACE_VTX  = PDM_CONNECTIVITY_TYPE_FACE_VTX
_PDM_CONNECTIVITY_TYPE_EDGE_ELMT = PDM_CONNECTIVITY_TYPE_EDGE_ELMT
_PDM_CONNECTIVITY_TYPE_EDGE_CELL = PDM_CONNECTIVITY_TYPE_EDGE_CELL
_PDM_CONNECTIVITY_TYPE_EDGE_FACE = PDM_CONNECTIVITY_TYPE_EDGE_FACE
_PDM_CONNECTIVITY_TYPE_EDGE_EDGE = PDM_CONNECTIVITY_TYPE_EDGE_EDGE
_PDM_CONNECTIVITY_TYPE_EDGE_VTX  = PDM_CONNECTIVITY_TYPE_EDGE_VTX
_PDM_CONNECTIVITY_TYPE_VTX_ELMT  = PDM_CONNECTIVITY_TYPE_VTX_ELMT
_PDM_CONNECTIVITY_TYPE_VTX_CELL  = PDM_CONNECTIVITY_TYPE_VTX_CELL
_PDM_CONNECTIVITY_TYPE_VTX_FACE  = PDM_CONNECTIVITY_TYPE_VTX_FACE
_PDM_CONNECTIVITY_TYPE_VTX_EDGE  = PDM_CONNECTIVITY_TYPE_VTX_EDGE
_PDM_CONNECTIVITY_TYPE_VTX_VTX   = PDM_CONNECTIVITY_TYPE_VTX_VTX
_PDM_CONNECTIVITY_TYPE_ELMT_CELL = PDM_CONNECTIVITY_TYPE_ELMT_CELL
_PDM_CONNECTIVITY_TYPE_ELMT_FACE = PDM_CONNECTIVITY_TYPE_ELMT_FACE
_PDM_CONNECTIVITY_TYPE_ELMT_EDGE = PDM_CONNECTIVITY_TYPE_ELMT_EDGE
_PDM_CONNECTIVITY_TYPE_ELMT_VTX  = PDM_CONNECTIVITY_TYPE_ELMT_VTX
_PDM_CONNECTIVITY_TYPE_MAX       = PDM_CONNECTIVITY_TYPE_MAX

_PDM_BOUND_TYPE_ELMT   = PDM_BOUND_TYPE_ELMT
_PDM_BOUND_TYPE_CELL   = PDM_BOUND_TYPE_CELL
_PDM_BOUND_TYPE_FACE   = PDM_BOUND_TYPE_FACE
_PDM_BOUND_TYPE_EDGE   = PDM_BOUND_TYPE_EDGE
_PDM_BOUND_TYPE_VTX    = PDM_BOUND_TYPE_VTX
_PDM_BOUND_TYPE_MAX    = PDM_BOUND_TYPE_MAX

_PDM_EXTEND_FROM_FACE   = PDM_EXTEND_FROM_FACE
_PDM_EXTEND_FROM_EDGE   = PDM_EXTEND_FROM_EDGE
_PDM_EXTEND_FROM_VTX    = PDM_EXTEND_FROM_VTX

_PDM_MESH_NODAL_POINT    = PDM_MESH_NODAL_POINT
_PDM_MESH_NODAL_BAR2     = PDM_MESH_NODAL_BAR2
_PDM_MESH_NODAL_TRIA3    = PDM_MESH_NODAL_TRIA3
_PDM_MESH_NODAL_QUAD4    = PDM_MESH_NODAL_QUAD4
_PDM_MESH_NODAL_POLY_2D  = PDM_MESH_NODAL_POLY_2D
_PDM_MESH_NODAL_TETRA4   = PDM_MESH_NODAL_TETRA4
_PDM_MESH_NODAL_PYRAMID5 = PDM_MESH_NODAL_PYRAMID5
_PDM_MESH_NODAL_PRISM6   = PDM_MESH_NODAL_PRISM6
_PDM_MESH_NODAL_HEXA8    = PDM_MESH_NODAL_HEXA8
_PDM_MESH_NODAL_POLY_3D  = PDM_MESH_NODAL_POLY_3D


@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@cdef extern from "pdm_plugin.h":
@COMMENT_NOT_PDMA@    void PDM_plugin_load ()
# @COMMENT_NOT_PDMA@print(f"Pypdm : load plugin (PDM_plugin_load).")
@COMMENT_NOT_PDMA@PDM_plugin_load()
@COMMENT_NOT_PDMA@

# -----------------------------------------------------------------
# > Enable transfer of ownership between C and Python
cdef extern from "numpy/arrayobject.h":
    void PyArray_ENABLEFLAGS(NPY.ndarray arr, int flags)

# -----------------------------------------------------------------
cdef create_numpy_i(int* array, int size):
    cdef object nparray
    if (array == NULL):
        nparray = None
    else :
        dim = <NPY.npy_intp> size
        nparray = NPY.PyArray_SimpleNewFromData(1,
                                                &dim,
                                                NPY.NPY_INT32,
                                                <void *> array)
    return nparray

cdef create_numpy_l(long int* array, int size):
    cdef object nparray
    if (array == NULL):
        nparray = None
    else :
        dim = <NPY.npy_intp> size
        nparray = NPY.PyArray_SimpleNewFromData(1,
                                                &dim,
                                                NPY.NPY_INT64,
                                                <void *> array)
    return nparray

cdef create_numpy_pdm_gnum(PDM_g_num_t* array, int size):
    cdef object nparray
    if (array == NULL):
        nparray = None
    else :
        dim = <NPY.npy_intp> size
        nparray = NPY.PyArray_SimpleNewFromData(1,
                                                &dim,
                                                PDM_G_NUM_NPY_INT,
                                                <void *> array)
    return nparray

cdef create_numpy_f(float* array, int size):
    cdef object nparray
    if (array == NULL):
        nparray = None
    else :
        dim = <NPY.npy_intp> size
        nparray = NPY.PyArray_SimpleNewFromData(1,
                                                &dim,
                                                NPY.NPY_FLOAT,
                                                <void *> array)
    return nparray

cdef create_numpy_d(double* array, int size):
    cdef object nparray
    if (array == NULL):
        nparray = None
    else :
        dim = <NPY.npy_intp> size
        nparray = NPY.PyArray_SimpleNewFromData(1,
                                                &dim,
                                                NPY.NPY_DOUBLE,
                                                <void *> array)
    return nparray

# PDM_dmesh :
# --------------------
include "pdm_dmesh.pxi"

# PDM_dmesh_nodal :
# ----------------
include "pdm_dmesh_nodal.pxi"

# PDM_dmesh_nodal :
# ----------------
include "pdm_part_mesh_nodal.pxi"

# PDM_dmesh_nodal :
# ----------------
include "pdm_dmesh_nodal_to_dmesh.pxi"

# PDM_part :
# ----------
include "pdm_part.pxi"

# PDM_multi_part :
# ----------
include "pdm_multi_part.pxi"

# PDM_part_coarse :
# ----------
include "pdm_part_coarse.pxi"

# PDM_part_to_block :
# ------------------
include "pdm_part_to_block.pxi"

# PDM_part_to_block :
# ------------------
include "pdm_block_to_part.pxi"

# PDM_block_to_block :
# ------------------
include "pdm_block_to_block.pxi"

# PDM_cellface_orient :
# --------------------
include "pdm_cellface_orient.pxi"

# PDM_dist_cloud_surf :
# --------------------
include "pdm_dist_cloud_surf.pxi"

# PDM_dist_cloud_surf :
# --------------------
@COMMENT_NOT_PDMA@include "pdm_dist_cellcenter_surf.pxi"

# PDM_delaunay :
# --------------------
@COMMENT_NOT_PDMA@include "pdm_delaunay.pxi"
@COMMENT_NOT_PDMA@include "pdm_remesh.pxi"

# PDM_points_merge :
# --------------------
include "pdm_points_merge.pxi"

# PDM_distant_neighbor :
# --------------------
include "pdm_distant_neighbor.pxi"

# PDM_gnum_location :
# --------------------
include "pdm_gnum_location.pxi"

# PDM_gnum :
# --------------------
include "pdm_gnum.pxi"

# PDM_mesh_location :
# --------------------
include "pdm_mesh_location.pxi"

# PDM_interpolate_from_mesh_location :
# --------------------
include "pdm_interpolate_from_mesh_location.pxi"

# PDM_mesh_location :
# --------------------
include "pdm_closest_points.pxi"

# PDM_overlay :
# --------------------
include "pdm_overlay.pxi"

# PDM_dcube_gen :
# --------------------
include "pdm_dcube_gen.pxi"

# PDM_dcube_nodal_gen :
# --------------------
include "pdm_dcube_nodal_gen.pxi"

# PDM_poly_mesh_surf :
# --------------------
include "pdm_poly_mesh_surf.pxi"

# PDM_poly_mesh_surf :
# --------------------
include "pdm_partitioning_algorithm.pxi"

# PDM_part_extension :
# --------------------
include "pdm_part_extension.pxi"

# PDM_dconnectivity_transform :
# --------------------
include "pdm_dconnectivity_transform.pxi"

# PDM_domain_interface:
# --------------------
include "pdm_domain_interface.pxi"




# TODO: PDM_writer, ...
