#!python
#cython: language_level=2
##cython: boundscheck=False
#cython: boundscheck=True
#cython: cdivision=True
#cython: wraparound=False
#cython: profile=True
###cython: embedsignature=False
# See : https://cython.readthedocs.io/en/latest/src/reference/compilation.html#compiler-directives

# Import Section (Python) :
# ------------------------
import logging   as LOG
import numpy     as NPY

# Import Section (Cython) :
# ------------------------
from    libc.stdlib cimport malloc, free
from    cpython.ref cimport PyObject, Py_INCREF, Py_DECREF, Py_XDECREF
cimport cython
cimport numpy       as      NPY

from    mpi4py      cimport MPI

# MANDATORY :
# ---------
NPY.import_array()



# PDM Specific type :
# -----------------

ctypedef @PYX_NPY_G_NUM@ npy_pdm_gnum_t
ctypedef @PYX_G_NUM@ PDM_g_num_t
ctypedef @PYX_L_NUM@ PDM_l_num_t

ctypedef int PDM_MPI_Comm

ctypedef enum PDM_g_num_npy_t:
  PDM_G_NUM_NPY_INT = @PDM_G_NUM_NPY_INT@


# -----------------------------------------------------------------

cdef extern from "pdm_config.h":
    cdef int PDM_IN_PDMA_BOOL

PDM_IN_PDMA = PDM_IN_PDMA_BOOL

cdef extern from "pdm.h":
    ctypedef enum PDM_stride_t:
        pass
    void PDM_Finalize ()

def Finalize ():
    PDM_Finalize

cdef extern from "pdm_mpi.h":
    ctypedef int PDM_MPI_Comm
    PDM_MPI_Comm PDM_MPI_mpi_2_pdm_mpi_comm(void *pt_comm)
# -----------------------------------------------------------------

@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@cdef extern from "pdm_plugin.h":
@COMMENT_NOT_PDMA@    void PDM_plugin_load ()
@COMMENT_NOT_PDMA@PDM_plugin_load() 
@COMMENT_NOT_PDMA@       

# PDM_part :
# ----------

include "pdm_part.pxi"

# PDM_part_coarse :
# ----------
include "pdm_part_coarse.pxi"

# PDM_part_to_block :
# ------------------
include "pdm_part_to_block.pxi"

# PDM_part_to_block :
# ------------------
include "pdm_block_to_part.pxi"

# TODO: PDM_writer, ...

