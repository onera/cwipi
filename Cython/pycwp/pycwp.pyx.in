# cython: c_string_type=str, c_string_encoding=ascii
#-----------------------------------------------------------------------------
# This file is part of the CWIPI library.
#
# Copyright (C) 2011  ONERA
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library. If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------------

"""
cwipi - Coupling With Interpolation Parallel Interface library.
"""

#-----------------------------------------------------------------------------
# IMPORTS

# --> Python
import numpy     as NPY
from mpi4py import MPI

# --> Cython
cimport cython
from libc.stdlib       cimport malloc, free
from cpython.ref       cimport PyObject, Py_INCREF, Py_DECREF, Py_XDECREF
from cpython.pycapsule cimport PyCapsule_New, PyCapsule_GetPointer, PyCapsule_IsValid, PyCapsule_GetName
from libc.stdio cimport FILE, fdopen, fopen
from cpython.object cimport PyObject_AsFileDescriptor
cimport numpy as NPY
cimport mpi4py.MPI as MPI

# initialize the numpy C API
NPY.import_array()

#-----------------------------------------------------------------------------
# EXTERN

cdef extern from "cwipi_cython.h":
    ctypedef enum cwipi_fake_enum_t:
      CWIPI_FAKE_ENUM

cdef extern from "cwp.h":

  # TYPES

  ctypedef enum CWP_Type_t:
      CWP_DOUBLE
      CWP_INT
      CWP_CHAR

  ctypedef enum CWP_Visu_format_t:
      CWP_VISU_FORMAT_ENSIGHT

  ctypedef enum CWP_Comm_t:
      CWP_COMM_PAR_WITH_PART
      CWP_COMM_PAR_WITHOUT_PART
      CWP_COMM_SEQ

  ctypedef enum CWP_Time_exch_t:
      CWP_TIME_EXCH_USER_CONTROLLED

  ctypedef enum CWP_Dof_location_t:
      CWP_DOF_LOCATION_UNDEF
      CWP_DOF_LOCATION_CELL_CENTER
      CWP_DOF_LOCATION_NODE
      CWP_DOF_LOCATION_USER

  ctypedef enum CWP_Field_exch_t:
      CWP_FIELD_EXCH_SEND
      CWP_FIELD_EXCH_RECV
      CWP_FIELD_EXCH_SENDRECV

  ctypedef enum CWP_Field_map_t:
      CWP_FIELD_MAP_SOURCE
      CWP_FIELD_MAP_TARGET

  ctypedef enum CWP_Field_storage_t:
      CWP_FIELD_STORAGE_INTERLACED
      CWP_FIELD_STORAGE_INTERLEAVED

  ctypedef enum CWP_Status_t:
      CWP_STATUS_OFF
      CWP_STATUS_ON

  ctypedef enum CWP_Err_t:
      CWP_ERR_NO_ERROR
      CWP_ERR_DEFAULT

  ctypedef enum CWP_Block_t:
      CWP_BLOCK_NODE
      CWP_BLOCK_EDGE2
      CWP_BLOCK_FACE_TRIA3
      CWP_BLOCK_FACE_QUAD4
      CWP_BLOCK_FACE_POLY
      CWP_BLOCK_CELL_TETRA4
      CWP_BLOCK_CELL_HEXA8
      CWP_BLOCK_CELL_PRISM6
      CWP_BLOCK_CELL_PYRAM5
      CWP_BLOCK_CELL_POLY
      CWP_BLOCK_EDGEHO
      CWP_BLOCK_FACE_TRIAHO
      CWP_BLOCK_FACE_QUADHO
      CWP_BLOCK_CELL_TETRAHO
      CWP_BLOCK_CELL_HEXAHO
      CWP_BLOCK_CELL_PRISMHO
      CWP_BLOCK_CELL_PYRAMHO


  ctypedef enum CWP_Dynamic_mesh_t:
      CWP_DYNAMIC_MESH_STATIC
      CWP_DYNAMIC_MESH_DEFORMABLE
      CWP_DYNAMIC_MESH_VARIABLE

  ctypedef enum CWP_Spatial_interp_t:
      CWP_SPATIAL_INTERP_FROM_CLOSEST_POINT_LEAST_SQUARES
      CWP_SPATIAL_INTERP_FROM_INTERSECTION
      CWP_SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF
      CWP_SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_OCTREE
      CWP_SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_DBBTREE

  ctypedef enum CWP_Interface_t:
      CWP_INTERFACE_POINT
      CWP_INTERFACE_LINEAR
      CWP_INTERFACE_SURFACE
      CWP_INTERFACE_VOLUME

  ctypedef enum CWP_State_t:
      CWP_STATE_IN_PROGRESS
      CWP_STATE_END
      CWP_STATE_OUTPUT_ERROR

  ctypedef enum CWP_Op_t:
      CWP_OP_MIN
      CWP_OP_MAX
      CWP_OP_SUM

  ctypedef void (*CWP_interp_function_t) (char           *local_code_name,
                                          char           *cpl_id,
                                          char           *field_id,
                                          int                   i_part,
                                          CWP_Spatial_interp_t  spatial_interp_algorithm,
                                          double               *buffer_in,
                                          double               *buffer_out)

  #-----------------------------------------------------------------------------
  # CWIPI
  # --> general functions
  void CWP_Init(MPI.MPI_Comm       global_comm,
                int                n_code,
                char             **code_names,
                CWP_Status_t      *is_active_rank,
                double            *time_init,
                MPI.MPI_Comm      *intra_comms)
  void CWP_Finalize()

  # --> functions about current code properties
  void CWP_State_update(char* local_code_name,
                        CWP_State_t state)
  void CWP_Time_update(char* local_code_name,
                       double current_time)
  void CWP_Output_file_set(FILE *output_file)
  void CWP_User_structure_set(char* local_code_name,
                              void* user_structure)
  void *CWP_User_structure_get(char* local_code_name)

  # --> functions about other code properties
  CWP_State_t CWP_State_get(char    *code_name)
  int CWP_Codes_nb_get()
  char **CWP_Codes_list_get()
  int CWP_Loc_codes_nb_get()
  char **CWP_Loc_codes_list_get()

  # --> functions about properties
  void CWP_Properties_dump()

  # --> general functions about coupling
  void CWP_Cpl_create(char                *local_code_name,
                      char                *cpl_id,
                      char                *coupled_code_name,
                      CWP_Interface_t      entities_dim,
                      CWP_Comm_t           comm_type,
                      CWP_Spatial_interp_t spatial_interp,
                      int                  n_part,
                      CWP_Dynamic_mesh_t   displacement,
                      CWP_Time_exch_t      recv_freq_type)
  void CWP_Cpl_del(char *local_code_name,
                   char *cpl_id)
  int CWP_N_uncomputed_tgts_get(char *local_code_name,
                                char *cpl_id,
                                char *field_id,
                                int   i_part)
  int *CWP_Uncomputed_tgts_get(char *local_code_name,
                               char *cpl_id,
                               char *field_id,
                               int   i_part)
  int CWP_N_computed_tgts_get(char *local_code_name,
                              char *cpl_id,
                              char *field_id,
                              int   i_part)
  int *CWP_Computed_tgts_get(char *local_code_name,
                             char *cpl_id,
                             char *field_id,
                             int   i_part)
  int CWP_N_involved_srcs_get(char *local_code_name,
                              char *cpl_id,
                              char *field_id,
                              int   i_part)
  int *CWP_Involved_srcs_get(char *local_code_name,
                             char *cpl_id,
                             char *field_id,
                             int   i_part)

  # --> functions about spatial interpolation
  void CWP_Spatial_interp_weights_compute(char     *local_code_name,
                                          char     *cpl_id)
  void CWP_Spatial_interp_property_set(char     *local_code_name,
                                       char     *cpl_id,
                                       char     *property_name,
                                       char     *property_type,
                                       char     *property_value)

  # --> functions about visualization
  void CWP_Visu_set(char                 *local_code_name,
                    char                 *cpl_id,
                    int                   freq,
                    CWP_Visu_format_t     visu_format,
                    char                 *format_option)

  # --> functions about User target points
  void CWP_User_tgt_pts_set(char    *local_code_name,
                            char    *cpl_id,
                            int      i_part,
                            int      n_pts,
                            double   *coord,
                            long     *global_num)

  # --> functions about Mesh
  void CWP_Mesh_interf_finalize(char         *local_code_name,
                                char         *cpl_id)
  void CWP_Mesh_interf_vtx_set(char           *local_code_name,
                               char           *cpl_id,
                               int             i_part,
                               int             n_pts,
                               double          *coord,
                               long            *global_num)
  int CWP_Mesh_interf_block_add(char           *local_code_name,
                                char           *cpl_id,
                                CWP_Block_t     block_type)
  void CWP_Mesh_interf_block_std_set(char        *local_code_name,
                                     char        *cpl_id,
                                     int          i_part,
                                     int          block_id,
                                     int          n_elts,
                                     int          *connec,
                                     long         *global_num)
  CWP_Block_t CWP_std_block_type_get(char             *local_code_name,
                                     char             *cpl_id,
                                     int               block_id)
  void CWP_Mesh_interf_block_std_get(char         *local_code_name,
                                     char         *cpl_id,
                                     int           i_part,
                                     int           block_id,
                                     int          *n_elts,
                                     int         **connec,
                                     long        **global_num)
  void CWP_Mesh_interf_f_poly_block_set(char             *local_code_name,
                                        char             *cpl_id,
                                        int               i_part,
                                        int               block_id,
                                        int               n_elts,
                                        int              *connec_idx,
                                        int              *connec,
                                        long             *global_num)
  void CWP_Mesh_interf_f_poly_block_get(char             *local_code_name,
                                        char             *cpl_id,
                                        int               i_part,
                                        int               block_id,
                                        int              *n_elts,
                                        int             **connec_idx,
                                        int             **connec,
                                        long            **global_num)
  void CWP_Mesh_interf_c_poly_block_set(char           *local_code_name,
                                        char           *cpl_id,
                                        int             i_part,
                                        int             block_id,
                                        int             n_elts,
                                        int             n_faces,
                                        int            *connec_faces_idx,
                                        int            *connec_faces,
                                        int            *connec_cells_idx,
                                        int            *connec_cells,
                                        long           *global_num)
  void CWP_Mesh_interf_c_poly_block_get(char           *local_code_name,
                                        char           *cpl_id,
                                        int             i_part,
                                        int             block_id,
                                        int              *n_elts,
                                        int              *n_faces,
                                        int             **connec_faces_idx,
                                        int             **connec_faces,
                                        int             **connec_cells_idx,
                                        int             **connec_cells,
                                        long            **global_num)
  void CWP_Mesh_interf_block_ho_set(const char        *local_code_name,
                                    const char        *cpl_id,
                                    const int          i_part,
                                    const int          block_id,
                                    const int          n_elts,
                                    const int          order,
                                    int                connec[],
                                    long               global_num[])
  void CWP_Mesh_interf_block_ho_get(const char        *local_code_name,
                                    const char        *cpl_id,
                                    const int          i_part,
                                    const int          block_id,
                                    int               *n_elts,
                                    int               *order,
                                    int              **connec,
                                    long             **global_num)
  void CWP_Mesh_interf_ho_ordering_from_IJK_set(const char        *local_code_name,
                                                const char        *cpl_id,
                                                const CWP_Block_t  block_type,
                                                const int          order,
                                                const int          n_nodes,
                                                const int         *ijk_grid)
  void CWP_Mesh_interf_del(char *local_code_name,
                           char *cpl_id)
  void CWP_Mesh_interf_from_cellface_set(char           *local_code_name,
                                         char           *cpl_id,
                                         int             i_part,
                                         int             n_cells,
                                         int            *cell_face_idx,
                                         int            *cell_face,
                                         int             n_faces,
                                         int            *face_vtx_idx,
                                         int            *face_vtx,
                                         long           *global_num)
  void CWP_Mesh_interf_from_faceedge_set(char           *local_code_name,
                                         char           *cpl_id,
                                         int             i_part,
                                         int             n_faces,
                                         int            *face_edge_idx,
                                         int            *face_edge,
                                         int             n_edges,
                                         int            *edge_vtx_idx,
                                         int            *edge_vtx,
                                         long           *global_num)

  # --> functions about field
  void CWP_Field_create(char                  *local_code_name,
                        char                  *cpl_id,
                        char                  *field_id,
                        CWP_Type_t             data_type,
                        CWP_Field_storage_t    storage,
                        int                    n_component,
                        CWP_Dof_location_t     target_location,
                        CWP_Field_exch_t       exch_type,
                        CWP_Status_t           visu_status)
  void CWP_Field_data_set(char              *local_code_name,
                          char              *cpl_id,
                          char              *field_id,
                          int                i_part,
                          CWP_Field_map_t    map_type,
                          double            *data)
  # TO DO wo ist CWP_Field_data_get ?
  int CWP_Field_n_component_get(char      *local_code_name,
                                char      *cpl_id,
                                char      *field_id)
  CWP_Dof_location_t CWP_Field_target_dof_location_get(char      *local_code_name,
                                                       char      *cpl_id,
                                                       char      *field_id)
  CWP_Field_storage_t CWP_Field_storage_get(char      *local_code_name,
                                            char      *cpl_id         ,
                                            char      *field_id)
  void CWP_Field_del(char      *local_code_name,
                     char      *cpl_id         ,
                     char      *field_id)

  # --> functions about exchange
  void CWP_Field_issend(char     *local_code_name,
                        char     *cpl_id,
                        char     *src_field_id)
  void CWP_Field_irecv(char        *local_code_name,
                       char        *cpl_id,
                       char        *tgt_field_id)
  void CWP_Field_wait_issend(char  *local_code_name,
                             char  *cpl_id,
                             char  *src_field_id)
  void CWP_Field_wait_irecv(char  *local_code_name,
                            char  *cpl_id,
                            char  *tgt_field_id)

  # --> functions about user interpolation
  void CWP_Interp_function_unset(char                 *local_code_name,
                                 char                 *cpl_id,
                                 char                 *src_field_id)
  void CWP_Interp_function_set(char                       *local_code_name,
                               char                       *cpl_id,
                               char                       *src_field_id,
                               CWP_interp_function_t  fct)
  int CWP_Interp_field_n_components_get(char    *local_code_name,
                                        char    *cpl_id,
                                        char    *field_id)
  void CWP_Interp_src_data_get(char    *local_code_name,
                               char    *cpl_id,
                               char    *field_id,
                               int           i_part,
                               int          *n_elt_src,
                               int         **src_to_tgt_idx)
  void CWP_Interp_tgt_data_get(char         *local_code_name,
                               char         *cpl_id,
                               char         *field_id,
                               int           i_part,
                               int          *n_elt_tgt,
                               int          *n_referenced_tgt,
                               int         **referenced_tgt,
                               int         **tgt_come_from_src_idx)
  void CWP_Interp_location_weights_get(char                  *local_code_name,
                                       char                  *cpl_id,
                                       char                  *field_id,
                                       int                    i_part,
                                       CWP_Spatial_interp_t   spatial_interp_algorithm, # TO DO enlever apres push Bastien
                                       double               **weights)
  void CWP_Interp_location_point_data_get(char                  *local_code_name,
                                          char                  *cpl_id,
                                          char                  *field_id,
                                          int                    i_part,
                                          CWP_Spatial_interp_t   spatial_interp_algorithm, # TO DO enlever apres push Bastien
                                          double               **points_coords,
                                          double               **points_uvw,
                                          double               **points_dist2,
                                          double               **points_projected_coords)
  void CWP_Interp_location_internal_cell_vtx_get(char                  *local_code_name,
                                                 char                  *cpl_id,
                                                 char                  *field_id,
                                                 int                    i_part,
                                                 CWP_Spatial_interp_t   spatial_interp_algorithm, # TO DO enlever apres push Bastien
                                                 int                  **cell_vtx_idx,
                                                 int                  **cell_vtx)
  void CWP_Interp_intersection_volumes_get(char                  *local_code_name,
                                           char                  *cpl_id,
                                           char                  *field_id,
                                           int                    i_part,
                                           CWP_Spatial_interp_t   spatial_interp_algorithm, # TO DO enlever apres push Bastien
                                           double               **volumes)
  void CWP_Interp_closest_points_distances_get(char                  *local_code_name,
                                               char                  *cpl_id,
                                               char                  *field_id,
                                               int                    i_part,
                                               CWP_Spatial_interp_t   spatial_interp_algorithm, # TO DO enlever apres push Bastien
                                               double               **distances2)

  # --> functions about control parameters
  void CWP_Param_add(char        *local_code_name,
                     char        *param_name,
                     CWP_Type_t   data_type,
                     void        *initial_value)
  void CWP_Param_set(char             *local_code_name,
                     char             *param_name,
                     CWP_Type_t        data_type,
                     void             *value)
  void CWP_Param_del(char       *local_code_name,
                     char       *param_name,
                     CWP_Type_t  data_type)

  # --> functions about all code parameters
  int CWP_Param_n_get(char             *code_name,
                      CWP_Type_t        data_type)
  void CWP_Param_list_get(char             *code_name,
                          CWP_Type_t        data_type,
                          int              *nParam,
                          char           ***paramNames)
  int CWP_Param_is(char             *code_name,
                   char             *param_name,
                   CWP_Type_t        data_type)
  void CWP_Param_get(char       *code_name,
                     char       *param_name,
                     CWP_Type_t  data_type,
                     void       *value)
  void CWP_Param_reduce(CWP_Op_t    op,
                        char       *param_name,
                        CWP_Type_t  data_type,
                        void       *res,
                        int         nCode,
                        char      **code_names)
  void CWP_Param_lock(char *code_name)
  void CWP_Param_unlock(char *code_name)

#-----------------------------------------------------------------------------
# ENUM

DOUBLE = CWP_DOUBLE
INT    = CWP_INT
CHAR   = CWP_CHAR

VISU_FORMAT_ENSIGHT = CWP_VISU_FORMAT_ENSIGHT

COMM_PAR_WITH_PART    = CWP_COMM_PAR_WITH_PART
COMM_PAR_WITHOUT_PART = CWP_COMM_PAR_WITHOUT_PART
COMM_SEQ              = CWP_COMM_SEQ

TIME_EXCH_USER_CONTROLLED = CWP_TIME_EXCH_USER_CONTROLLED

DOF_LOCATION_UNDEF       = CWP_DOF_LOCATION_UNDEF
DOF_LOCATION_CELL_CENTER = CWP_DOF_LOCATION_CELL_CENTER
DOF_LOCATION_NODE        = CWP_DOF_LOCATION_NODE
DOF_LOCATION_USER        = CWP_DOF_LOCATION_USER

FIELD_EXCH_SEND     = CWP_FIELD_EXCH_SEND
FIELD_EXCH_RECV     = CWP_FIELD_EXCH_RECV
FIELD_EXCH_SENDRECV = CWP_FIELD_EXCH_SENDRECV

FIELD_MAP_SOURCE = CWP_FIELD_MAP_SOURCE
FIELD_MAP_TARGET = CWP_FIELD_MAP_TARGET

FIELD_STORAGE_INTERLACED  = CWP_FIELD_STORAGE_INTERLACED
FIELD_STORAGE_INTERLEAVED = CWP_FIELD_STORAGE_INTERLEAVED

STATUS_OFF = CWP_STATUS_OFF
STATUS_ON  = CWP_STATUS_ON

ERR_NO_ERROR = CWP_ERR_NO_ERROR
ERR_DEFAULT  = CWP_ERR_DEFAULT

BLOCK_NODE         = CWP_BLOCK_NODE
BLOCK_EDGE2        = CWP_BLOCK_EDGE2
BLOCK_FACE_TRIA3   = CWP_BLOCK_FACE_TRIA3
BLOCK_FACE_QUAD4   = CWP_BLOCK_FACE_QUAD4
BLOCK_FACE_POLY    = CWP_BLOCK_FACE_POLY
BLOCK_CELL_TETRA4  = CWP_BLOCK_CELL_TETRA4
BLOCK_CELL_HEXA8   = CWP_BLOCK_CELL_HEXA8
BLOCK_CELL_PRISM6  = CWP_BLOCK_CELL_PRISM6
BLOCK_CELL_PYRAM5  = CWP_BLOCK_CELL_PYRAM5
BLOCK_CELL_POLY    = CWP_BLOCK_CELL_POLY
BLOCK_EDGEHO       = CWP_BLOCK_EDGEHO
BLOCK_FACE_TRIAHO  = CWP_BLOCK_FACE_TRIAHO
BLOCK_FACE_QUADHO  = CWP_BLOCK_FACE_QUADHO
BLOCK_CELL_TETRAHO = CWP_BLOCK_CELL_TETRAHO
BLOCK_CELL_HEXAHO  = CWP_BLOCK_CELL_HEXAHO
BLOCK_CELL_PRISMHO = CWP_BLOCK_CELL_PRISMHO
BLOCK_CELL_PYRAMHO = CWP_BLOCK_CELL_PYRAMHO

DYNAMIC_MESH_STATIC     = CWP_DYNAMIC_MESH_STATIC
DYNAMIC_MESH_DEFORMABLE = CWP_DYNAMIC_MESH_DEFORMABLE
DYNAMIC_MESH_VARIABLE   = CWP_DYNAMIC_MESH_VARIABLE

SPATIAL_INTERP_FROM_CLOSEST_POINT_LEAST_SQUARES    = CWP_SPATIAL_INTERP_FROM_CLOSEST_POINT_LEAST_SQUARES
SPATIAL_INTERP_FROM_INTERSECTION                   = CWP_SPATIAL_INTERP_FROM_INTERSECTION
SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF       = CWP_SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF
SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_OCTREE  = CWP_SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_OCTREE
SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_DBBTREE = CWP_SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_DBBTREE

INTERFACE_POINT   = CWP_INTERFACE_POINT
INTERFACE_LINEAR  = CWP_INTERFACE_LINEAR
INTERFACE_SURFACE = CWP_INTERFACE_SURFACE
INTERFACE_VOLUME  = CWP_INTERFACE_VOLUME

STATE_IN_PROGRESS   = CWP_STATE_IN_PROGRESS
STATE_END           = CWP_STATE_END
STATE_OUTPUT_ERROR  = CWP_STATE_OUTPUT_ERROR

OP_MIN = CWP_OP_MIN
OP_MAX = CWP_OP_MAX
OP_SUM = CWP_OP_SUM

#-----------------------------------------------------------------------------
# UTIL

cdef std_block_n_pts_get(int block_type):
  if (block_type == BLOCK_NODE):
    return 1
  elif (block_type == BLOCK_EDGE2):
    return 2
  if (block_type == BLOCK_FACE_TRIA3):
    return 3
  if (block_type == BLOCK_FACE_QUAD4):
    return 4
  if (block_type == BLOCK_CELL_TETRA4):
    return 4
  if (block_type == BLOCK_CELL_HEXA8):
    return 8
  if (block_type == BLOCK_CELL_PRISM6):
    return 6
  if (block_type == BLOCK_CELL_PYRAM5):
    return 5

cdef std_elt_dim(int block_type):
  if (block_type == BLOCK_NODE):
    return 0
  elif (block_type == BLOCK_EDGE2):
    return 1
  elif (block_type == BLOCK_EDGEHO):
    return 1
  if (block_type == BLOCK_FACE_TRIA3):
    return 2
  if (block_type == BLOCK_FACE_TRIAHO):
    return 2
  if (block_type == BLOCK_FACE_QUAD4):
    return 2
  if (block_type == BLOCK_FACE_QUADHO):
    return 2
  if (block_type == BLOCK_CELL_TETRA4):
    return 3
  if (block_type == BLOCK_CELL_TETRAHO):
    return 3
  if (block_type == BLOCK_CELL_HEXA8):
    return 3
  if (block_type == BLOCK_CELL_HEXAHO):
    return 3
  if (block_type == BLOCK_CELL_PRISM6):
    return 3
  if (block_type == BLOCK_CELL_PRISMHO):
    return 3
  if (block_type == BLOCK_CELL_PYRAM5):
    return 3
  if (block_type == BLOCK_CELL_PYRAMHO):
    return 3

cdef ho_n_vtx_get(int block_type, int order):
  if (block_type == BLOCK_NODE):
    return 1
  elif (block_type == BLOCK_EDGE2):
    return 2
  elif (block_type == BLOCK_EDGEHO):
    return order + 1
  if (block_type == BLOCK_FACE_TRIA3):
    return 3
  if (block_type == BLOCK_FACE_TRIAHO):
    return (order + 1) * (order + 2) // 2
  if (block_type == BLOCK_FACE_QUAD4):
    return 4
  if (block_type == BLOCK_FACE_QUADHO):
    return (order + 1) * (order + 1)
  if (block_type == BLOCK_CELL_TETRA4):
    return 4
  if (block_type == BLOCK_CELL_TETRAHO):
    return (order + 1) * (order + 2) * (order + 3) // 6
  if (block_type == BLOCK_CELL_HEXA8):
    return 8
  if (block_type == BLOCK_CELL_HEXAHO):
    return (order + 1) * (order + 1) * (order + 1)
  if (block_type == BLOCK_CELL_PRISM6):
    return 6
  if (block_type == BLOCK_CELL_PRISMHO):
    return (order + 1) * (order + 1) * (order + 2) // 2
  if (block_type == BLOCK_CELL_PYRAM5):
    return 5
  if (block_type == BLOCK_CELL_PYRAMHO):
    return (order + 1) * (order + 2) * (2*order + 3) // 6
#-----------------------------------------------------------------------------
# CALLBACK
g_interp_fct = {}
current_cpl_id = ""

cdef void interp_callback(const char           *local_code_name,
                          const char           *cpl_id,
                          const char           *field_id,
                          int                   i_part,
                          CWP_Spatial_interp_t  spatial_interp_algorithm,
                          double               *buffer_in,
                          double               *buffer_out):
    """
    User interpolation function interface from location into a mesh.

    Parameters:
      local_code_name             Local code name
      cpl_id                      Coupling name
      field_id                    Field name
      spatial_interp_algorithm    Enum of spatial interpolation algorithm
      buffer_in                   Input field array

    Returns:
      buffer_out                  Output field array
    """

    global g_interp_fct
    global current_cpl_id
    cdef NPY.npy_intp dims = 0

    if (buffer_in == NULL):
      print("Error: User interpolation input field array is NULL")
    else:
      if ((spatial_interp_algorithm == SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF) or
          (spatial_interp_algorithm == SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF) or
          (spatial_interp_algorithm == SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF)):
        # TO DO
      elif (spatial_interp_algorithm == SPATIAL_INTERP_FROM_INTERSECTION):
        # TO DO
      elif (spatial_interp_algorithm == SPATIAL_INTERP_FROM_CLOSEST_POINT_LEAST_SQUARES):
        # TO DO
      else:
        print("Error: {param} unkown spatial interpolation algorithm".format(param=spatial_interp_algorithm))

    if (buffer_out == NULL):
      print("Error: User interpolation input field array is NULL")
    else:
      if ((spatial_interp_algorithm == SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF) or
          (spatial_interp_algorithm == SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF) or
          (spatial_interp_algorithm == SPATIAL_INTERP_FROM_LOCATION_DIST_CLOUD_SURF)):
        # TO DO
      elif (spatial_interp_algorithm == SPATIAL_INTERP_FROM_INTERSECTION):
        # TO DO
      elif (spatial_interp_algorithm == SPATIAL_INTERP_FROM_CLOSEST_POINT_LEAST_SQUARES):
        # TO DO
      else:
        print("Error: {param} unkown spatial interpolation algorithm".format(param=spatial_interp_algorithm))

    (<object> g_interp_fct[current_cpl_id]) (local_code_name,
                                             cpl_id,
                                             field_id,
                                             i_part,
                                             spatial_interp_algorithm,
                                             None, #buffer_in_a
                                             None) #buffer_out_a

#-----------------------------------------------------------------------------
# UTILS

# > Enable transfer of ownership between C and Python
cdef extern from "numpy/arrayobject.h":
    void PyArray_ENABLEFLAGS(NPY.ndarray arr, int flags)

cdef create_numpy_i(int* array, int size, bint flag_owndata=True):
    dim = <NPY.npy_intp> size
    nparray = NPY.PyArray_SimpleNewFromData(1, &dim, NPY.NPY_INT32, <void *> array)
    if flag_owndata:
        PyArray_ENABLEFLAGS(nparray, NPY.NPY_OWNDATA)
    return nparray

cdef create_numpy_l(long int* array, int size, bint flag_owndata=True):
    dim = <NPY.npy_intp> size
    nparray = NPY.PyArray_SimpleNewFromData(1, &dim, NPY.NPY_INT64, <void *> array)
    if flag_owndata:
        PyArray_ENABLEFLAGS(nparray, NPY.NPY_OWNDATA)
    return nparray

cdef create_numpy_d(double* array, int size, bint flag_owndata=True):
    dim = <NPY.npy_intp> size
    nparray = NPY.PyArray_SimpleNewFromData(1, &dim, NPY.NPY_DOUBLE, <void *> array)
    if flag_owndata:
        PyArray_ENABLEFLAGS(nparray, NPY.NPY_OWNDATA)
    return nparray

#-----------------------------------------------------------------------------
# DEFINITION
# --> general functions

def init(MPI.Comm global_comm,
         int      n_code,
         list code_names,
         NPY.ndarray[NPY.int32_t] is_active_rank not None,
         NPY.ndarray[NPY.double_t] time_init not None):
    """
    Initialize CWIPI library and create intra-communicator.

    Parameters:
      global_comm    (MPI.Comm) : MPI global communicator
      n_code         (int)      : Number of codes on the current rank
      code_names     (char**)   : Names of codes on the current rank (size = n_code)
      is_active_rank (int*)     : Is current rank have to be used by CWIPI (size = n_code)
      time_init      (double*)  : Initial time (size = n_code)

    Returns:
      intra_comms    (MPI.Comm) : MPI intra communicators of each code (size = n_code)
    """

    cdef char **c_code_names = <char**> malloc(sizeof(char*) * n_code)
    for i in range(n_code):
      c_code_names[i] = <char *> malloc(sizeof(char) * len(code_names[i]))

    for i in range(n_code):
      py_byte_code_name = code_names[i].encode('UTF-8')
      c_code_names[i] = py_byte_code_name

    cdef MPI.MPI_Comm c_global_comm = global_comm.ob_mpi

    cdef MPI.MPI_Comm* intra_comms = <MPI.MPI_Comm *> malloc(n_code * sizeof(MPI.MPI_Comm))
    cdef py_intra_comms = [MPI.Comm()]*n_code

    cdef MPI.MPI_Comm c_comm
    cdef MPI.Comm comm

    for i_code in range(n_code):
      comm = py_intra_comms[i_code]
      c_comm = <MPI.MPI_Comm> comm.ob_mpi
      intra_comms[i_code] = c_comm

    CWP_Init(c_global_comm,
             n_code,
             c_code_names,
             <CWP_Status_t *> is_active_rank.data,
             <double *> time_init.data,
             intra_comms)

    free(intra_comms)

    return py_intra_comms

def finalize():
    """
    Finalize this module.

    After this call, no other function from this module can be called.
    It is a synchronization point between all applications.
    """

    CWP_Finalize()

# --> functions about current code properties
def state_update(char*       local_code_name,
                 CWP_State_t state):
    """
    Update code state.

    Parameters:
      local_code_name (char*)       : Local code name
      state           (CWP_State_t) : State
    """

    CWP_State_update(local_code_name,
                     state)

def time_update(char*  local_code_name,
                double current_time):
    """
    Update code time.

    Parameters:
      local_code_name (char*)  : Local code name
      current_time    (double) : Current time
    """

    CWP_Time_update(local_code_name,
                    current_time)

def output_file_set(output_file):
    """
    Define output file.

    Parameters:
      output_file(file):  Output file

    Note:
      If this file is written by both cwipi and python, I/O buffering may mix up the output.
      In this case, calling output_listing.flush() before any cwipi call may help.
    """

    cdef int fd
    cdef FILE* c_file
    cdef str mode

    mode = output_file.mode

    if (output_file == None):
      c_file = fopen(output_file.name, mode)
    else:
      fd = PyObject_AsFileDescriptor(output_file)
      c_file = fdopen(fd, mode)

    CWP_Output_file_set(c_file)

def user_structure_set(char*     local_code_name,
                       object user_structure):
    """
    Define a user structure associated to a code.

    Parameters:
      local_code_name  (char*)      : Local code name
      user_structure   (object) : User structure
    """

    cdef void *c_user_structure = <void *> user_structure
    # PyCapsule_GetPointer(user_structure, NULL)

    CWP_User_structure_set(local_code_name,
                           c_user_structure)

def user_structure_get(local_code_name):
    """
    Return the user structure associated.

    Parameters:
      local_code_name  (char*) : Local code name

    Returns:
      user_structure   (object) : User structure
    """

    cdef void *c_user_structure = CWP_User_structure_get(local_code_name)

    cdef object user_structure

    if c_user_structure: # not Null
      user_structure = <object>c_user_structure
      # PyCapsule_New(c_user_structure, NULL, NULL)
    else:
      user_structure = None

    return user_structure

# --> functions about other code properties

def state_get(char* code_name):
    """
    Get code state.

    Parameters:
      local_code_name (char*) : Local code name

    Returns:
      state (CWP_State_t) : Current state
    """

    cdef CWP_State_t state = CWP_State_get(code_name)

    return state

def codes_nb_get():
    """
    Return the number of codes known by CWIPI.

    Returns:
      n_code (int) : Number of codes known by CWIPI
    """

    cdef int n_code = CWP_Codes_nb_get()

    return n_code

def codes_list_get():
    """
    Return the list of code names known by CWIPI.

    Returns:
      code_list (char**) : Number of codes known by CWIPI
    """

    cdef char** c_code_list = CWP_Codes_list_get()

    cdef int n_code = CWP_Codes_nb_get()
    code_list = []
    for i in range(n_code):
      code_list.append(c_code_list[i])

    code_list = NPY.array(code_list)

    return code_list

def loc_codes_nb_get():
    """
    Return the number of local codes known by CWIPI.

    Returns:
      n_loc_code (int) : Number of codes known by CWIPI
    """

    cdef int n_loc_code = CWP_Loc_codes_nb_get()

    return n_loc_code

def loc_codes_list_get():
    """
    Return the list of code names known by CWIPI.

    Returns:
      loc_code_list (char**) : Number of local codes known by CWIPI
    """

    cdef char** c_loc_code_list = CWP_Loc_codes_list_get()

    cdef int n_loc_code = CWP_Loc_codes_nb_get()
    loc_code_list = []
    for i in range(n_loc_code):
      loc_code_list.append(c_loc_code_list[i])

    loc_code_list = NPY.array(loc_code_list)

    return loc_code_list

# --> functions about properties
def properties_dump():
    """
    Dump application properties.
    """

    CWP_Properties_dump()

# --> functions about control parameters
def param_add_int(char        *local_code_name,
                  char        *param_name,
                  int          initial_value):
    """
    Add a new interger parameter and intialize it.

    Parameters:
      local_code_name  (char*) : Local code name
      param_name       (char*) : Parameter name
      initial_value    (int)   : Initial value
    """

    CWP_Param_add(local_code_name,
                  param_name,
                  CWP_INT,
                  &(initial_value))

def param_add_dbl(char        *local_code_name,
                  char        *param_name,
                  double       initial_value):
    """
    Add a new double parameter and intialize it.

    Parameters:
      local_code_name  (char*)  : Local code name
      param_name       (char*)  : Parameter name
      initial_value    (double) : Initial value
    """

    CWP_Param_add(local_code_name,
                  param_name,
                  CWP_DOUBLE,
                  &(initial_value))

def param_add_str(char        *local_code_name,
                  char        *param_name,
                  char        *initial_value):
    """
    Add a new string parameter and intialize it.

    Parameters:
      local_code_name  (char*) : Local code name
      param_name       (char*) : Parameter name
      initial_value    (char*) : Initial value
    """

    CWP_Param_add(local_code_name,
                  param_name,
                  CWP_CHAR,
                  &(initial_value))

def param_set_int(char        *local_code_name,
                  char        *param_name,
                  int          initial_value):
    """
    Set an integer parameter.

    Parameters:
      local_code_name  (char*) : Local code name
      param_name       (char*) : Parameter name
      initial_value    (int)   : Initial value
    """

    CWP_Param_set(local_code_name,
                  param_name,
                  CWP_INT,
                  &(initial_value))

def param_set_dbl(char        *local_code_name,
                  char        *param_name,
                  double       initial_value):
    """
    Set a double parameter.

    Parameters:
      local_code_name  (char*)  : Local code name
      param_name       (char*)  : Parameter name
      initial_value    (double) : Initial value
    """

    CWP_Param_set(local_code_name,
                  param_name,
                  CWP_DOUBLE,
                  &(initial_value))

def param_set_str(char        *local_code_name,
                  char        *param_name,
                  char        *initial_value):
    """
    Set a string parameter.

    Parameters:
      local_code_name  (char*) : Local code name
      param_name       (char*) : Parameter name
      initial_value    (char*) : Initial value
    """

    CWP_Param_set(local_code_name,
                  param_name,
                  CWP_CHAR,
                  &(initial_value))

def param_del(char        *local_code_name,
              char        *param_name,
              CWP_Type_t   data_type):
    """
    Delete a parameter.

    Parameters:
      local_code_name  (char*)      : Local code name
      param_name       (char*)      : Parameter name
      data_type        (CWP_Type_t) : Parameter type
    """

    CWP_Param_del(local_code_name,
                  param_name,
                  data_type)

# -> functions about all code parameters
def param_n_get(char        *code_name,
                CWP_Type_t   data_type):
    """
    Return the number of parameters for the code code_name.

    Parameters:
      code_name        (char*)      : Code name
      data_type        (CWP_Type_t) : Parameter type

    Returns:
      n_param  (int) : Number of parameters for the code code_name
    """

    cdef int n_param = CWP_Param_n_get(code_name,
                                       data_type)

    return n_param

def param_list_get(char        *code_name,
                   CWP_Type_t   data_type):
    """
    Return the number of parameters for the code code_name.

    Parameters:
      code_name        (char*)      : Code name
      data_type        (CWP_Type_t) : Parameter type

    Returns:
      n_param     (int)    : Number of parameters for the code code_name
      param_names (char**) : Parameter names
    """

    cdef int n_param = -1;
    cdef char **c_param_names = NULL

    CWP_Param_list_get(code_name,
                       data_type,
                       &(n_param),
                       &(c_param_names))

    param_names = []
    for i in range(n_param):
      param_names.append(c_param_names[i])

    param_names = NPY.array(param_names)

    return {
            'n_param'     : n_param,
            'param_names' : param_names
           }

def param_is(char        *code_name,
             char        *param_name,
             CWP_Type_t   data_type):
    """
    Is this code_name a parameter ?

    Parameters:
      code_name        (char*)      : Code name
      param_name       (char*)      : Parameter name
      data_type        (CWP_Type_t) : Parameter type

    Returns:
     is_param (int) : 1 : true / 0 : false
    """

    cdef int is_param = CWP_Param_is(code_name,
                                     param_name,
                                     data_type)

    return is_param

def param_get(char        *code_name,
              char        *param_name,
              CWP_Type_t   data_type):
    """
    Return the parameter value of param_name on code_name.

    Parameters:
      code_name        (char*)      : Code name
      param_name       (char*)      : Parameter name
      data_type        (CWP_Type_t) : Parameter type

    Returns:
     value (data_type) : Parameter value
    """

    cdef int int_value = -1
    cdef double dbl_value = -1
    cdef char *str_value = NULL

    if (data_type == CWP_INT):
      CWP_Param_get(code_name,
                    param_name,
                    data_type,
                    &(int_value))
      return int_value

    elif (data_type == CWP_DOUBLE):
      CWP_Param_get(code_name,
                    param_name,
                    data_type,
                    &(dbl_value))
      return dbl_value

    elif (data_type == CWP_CHAR):
      CWP_Param_get(code_name,
                    param_name,
                    data_type,
                    &(str_value))
      return str_value

def param_reduce(CWP_Op_t    op,
                 char       *param_name,
                 CWP_Type_t  data_type,
                 int         nCode,
                 list        code_names):
    """
    Return the result of a reduce operation about a parameter.
    The parameter name has to be the same for all codes.

    Parameters:
      op         (CWP_Op_t)   :Operation
      param_name (char*)      :Parameter name
      data_type  (CWP_Type_t) :Parameter type
      nCode      (int)        :Number of codes
      code_names (char**)     :Codes name

    Returns:
      res (data_type) : Result
    """

    cdef char **c_code_names = <char**> malloc(sizeof(char*) * nCode)
    for i in range(nCode):
      c_code_names[i] = <char *> malloc(sizeof(char) * len(code_names[i]))

    for i in range(nCode):
      py_byte_code_name = code_names[i].encode('UTF-8')
      c_code_names[i] = py_byte_code_name

    cdef int int_res = -1
    cdef double dbl_res = -1
    cdef char *str_res = NULL

    if (data_type == CWP_INT):
      CWP_Param_reduce(op,
                       param_name,
                       data_type,
                       &(int_res),
                       nCode,
                       c_code_names)
      return int_res

    elif (data_type == CWP_DOUBLE):
      CWP_Param_reduce(op,
                       param_name,
                       data_type,
                       &(dbl_res),
                       nCode,
                       c_code_names)
      return dbl_res

    elif (data_type == CWP_CHAR):
      CWP_Param_reduce(op,
                       param_name,
                       data_type,
                       &(str_res),
                       nCode,
                       c_code_names)
    return str_res

def param_lock(char        *code_name):
    """
    Lock access to local parameters from a distant code.

    Parameters:
      code_name (char*) : Code name
    """

    CWP_Param_lock(code_name)

def param_unlock(char        *code_name):
    """
    Unlock access to local parameters from a distant code.

    Parameters:
      code_name (char*) : Code name
    """

    CWP_Param_unlock(code_name)

# --> functions about exchange TO DO : add in field object?
def field_issend(char     *local_code_name,
                 char     *cpl_id,
                 char     *src_field_id):
    """
    Send a spatially interpolated field to the coupled code with
    nonblocking communications.

    This function is independant of CWP_Time_exch_t mode. The user has to
    manually check the consistency of the exchanges.

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      src_field_id    (char*) : Source field identifier
    """

    CWP_Field_issend(local_code_name,
                     cpl_id,
                     src_field_id)

def field_irecv(char     *local_code_name,
                char     *cpl_id,
                char     *tgt_field_id):
    """
    Wait the end of an exchange related to request from CWP_Field_issend.

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      tgt_field_id    (char*) : Target field identifier
    """

    CWP_Field_irecv(local_code_name,
                    cpl_id,
                    tgt_field_id)

def field_wait_issend(char     *local_code_name,
                      char     *cpl_id,
                      char     *src_field_id):
    """
    Wait the end of an exchange related to request from CWP_Field_issend.

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      src_field_id    (char*) : Source field identifier
    """

    CWP_Field_wait_issend(local_code_name,
                          cpl_id,
                          src_field_id)

def field_wait_irecv(char     *local_code_name,
                     char     *cpl_id,
                     char     *tgt_field_id):
    """
    Wait the end of an exchange related to request from CWP_Field_irecv.

    This function waits the end of exchange related to request
    from CWP_Field_irecv

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      tgt_field_id    (char*) : Target field identifier
    """

    CWP_Field_wait_irecv(local_code_name,
                         cpl_id,
                         tgt_field_id)

# --> functions to use inside user interpolation functions

def interp_field_n_components_get(char             *local_code_name,
                                  char             *cpl_id,
                                  char             *field_id):
    """
    Get spatial interpolation number of field components.

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      field_id        (char*) : Field identifier

    Returns:
      n_components (int) : Number of components in Field field_id
    """

    cdef int n_components = CWP_Interp_field_n_components_get(local_code_name,
                                                              cpl_id,
                                                              field_id)

    return n_components

def interp_src_data_get(char             *local_code_name,
                        char             *cpl_id,
                        char             *field_id,
                        int               i_part):
    """
    Get spatial interpolation source data.

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      field_id        (char*) : Field identifier
      i_part          (int)   : Parition identifier

    Returns:
      n_elt_src      (int)   : Number of source elements
      src_to_tgt_idx (int *) : Index of source->target connectivity
    """

    cdef int   n_elt_src = -1
    cdef int  *src_to_tgt_idx

    CWP_Interp_src_data_get(local_code_name,
                            cpl_id,
                            field_id,
                            i_part,
                            &(n_elt_src),
                            &(src_to_tgt_idx))

    return {
            'n_elt_src'     : n_elt_src,
            'src_to_tgt_idx' : create_numpy_i(src_to_tgt_idx, n_elt_src+1)
           }

def interp_tgt_data_get(char             *local_code_name,
                        char             *cpl_id,
                        char             *field_id,
                        int               i_part):
    """
    Get spatial interpolation target data.

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      field_id        (char*) : Field identifier
      i_part          (int)   : Parition identifier

    Returns:
      n_elt_src      (int)   : Number of source elements
      src_to_tgt_idx (int *) : Index of source->target connectivity
    """

    cdef int   n_elt_tgt        = -1
    cdef int   n_referenced_tgt = -1
    cdef int  *referenced_tgt
    cdef int  *tgt_come_from_src_idx

    CWP_Interp_tgt_data_get(local_code_name,
                            cpl_id,
                            field_id,
                            i_part,
                            &(n_elt_tgt),
                            &(n_referenced_tgt),
                            &(referenced_tgt),
                            &(tgt_come_from_src_idx))

    return {
            'n_elt_tgt'     : n_elt_tgt,
            'n_referenced_tgt'     : n_referenced_tgt,
            'referenced_tgt' : create_numpy_i(referenced_tgt, n_elt_tgt+1), # TO DO see size Bastien push
            'tgt_come_from_src_idx' : create_numpy_i(tgt_come_from_src_idx, n_elt_tgt+1) # TO DO see size Bastien push
           }

def interp_location_weights_get(char                  *local_code_name,
                                char                  *cpl_id,
                                char                  *field_id,
                                int                    i_part,
                                CWP_Spatial_interp_t   spatial_interp_algorithm):
    """
   Get spatial interpolation weights (location algorithm).

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      field_id        (char*) : Field identifier
      i_part          (int)   : Parition identifier

    Returns:
      weights (double *) : Location interpolation weigths
    """

    cdef double *weights

    CWP_Interp_location_weights_get(local_code_name,
                                    cpl_id,
                                    field_id,
                                    i_part,
                                    spatial_interp_algorithm,
                                    &(weights))

    return create_numpy_d(weights, 1) # TO DO see size Bastien push

def interp_location_point_data_get(char                  *local_code_name,
                                   char                  *cpl_id,
                                   char                  *field_id,
                                   int                    i_part,
                                   CWP_Spatial_interp_t   spatial_interp_algorithm):
    """
    Get spatial interpolation point data (location algorithm).

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      field_id        (char*) : Field identifier
      i_part          (int)   : Parition identifier

    Returns:
      points_coords           (double *) : Coordinates
      points_uvw              (double *) : Coordinates in uvw system
      points_dist2            (double *) : Squared distance
      points_projected_coords (double *) : Coordiantes of projected points
    """

    cdef double *points_coords
    cdef double *points_uvw
    cdef double *points_dist2
    cdef double *points_projected_coords

    CWP_Interp_location_point_data_get(local_code_name,
                                       cpl_id,
                                       field_id,
                                       i_part,
                                       spatial_interp_algorithm,
                                       &(points_coords),
                                       &(points_uvw),
                                       &(points_dist2),
                                       &(points_projected_coords))

    return {
            'points_coords' : create_numpy_d(points_coords, 1), # TO DO see size Bastien push
            'points_uvw' : create_numpy_d(points_uvw, 1), # TO DO see size Bastien push
            'points_dist2' : create_numpy_d(points_dist2, 1), # TO DO see size Bastien push
            'points_projected_coords' : create_numpy_d(points_projected_coords, 1) # TO DO see size Bastien push
           }

def interp_location_internal_cell_vtx_get(char                  *local_code_name,
                                          char                  *cpl_id,
                                          char                  *field_id,
                                          int                    i_part,
                                          CWP_Spatial_interp_t   spatial_interp_algorithm):
    """
    Get spatial interpolation internal cell->vertex connectivity (location algorithm).

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      field_id        (char*) : Field identifier
      i_part          (int)   : Parition identifier

    Returns:
      cell_vtx_idx (int *) : Index of internal cell->vtx connectivity
      cell_vtx     (int *) : Internal cell->vtx connectivity
    """

    cdef int *cell_vtx_idx
    cdef int *cell_vtx

    CWP_Interp_location_internal_cell_vtx_get(local_code_name,
                                              cpl_id,
                                              field_id,
                                              i_part,
                                              spatial_interp_algorithm,
                                              &(cell_vtx_idx),
                                              &(cell_vtx))

    return {
            'cell_vtx_idx' : create_numpy_i(cell_vtx_idx, 1), # TO DO see size Bastien push
            'cell_vtx' : create_numpy_i(cell_vtx, 1) # TO DO see size Bastien push
           }

def interp_intersection_volumes_get(char                  *local_code_name,
                                    char                  *cpl_id,
                                    char                  *field_id,
                                    int                    i_part,
                                    CWP_Spatial_interp_t   spatial_interp_algorithm):
    """
    Get spatial interpolation volumes (intersection algorithm).

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      field_id        (char*) : Field identifier
      i_part          (int)   : Parition identifier

    Returns:
      volumes (double *) : Volumes
    """

    cdef double *volumes

    CWP_Interp_intersection_volumes_get(local_code_name,
                                        cpl_id,
                                        field_id,
                                        i_part,
                                        spatial_interp_algorithm,
                                        &(volumes))

    return create_numpy_d(volumes, 1) # TO DO see size Bastien push

def interp_closest_points_distances_get(char                  *local_code_name,
                                        char                  *cpl_id,
                                        char                  *field_id,
                                        int                    i_part,
                                        CWP_Spatial_interp_t   spatial_interp_algorithm):
    """
    Get spatial interpolation distances (closest points algorithm).

    Parameters:
      local_code_name (char*) : Local code name
      cpl_id          (char*) : Coupling identifier
      field_id        (char*) : Field identifier
      i_part          (int)   : Parition identifier

    Returns:
      distances2 (double *) : Squared distances
    """

    cdef double *distances2

    CWP_Interp_closest_points_distances_get(local_code_name,
                                            cpl_id,
                                            field_id,
                                            i_part,
                                            spatial_interp_algorithm,
                                            &(distances2))

    return create_numpy_d(distances2, 1) # TO DO see size Bastien push

#-----------------------------------------------------------------------------
# FIELD CLASS
cdef class Field (object):

    """
    Create a CWIPI field object.
    """

    # do not use char* in class because it doesn't work, use str instead
    cdef str local_code_name
    cdef str cpl_id
    cdef str field_id

    def __init__(self,
                 char                  *local_code_name,
                 char                  *cpl_id,
                 char                  *field_id,
                 CWP_Type_t             data_type,
                 CWP_Field_storage_t    storage,
                 int                    n_component,
                 CWP_Dof_location_t     target_location,
                 CWP_Field_exch_t       exch_type,
                 CWP_Status_t           visu_status):
        """
        Initialize field object.

        Parameters:
          local_code_name (char*)               : Local code name
          cpl_id          (char*)               : Field id
          field_id        (char*)               : Field id
          data_type       (CWP_Type_t)          : Data type
          storage         (CWP_Field_storage_t) : Storage type
          n_component     (int)                 : Number of component
          target_location (CWP_Dof_location_t)  : Target location
          exch_type       (CWP_Field_exch_t)    : Exchange type
          visu_status     (CWP_Status_t)        : Visualization status
        """

        self.local_code_name = local_code_name
        self.cpl_id = cpl_id
        self.field_id = field_id

        CWP_Field_create(self.local_code_name,
                         self.cpl_id,
                         self.field_id,
                         data_type,
                         storage,
                         n_component,
                         target_location,
                         exch_type,
                         visu_status)

    def __del__(self):
        """
        Delete a field object.
        """

        CWP_Field_del(self.local_code_name,
                      self.cpl_id,
                      self.field_id)

    # --> DATA
    def data_set(self,
                 int                i_part,
                 CWP_Field_map_t    map_type,
                 NPY.ndarray[NPY.double_t] data):
        """
        Set field data.

        Parameters:
          i_part    (int)                       : Current partition
          map_type  (CWP_Field_map_t)           : Choice if data is setted for the source or the target
          data      (NPY.ndarray[NPY.double_t]) : Storage array (Mapping)
        """

        CWP_Field_data_set(self.local_code_name,
                           self.cpl_id,
                           self.field_id,
                           i_part,
                           map_type,
                <double *> data.data)

    def n_component_get(self):
        """
        Get number of field components.

        Returns:
          n_comp (int) : Number of field components
        """

        cdef int n_comp = CWP_Field_n_component_get(self.local_code_name,
                                                    self.cpl_id,
                                                    self.field_id)

        return n_comp

    def target_dof_location_get(self):
        """
        Get target degrees of freedom location.

        Returns:
          dof_loc (CWP_Dof_location_t) : Location of degrees of freedom
        """

        cdef CWP_Dof_location_t dof_loc = CWP_Field_target_dof_location_get(self.local_code_name,
                                                                            self.cpl_id,
                                                                            self.field_id)

        return dof_loc

    def storage_get(self):
        """
        Get field storage type.

        Returns:
          storage (CWP_Field_storage_t) : Field storage type
        """

        cdef CWP_Field_storage_t storage = CWP_Field_storage_get(self.local_code_name,
                                                                 self.cpl_id,
                                                                 self.field_id)

        return storage

    # --> LOCALISATION
    def n_uncomputed_tgts_get(self,
                              int   i_part):
      """
      Get the number of uncomputed targets.

      Parameters:
        i_part    (int)  : Current partition

      Returns:
        n_unc_tgt (int) : Number of uncomputed targets
      """

      cdef int n_unc_tgt = CWP_N_uncomputed_tgts_get(self.local_code_name,
                                                     self.cpl_id,
                                                     self.field_id,
                                                     i_part)

      return n_unc_tgt

    def uncomputed_tgts_get(self,
                            int   i_part):
      """
      Get the uncomputed targets.

      Parameters:
        i_part    (int)  : Current partition

      Returns:
        unc_tgt (int *) : Uncomputed targets
      """

      cdef int *unc_tgt = CWP_Uncomputed_tgts_get(self.local_code_name,
                                                  self.cpl_id,
                                                  self.field_id,
                                                  i_part)

      cdef int n_unc_tgt = CWP_N_uncomputed_tgts_get(self.local_code_name,
                                                     self.cpl_id,
                                                     self.field_id,
                                                     i_part)

      py_unc_tgt = create_numpy_i(unc_tgt, n_unc_tgt)

      return py_unc_tgt

    def n_computed_tgts_get(self,
                              int   i_part):
      """
      Get the number of computed targets.

      Parameters:
        i_part    (int)  : Current partition

      Returns:
        n_c_tgt (int) : Number of computed targets
      """

      cdef int n_c_tgt = CWP_N_computed_tgts_get(self.local_code_name,
                                                 self.cpl_id,
                                                 self.field_id,
                                                 i_part)

      return n_c_tgt

    def computed_tgts_get(self,
                          int   i_part):
      """
      Get the computed targets.

      Parameters:
        i_part    (int)  : Current partition

      Returns:
        c_tgt (int *) : Computed targets
      """

      cdef int *c_tgt = CWP_Computed_tgts_get(self.local_code_name,
                                              self.cpl_id,
                                              self.field_id,
                                              i_part)

      cdef int n_c_tgt = CWP_N_computed_tgts_get(self.local_code_name,
                                                 self.cpl_id,
                                                 self.field_id,
                                                 i_part)

      py_c_tgt = create_numpy_i(c_tgt, n_c_tgt)

      return py_c_tgt

    def n_involved_srcs_get(self,
                            int   i_part):
      """
      Get the number of involved sources.

      Parameters:
        i_part    (int)  : Current partition

      Returns:
        n_i_src (int) : Number of involved sources
      """

      cdef int n_i_src = CWP_N_involved_srcs_get(self.local_code_name,
                                                 self.cpl_id,
                                                 self.field_id,
                                                 i_part)

      return n_i_src

    def involved_srcs_get(self,
                          int   i_part):
      """
      Get the involved sources.

      Parameters:
        i_part    (int)  : Current partition

      Returns:
        n_i_src (int *) : involved sources
      """

      cdef int *i_src = CWP_Involved_srcs_get(self.local_code_name,
                                                self.cpl_id,
                                                self.field_id,
                                                i_part)

      cdef int n_i_src = CWP_N_involved_srcs_get(self.local_code_name,
                                                   self.cpl_id,
                                                   self.field_id,
                                                   i_part)

      py_i_src = create_numpy_i(i_src, n_i_src)

      return py_i_src

#-----------------------------------------------------------------------------
# COUPLING CLASS
cdef class Coupling (object):

    """
    Create a CWIPI coupling object.
    """
    cdef str local_code_name
    cdef str cpl_id
    cdef int n_fields
    cdef list fields
    # cdef Field[:] fields
    cdef dict __dict__

    def __init__(self,
                 char                *local_code_name,
                 char                *cpl_id,
                 char                *coupled_code_name,
                 CWP_Interface_t      entities_dim,
                 CWP_Comm_t           comm_type,
                 CWP_Spatial_interp_t spatial_interp,
                 int                  n_part,
                 CWP_Dynamic_mesh_t   displacement,
                 CWP_Time_exch_t      recv_freq_type):
        """
        Initialize coupling object.

        Parameters:
          local_code_name   (char*)                : Local code name
          cpl_id            (char*)                : Coupling identifier
          coupled_code_name (char*)                : Distant or local coupled code name
          entities_dim      (CWP_Interface_t)      : ?
          comm_type         (CWP_Comm_t)           : Communication type
          spatial_interp    (CWP_Spatial_interp_t) : Spatial interpolation method
          n_part            (int)                  : Number of interface partition
          displacement      (CWP_Dynamic_mesh_t)   : Mesh moving status
          recv_freq_type    (CWP_Time_exch_t)      : Type of receiving frequency
        """

        self.local_code_name = local_code_name
        self.cpl_id = cpl_id
        self.n_fields = 0
        self.fields_name = {}
        self.fields = []

        CWP_Cpl_create(local_code_name,
                       cpl_id,
                       coupled_code_name,
                       entities_dim,
                       comm_type,
                       spatial_interp,
                       n_part,
                       displacement,
                       recv_freq_type)

    def __del__(self):
        """
        Delete a coupling object.
        """

        CWP_Cpl_del(self.local_code_name, self.cpl_id)

    # --> FIELD
    def field_create(self,
                     char                  *field_id,
                     CWP_Type_t             data_type,
                     CWP_Field_storage_t    storage,
                     int                    n_component,
                     CWP_Dof_location_t     target_location,
                     CWP_Field_exch_t       exch_type,
                     CWP_Status_t           visu_status):
        """
        Create field object and add in self.fields dictionnary.

        Parameters:
          field_id        (char*)               : Field id
          data_type       (CWP_Type_t)          : Data type
          storage         (CWP_Field_storage_t) : Storage type
          n_component     (int)                 : Number of component
          target_location (CWP_Dof_location_t)  : Target location
          exch_type       (CWP_Field_exch_t)    : Exchange type
          visu_status     (CWP_Status_t)        : Visualization status
        """

        self.fields_name[field_id] = self.n_fields

        self.fields.append(Field(self.local_code_name,
                                 self.cpl_id,
                                 field_id,
                                 data_type,
                                 storage,
                                 n_component,
                                 target_location,
                                 exch_type,
                                 visu_status))

        self.n_fields = self.n_fields + 1

    def field_set(self,
                  char              *field_id,
                  int                i_part,
                  CWP_Field_map_t    map_type,
                  NPY.ndarray[NPY.double_t] data):
        """
        Set field data for a given Field object in the dictionnary.

        Parameters:
          field_id  (char*)                     : Field id
          i_part    (int)                       : Current partition
          data_type (CWP_Field_map_t)           : Choice if data is setted for the source or the target
          data      (NPY.ndarray[NPY.double_t]) : Storage array (Mapping)
        """

        cdef int idx = self.fields_name[field_id]

        self.fields[idx].data_set(i_part,
                                  map_type,
                                  data)

    def field_get(self,
                  char                  *field_id):
        """
        Get field properties.

        Parameters:
          field_id        (char*)               : Field id

        Returns:
          n_comp (int) : Number of field components
          dof_loc (CWP_Dof_location_t) : Location of degrees of freedom
          storage (CWP_Field_storage_t) : Field storage type
        """

        cdef int idx = self.fields_name[field_id]

        cdef int n_comp = self.fields[idx].n_component_get()
        cdef CWP_Dof_location_t dof_loc = self.fields[idx].target_dof_location_get()
        cdef CWP_Field_storage_t storage = self.fields[idx].storage_get()

        return {
                'n_comp' : n_comp,
                'dof_loc': dof_loc,
                'storage': storage
               }

    def field_del(self,
                  char                  *field_id):
        """
        Delete Field object and field form self.fiels dictionnary

        Parameters:
          field_id        (char*)               : Field id
        """
        cdef int idx = self.fields_name[field_id]

        del self.fields_name[field_id]

    # --> MESH
    def mesh_interf_finalize(self):
        """
        Finalize interface mesh.
        This function computes the global numbers of mesh entities if they are
        not provided.
        """

        CWP_Mesh_interf_finalize(self.local_code_name, self.cpl_id)

    def mesh_interf_vtx_set(self,
                            int i_part,
                            int n_pts,
                            NPY.ndarray[NPY.double_t] coord not None,
                            NPY.ndarray[NPY.long] global_num):
        """
        Set vertices.

        Parameters:
          i_part     (int)                       : Current partition
          n_pts      (int)                       : Number of points
          coord      (NPY.ndarray[NPY.double_t]) : Coordinates (size = 3 * n_pts)
          global_num (NPY.ndarray[NPY.long])     : Pointer to parent element number (or None)
        """

        if (global_num is None):
          CWP_Mesh_interf_vtx_set(self.local_code_name,
                                  self.cpl_id,
                                  i_part,
                                  n_pts,
                                  <double *> coord.data,
                                  NULL)
        else:
          CWP_Mesh_interf_vtx_set(self.local_code_name,
                                  self.cpl_id,
                                  i_part,
                                  n_pts,
                                  <double *> coord.data,
                                  <long *> global_num.data)

    def mesh_interf_block_add(self,
                              CWP_Block_t block_type):
        """
        Add a connectivity block to the interface mesh.

        Parameters:
          block_type (CWP_Block_t) : Block type

        Returns:
          block_id (int) : Block identifier
        """

        cdef int block_id = CWP_Mesh_interf_block_add(self.local_code_name,
                                                      self.cpl_id,
                                                      block_type)

        return block_id

    def mesh_interf_block_std_set(self,
                                  i_part,
                                  block_id,
                                  n_elts,
                                  NPY.ndarray[NPY.int32_t] connec not None,
                                  NPY.ndarray[NPY.long]    global_num):
        """
        Set a standard block to the interface mesh.
        This function adds a connectivity block to the interface mesh.

        Parameters:
          i_part     (int)                      : Partition identifier
          block_id   (int)                      : Block identifier
          n_elts     (int)                      : Number of elements
          connec     (NPY.ndarray[NPY.int32_t]) : Connectivity (size = n_vertex_elt * n_elts)
          global_num (NPY.ndarray[NPY.long])    : Pointer to parent element number (or None)
        """

        if (global_num is None):
          CWP_Mesh_interf_block_std_set(self.local_code_name,
                                        self.cpl_id,
                                        i_part,
                                        block_id,
                                        n_elts,
                                        <int *> connec.data,
                                        NULL)
        else:
          CWP_Mesh_interf_block_std_set(self.local_code_name,
                                        self.cpl_id,
                                        i_part,
                                        block_id,
                                        n_elts,
                                        <int *> connec.data,
                                        <long *> global_num.data)

    def mesh_interf_block_std_get(self,
                                  i_part,
                                  block_id):
        """
        Get the properties of a standard block of the interface mesh.

        Parameters:
          i_part     (int) : Partition identifier
          block_id   (int) : Block identifier

        Returns:
          n_elts     (int)                      : Number of elements
          connec     (NPY.ndarray[NPY.int32_t]) : Connectivity (size = n_vertex_elt * n_elts)
          global_num (NPY.ndarray[NPY.long])    : Pointer to parent element number (or None)
        """

        cdef int n_elts = -1
        cdef int  *connec
        cdef long *global_num

        CWP_Mesh_interf_block_std_get(self.local_code_name,
                                      self.cpl_id,
                                      i_part,
                                      block_id,
                                      &(n_elts),
                                      &(connec),
                                      &(global_num))
        if (global_num is NULL):
          py_global_num = None
        else :
          py_global_num = create_numpy_l(global_num, n_elts)

        cdef CWP_Block_t block_type = CWP_std_block_type_get(self.local_code_name,
                                                             self.cpl_id,
                                                             block_id)
        cdef int size = n_elts * std_block_n_pts_get(block_type)
        return {
                'n_elts'     : n_elts,
                'connec'     : create_numpy_i(connec, size),
                'global_num' : py_global_num
               }

    def mesh_interf_f_poly_block_set(self,
                                     i_part,
                                     block_id,
                                     n_elts,
                                     NPY.ndarray[NPY.int32_t] connec_idx not None,
                                     NPY.ndarray[NPY.int32_t] connec not None,
                                     NPY.ndarray[NPY.long]    global_num):
        """
        Set the connectivity of a polygon block in a interface mesh partition.

        Parameters:
          i_part     (int)                      : Partition identifier
          block_id   (int)                      : Block identifier
          n_elts     (int)                      : Number of elements
          connec_idx (NPY.ndarray[NPY.int32_t]) : Connectivity index ( connec_id[0] = 0 and size = n_elts + 1)
          connec     (NPY.ndarray[NPY.int32_t]) : Connectivity (size = connec_idx[n_elts])
          global_num (NPY.ndarray[NPY.long])    : Pointer to global element number (or None)
        """

        if (global_num is None):
          CWP_Mesh_interf_f_poly_block_set(self.local_code_name,
                                           self.cpl_id,
                                           i_part,
                                           block_id,
                                           n_elts,
                                   <int *> connec_idx.data,
                                   <int *> connec.data,
                                           NULL)
        else:
          CWP_Mesh_interf_f_poly_block_set(self.local_code_name,
                                           self.cpl_id,
                                           i_part,
                                           block_id,
                                           n_elts,
                                   <int *> connec_idx.data,
                                   <int *> connec.data,
                                  <long *> global_num.data)

    def mesh_interf_f_poly_block_get(self,
                                     i_part,
                                     block_id):
        """
        Get the connectivity of a polygon block in a interface mesh partition.

        Parameters:
          i_part     (int)                      : Partition identifier
          block_id   (int)                      : Block identifier

        Returns:
          n_elts     (int)                      : Number of elements
          connec_idx (NPY.ndarray[NPY.int32_t]) : Connectivity index ( connec_id[0] = 0 and size = n_elts + 1)
          connec     (NPY.ndarray[NPY.int32_t]) : Connectivity (size = connec_idx[n_elts])
          global_num (NPY.ndarray[NPY.long])    : Pointer to global element number (or None)
        """

        cdef int n_elts = -1
        cdef int  *connec
        cdef int  *connec_idx
        cdef long *global_num

        CWP_Mesh_interf_f_poly_block_get(self.local_code_name,
                                         self.cpl_id,
                                         i_part,
                                         block_id,
                                         &(n_elts),
                                         &(connec_idx),
                                         &(connec),
                                         &(global_num))

        if (global_num is NULL):
          py_global_num = None
        else :
          py_global_num = create_numpy_l(global_num, n_elts)

        return {
                'n_elts'     : n_elts,
                'connec_idx' : create_numpy_i(connec_idx, n_elts+1),
                'connec'     : create_numpy_i(connec, connec_idx[n_elts]),
                'global_num' : py_global_num
               }

    def mesh_interf_c_poly_block_set(self,
                                     i_part,
                                     block_id,
                                     n_elts,
                                     n_faces,
                                     NPY.ndarray[NPY.int32_t] connec_faces_idx not None,
                                     NPY.ndarray[NPY.int32_t] connec_faces not None,
                                     NPY.ndarray[NPY.int32_t] connec_cells_idx not None,
                                     NPY.ndarray[NPY.int32_t] connec_cells not None,
                                     NPY.ndarray[NPY.long]    global_num):
        """
        Set the properties of a polyhedron block in a interface mesh partition.

        Parameters:
          i_part           (int)                      : Partition identifier
          block_id         (int)                      : Block identifier
          n_elts           (int)                      : Number of elements
          n_faces          (int)                      : Number of faces
          connec_faces_idx (NPY.ndarray[NPY.int32_t]) : Polyhedron face to vertex index (face_vertex_idx[0] = 0 and size = max(cell_face_connec) + 1)
          connec_faces     (NPY.ndarray[NPY.int32_t]) : Polyhedron face to vertex connectivity (size = face_vertex_idx[n_elts])
          connec_cells_idx (NPY.ndarray[NPY.int32_t]) : Polyhedron to face index (cell_face_idx[0] = 0 and size = n_elts + 1)
          connec_cells     (NPY.ndarray[NPY.int32_t]) : Polyhedron to face connectivity (size = cell_face_idx[n_elts])
          global_num       (NPY.ndarray[NPY.long])    : Pointer to global element number (or None)
        """

        if (global_num is None):
          CWP_Mesh_interf_c_poly_block_set(self.local_code_name,
                                           self.cpl_id,
                                           i_part,
                                           block_id,
                                           n_elts,
                                           n_faces,
                                           <int *> connec_faces_idx.data,
                                           <int *> connec_faces.data,
                                           <int *> connec_cells_idx.data,
                                           <int *> connec_cells.data,
                                           NULL)
        else:
          CWP_Mesh_interf_c_poly_block_set(self.local_code_name,
                                           self.cpl_id,
                                           i_part,
                                           block_id,
                                           n_elts,
                                           n_faces,
                                           <int *> connec_faces_idx.data,
                                           <int *> connec_faces.data,
                                           <int *> connec_cells_idx.data,
                                           <int *> connec_cells.data,
                                           <long *> global_num.data)

    def mesh_interf_c_poly_block_get(self,
                                     i_part,
                                     block_id):
        """
        Get the properties of a polyhedron block of the interface mesh partition.

        Parameters:
          i_part           (int)                      : Partition identifier
          block_id         (int)                      : Block identifier

        Returns:
          n_elts           (int)                      : Number of elements
          n_faces          (int)                      : Number of faces
          connec_faces_idx (NPY.ndarray[NPY.int32_t]) : Polyhedron face to vertex index (face_vertex_idx[0] = 0 and size = max(cell_face_connec) + 1)
          connec_faces     (NPY.ndarray[NPY.int32_t]) : Polyhedron face to vertex connectivity (size = face_vertex_idx[n_elts])
          connec_cells_idx (NPY.ndarray[NPY.int32_t]) : Polyhedron to face index (cell_face_idx[0] = 0 and size = n_elts + 1)
          connec_cells     (NPY.ndarray[NPY.int32_t]) : Polyhedron to face connectivity (size = cell_face_idx[n_elts])
          global_num       (NPY.ndarray[NPY.long])    : Pointer to global element number (or None)
        """

        cdef int n_elts  = -1
        cdef int n_faces = -1
        cdef int  *connec_faces_idx
        cdef int  *connec_faces
        cdef int  *connec_cells_idx
        cdef int  *connec_cells
        cdef long *global_num

        CWP_Mesh_interf_c_poly_block_get(self.local_code_name,
                                         self.cpl_id,
                                         i_part,
                                         block_id,
                                         &(n_elts),
                                         &(n_faces),
                                         &(connec_faces_idx),
                                         &(connec_faces),
                                         &(connec_cells_idx),
                                         &(connec_cells),
                                         &(global_num))

        if (global_num is NULL):
          py_global_num = None
        else :
          py_global_num = create_numpy_l(global_num, n_elts)

        return {
                'n_elts'           : n_elts,
                'n_faces'          : n_faces,
                'connec_faces_idx' : create_numpy_i(connec_faces_idx, n_faces+1),
                'connec_faces'     : create_numpy_i(connec_faces, connec_faces_idx[n_faces]),
                'connec_cells_idx' : create_numpy_i(connec_cells_idx, n_elts+1),
                'connec_cells'     : create_numpy_i(connec_cells, connec_cells_idx[n_elts]),
                'global_num'       : py_global_num
               }


    def mesh_interf_block_ho_set(self,
                                 i_part,
                                 block_id,
                                 n_elts,
                                 order,
                                 NPY.ndarray[NPY.int32_t] connec not None,
                                 NPY.ndarray[NPY.long]    global_num):
      """
        Set a high-order block to the interface mesh.
        This function adds a connectivity block to the interface mesh.

        Parameters:
          i_part     (int)                      : Partition identifier
          block_id   (int)                      : Block identifier
          n_elts     (int)                      : Number of elements
          order      (int)                      : Element order
          connec     (NPY.ndarray[NPY.int32_t]) : Connectivity (size = n_vertex_elt * n_elts)
          global_num (NPY.ndarray[NPY.long])    : Pointer to parent element number (or None)
      """

      if (global_num is None):
        CWP_Mesh_interf_block_ho_set(self.local_code_name,
                                     self.cpl_id,
                                     i_part,
                                     block_id,
                                     n_elts,
                                     order,
                                     <int *> connec.data,
                                     NULL)
      else:
        CWP_Mesh_interf_block_ho_set(self.local_code_name,
                                     self.cpl_id,
                                     i_part,
                                     block_id,
                                     n_elts,
                                     order,
                                     <int *> connec.data,
                                     <long *> global_num.data)


    def mesh_interf_block_ho_get(self,
                                 i_part,
                                 block_id):
      """
        Get the properties of a high-order block of the interface mesh.

        Parameters:
          i_part     (int) : Partition identifier
          block_id   (int) : Block identifier

        Returns:
          n_elts     (int)                      : Number of elements
          order      (int)                      : Element order
          connec     (NPY.ndarray[NPY.int32_t]) : Connectivity (size = n_vertex_elt * n_elts)
          global_num (NPY.ndarray[NPY.long])    : Pointer to parent element number (or None)
      """

      cdef int   n_elts = -1
      cdef int   order  = -1
      cdef int  *connec
      cdef long *global_num

      CWP_Mesh_interf_block_ho_get(self.local_code_name,
                                   self.cpl_id,
                                   i_part,
                                   block_id,
                                   &(order),
                                   &(n_elts),
                                   &(connec),
                                   &(global_num))
      if (global_num is NULL):
        py_global_num = None
      else :
        py_global_num = create_numpy_l(global_num, n_elts)

      cdef CWP_Block_t block_type = CWP_std_block_type_get(self.local_code_name,
                                                           self.cpl_id,
                                                           block_id)
      cdef int size = n_elts * ho_n_vtx_get(block_type, order)
      return {
              'n_elts'     : n_elts,
              'order'      : order,
              'connec'     : create_numpy_i(connec, size),
              'global_num' : py_global_num
             }


    def mesh_interf_ho_ordering_from_IJK_set(self,
                                             CWP_Block_t block_type,
                                             int         order,
                                             NPY.ndarray[NPY.int32_t] ijk_grid not None):
      """
        Define ho element ordering from the location in the (u, v, w) grid.

        Parameters:
          block_type (CWP_Block_t)              Block type
          order      (int)                      Element order
          ijk_grid   (NPY.ndarray[NPY.int32_t]) User ordering to (u, v, w) grid (size = elt_dim * n_nodes)
      """
      cdef int elt_dim = std_elt_dim(block_type)
      cdef int n_nodes = len(ijk_grid) // elt_dim

      CWP_Mesh_interf_ho_ordering_from_IJK_set(self.local_code_name,
                                               self.cpl_id,
                                               block_type,
                                               order,
                                               n_nodes,
                                               <int *> ijk_grid.data)


    def mesh_interf_del(self):
        """
        Delete interface mesh.
        """
        CWP_Mesh_interf_del(self.local_code_name,
                            self.cpl_id)

    def mesh_interf_from_cellface_set(self,
                                      i_part,
                                      n_cells,
                                      NPY.ndarray[NPY.int32_t] cell_face_idx not None,
                                      NPY.ndarray[NPY.int32_t] cell_face not None,
                                      n_faces,
                                      NPY.ndarray[NPY.int32_t] face_vtx_idx not None,
                                      NPY.ndarray[NPY.int32_t] face_vtx not None,
                                      NPY.ndarray[NPY.long]    global_num):
        """
        Define the interface mesh from a cell to face connectivity.

        Parameters:
          i_part        (int)                      : Current partition
          n_cells       (int)                      : Number of cells
          cell_face_idx (NPY.ndarray[NPY.int32_t]) : Polyhedron to face index (cell_face_idx[0] = 0 and size = n_elts + 1)
          cell_face     (NPY.ndarray[NPY.int32_t]) : Cell to face connectivity (size = cell_face_idx[n_elts])
          n_faces       (int)                      : Number of faces
          face_vtx_idx  (NPY.ndarray[NPY.int32_t]) : Polyhedron face to vertex index (face_vtx_idx[0] = 0 and size = n_faces + 1)
          face_vtx      (NPY.ndarray[NPY.int32_t]) : Face to vertex connectivity (size = face_vtx_idx[n_elts])
          global_num    (NPY.ndarray[NPY.long])    : Pointer to parent element number (or None)
        """

        if (global_num is None):
          CWP_Mesh_interf_from_cellface_set(self.local_code_name,
                                            self.cpl_id,
                                            i_part,
                                            n_cells,
                                            <int *> cell_face_idx.data,
                                            <int *> cell_face.data,
                                            n_faces,
                                            <int *> face_vtx_idx.data,
                                            <int *> face_vtx.data,
                                            NULL)
        else:
          CWP_Mesh_interf_from_cellface_set(self.local_code_name,
                                            self.cpl_id,
                                            i_part,
                                            n_cells,
                                            <int *> cell_face_idx.data,
                                            <int *> cell_face.data,
                                            n_faces,
                                            <int *> face_vtx_idx.data,
                                            <int *> face_vtx.data,
                                            <long *> global_num.data)

    def mesh_interf_from_faceedge_set(self,
                                      i_part,
                                      n_faces,
                                      NPY.ndarray[NPY.int32_t] face_edge_idx not None,
                                      NPY.ndarray[NPY.int32_t] face_edge not None,
                                      n_edges,
                                      NPY.ndarray[NPY.int32_t] edge_vtx_idx not None,
                                      NPY.ndarray[NPY.int32_t] edge_vtx not None,
                                      NPY.ndarray[NPY.long]    global_num):
        """
        Define the surface interface mesh from a face to edge connectivity.

        Parameters:
          i_part        (int)                      : Current partition
          n_faces       (int)                      : Number of faces
          face_edge_idx (NPY.ndarray[NPY.int32_t]) : Polygon to edge index (face_edge_idx[0] = 0 and size =  n_faces + 1)
          face_edge     (NPY.ndarray[NPY.int32_t]) : Face to edge connectivity (size = face_edge_idx[n_faces])
          n_edges       (int)                      : Number of edges
          edge_vtx_idx  (NPY.ndarray[NPY.int32_t]) : Polyhedron edge to vertex index  (edge_vtx_idx[0] = 0 and size = n_edges + 1)
          edge_vtx      (NPY.ndarray[NPY.int32_t]) : Face to vertex connectivity (size = edge_vtx_idx[n_edges])
          global_num    (NPY.ndarray[NPY.long])    : Pointer to parent element number (or None)
        """

        if (global_num is None):
          CWP_Mesh_interf_from_faceedge_set(self.local_code_name,
                                            self.cpl_id,
                                            i_part,
                                            n_faces,
                                            <int *> face_edge_idx.data,
                                            <int *> face_edge.data,
                                            n_edges,
                                            <int *> edge_vtx_idx.data,
                                            <int *> edge_vtx.data,
                                            NULL)
        else:
          CWP_Mesh_interf_from_faceedge_set(self.local_code_name,
                                            self.cpl_id,
                                            i_part,
                                            n_faces,
                                            <int *> face_edge_idx.data,
                                            <int *> face_edge.data,
                                            n_edges,
                                            <int *> edge_vtx_idx.data,
                                            <int *> edge_vtx.data,
                                            <long *> global_num.data)

    # --> SPATIAL INTERPOLATION
    def spatial_interp_weights_compute(self):
        """
        Compute spatial interpolation weights.
        """

        CWP_Spatial_interp_weights_compute(self.local_code_name,
                                           self.cpl_id)

    def spatial_interp_property_set(self,
                                    char *property_name,
                                    char *property_type,
                                    char *property_value):
        """
        Set a property of the spatial interpolation algorithm.

        Parameters:
          property_name  (char*) : Name of the property
          property_type  (char*) : Type of the property ("double" or "int")
          property_value (char*) : Value of the property
        """

        CWP_Spatial_interp_property_set(self.local_code_name,
                                        self.cpl_id,
                                        property_name,
                                        property_type,
                                        property_value)

    # --> VISU
    def visu_set(self,
                 int                   freq,
                 CWP_Visu_format_t     visu_format,
                 char                 *format_option):
        """
        Enable visualization output.

        Parameters:
          freq            (int)               : Output frequency
          visu_format     (CWP_Visu_format_t) : Output format to visualize exchanged fieldsDouble
          format_option   (char*)             : Output options "opt1, opt2, ..."
        """

        CWP_Visu_set(self.local_code_name,
                     self.cpl_id,
                     freq,
                     visu_format,
                     format_option)

    # --> USER TGT
    def user_tgt_pts_set(self,
                         int i_part,
                         int n_pts,
                         NPY.ndarray[NPY.double_t] coord not None,
                         NPY.ndarray[NPY.long] global_num):
        """
        This function must be called if the degrees of freedom locations are CWP_DOF_LOCATION_USER

        Parameters:
           i_part     (int)                      : Current partition
           n_pts      (int)                      : Number of points
           coord      (NPY.ndarray[NPY.double_t) : Coordinates (size = 3 * n_pts)
           global_num (NPY.ndarray[NPY.long])    : Global number or NUL (size = n_pts)
        """

        if (global_num is None):
          CWP_User_tgt_pts_set(self.local_code_name,
                               self.cpl_id,
                               i_part,
                               n_pts,
                               <double *> coord.data,
                               NULL)
        else:
          CWP_User_tgt_pts_set(self.local_code_name,
                               self.cpl_id,
                               i_part,
                               n_pts,
                               <double *> coord.data,
                               <long *> global_num.data)

    # --> USER INTERPOLATION
    def interp_function_unset(self,
                              char  *src_field_id):
        """
        Unsetting of an user interpolation.

        Parameters:
          src_field_id (char*) : Source field identifier
        """

        CWP_Interp_function_unset(self.local_code_name,
                                  self.cpl_id,
                                  src_field_id)

    def interp_function_set(self,
                            const char                 *src_field_id,
                            fct):
        """
        Setting of an user interpolation from location.
        This function takes into account an user interpolation function written with
        void (*\ref CWP_Interp_function_t) interface.

        Parameters:
          src_field_id (char*)                      : Source field id
          fct                                       : Function
        """
        global current_cpl_id
        global g_interp_fct
        current_cpl_id = self.cpl_id
        g_interp_fct[current_cpl_id] = fct

        CWP_Interp_function_set(self.local_code_name,
                                self.cpl_id,
                                src_field_id,
                                interp_callback)
        current_cpl_id = ""

#-----------------------------------------------------------------------------
# EXTERN
cdef extern from "cwipi_config.h":
    # trick from: https://stackoverflow.com/questions/5697479/how-can-a-defined-c-value-be-exposed-to-python-in-a-cython-module
    cdef int _CWIPI_MAJOR_VERSION "CWIPI_MAJOR_VERSION"
    cdef int _CWIPI_MINOR_VERSION "CWIPI_MINOR_VERSION"
    cdef int _CWIPI_RELEASE_VERSION "CWIPI_RELEASE_VERSION"
    cdef char* _CWIPI_VERSION "CWIPI_VERSION"

# CWIPI_VERSION = _CWIPI_VERSION
# CWIPI_MAJOR_VERSION = _CWIPI_MAJOR_VERSION
# CWIPI_MINOR_VERSION = _CWIPI_MINOR_VERSION
# CWIPI_RELEASE_VERSION = _CWIPI_RELEASE_VERSION
__version__ = _CWIPI_VERSION
